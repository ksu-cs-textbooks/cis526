<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Callbacks :: CIS 526 Textbook</title><link>https://textbooks.cs.ksu.edu/cis526/03-asynchronous-js/06-callbacks/</link><description>CONSOLE JavaScript implements its asynchronous nature through callbacks - functions that are invoked when an asynchronous process completes. We see this in our discussion of timers like setTimeout() and with our web workers with the onmessage event handler. These demonstrate two possible ways of setting a callback. With setTimeout() we pass the callback as a function parameter, i.e.:
function timeElapsed() { console.log("Time has elapsed!"); } // Set a timer for 1 second, and trigger timeElapsed() when the timer expires setTimeout(timeElapsed, 1000);With webworkers, we assign a function to a property of the worker (the onmessage variable):</description><generator>Hugo</generator><language>en-us</language><lastBuildDate/><atom:link href="https://textbooks.cs.ksu.edu/cis526/03-asynchronous-js/06-callbacks/index.xml" rel="self" type="application/rss+xml"/></channel></rss>