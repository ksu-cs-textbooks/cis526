<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Async and Await :: CIS 526 Textbook</title><link>https://textbooks.cs.ksu.edu/cis526/03-asynchronous-js/08-async-await/</link><description>The async and await keywords are probably more familiar to you from languages like C#. JavaScript introduced them to play much the same role - a function declared async is asynchronous, and returns a Promise object.
With this in mind, we can redeclare our createTimer() method using the async keyword:
async function createTimer(milliseconds) { return new Promise((resolve, reject) => { setTimeout(() => { resolve(); }, milliseconds); }); }Now, instead of using the promise directly, we can use the await keyword in other code to wait on the promise to resolve, i.</description><generator>Hugo</generator><language>en-us</language><lastBuildDate/><atom:link href="https://textbooks.cs.ksu.edu/cis526/03-asynchronous-js/08-async-await/index.xml" rel="self" type="application/rss+xml"/></channel></rss>