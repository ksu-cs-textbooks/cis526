<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CIS 526 Textbook on K-State CIS 526 Textbook</title>
    <link>https://ksu-cs-textbooks.github.io/cis526/</link>
    <description>Recent content in CIS 526 Textbook on K-State CIS 526 Textbook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 Aug 2018 10:53:05 -0500</lastBuildDate><atom:link href="https://ksu-cs-textbooks.github.io/cis526/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Week 2</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/y-announcements/old/summer2021/02-week2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/y-announcements/old/summer2021/02-week2/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>Course Introduction</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/00-forward/01-introduction/old/summer2021/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/00-forward/01-introduction/old/summer2021/</guid>
      <description>Web Only
This textbook was authored for the CIS 526 - Web Application Development course at Kansas State University. This front matter is specific to that course. If you are not enrolled in the course, please disregard this section.
Course Resources Syllabus Textbook Welcome Message Hello students, and welcome to CIS 526 â€“ Web App Design. My name is Nathan Bean, and I will be your instructor for this course.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/01-the-dom/01-introduction/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/01-the-dom/01-introduction/</guid>
      <description>At this point, you should be familiar with the big three technologies of the world-wide-web HTML, CSS, and JavaScript (Feel free to visit the appendices for a quick review). These three technologies work together to create the web pages you interact with every day. Each has a role to play in defining the final appearance of a web page:
Hyper-Text Markup Language (HTML) provides the structure and content Cascading Style Sheets (CSS) determine how that content should appear visually JavaScript provides interactivity, allowing both the structure and appearance of the page to change dynamically We often refer to this division of responsibility as the separation of concerns.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/02-http/01-introduction/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/02-http/01-introduction/</guid>
      <description>At the heart of the world wide web is the Hyper-Text Transfer Protocol (HTTP). This is a protocol defining how HTTP servers (which host web pages) interact with HTTP clients (which display web pages).
It starts with a request initiated from the web browser (the client). This request is sent over the Internet using the TCP protocol to a web server. Once the web server receives the request, it must decide the appropriate response - ideally sending the requested resource back to the browser to be displayed.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/03-asynchronous-js/01-introduction/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/03-asynchronous-js/01-introduction/</guid>
      <description>JavaScript makes extensive use of asynchronous processing to tackle the challenge of concurrency. This includes the events we&amp;rsquo;ve already talked about (user events, network events and timers), but it has also been expanded to provide even more powerful features. The XMLHTTPRequest object allows JavaScript to request additional resources directly in an asynchronous manner, and the more recent Fetch API updates that approach. Web workers allow parallel JavaScript processes to be run in the browser.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/04-node/01-introduction/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/04-node/01-introduction/</guid>
      <description>Node is an open-source, cross-platform JavaScript runtime environment build on Google&amp;rsquo;s V8 engine. It was created by Ryan Dahl in 2009 to allow for server-side scripting in JavaScript.
ECMAScript Support Node supports most of the features of ECMAScript 2015 (ES6), with the notable exception of ES6 modules (as Node adopted the CommonJS module approach before the ES6 proposal, and the two approaches are not interchangeable). You can learn more about Node&amp;rsquo;s ES6 support here.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/05-web-servers/01-introduction/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/05-web-servers/01-introduction/</guid>
      <description>The first web servers were developed to fulfill a simple role - they responded to requests for HTML documents that were (hopefully) located in their physical storage by streaming the contents of those documents to the client.
This is embodied in our request-response pattern. The client requests a resource (such as a HTML document), and receives either a status 200 response (containing the document), or an error status code explaining why it couldn&amp;rsquo;t be retrieved.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/06-dynamic-web-servers/01-introduction/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/06-dynamic-web-servers/01-introduction/</guid>
      <description>While the first generation of webservers was used to serve static content (i.e. files), it was not long before developers began to realize that a lot more potential existed in the technologies of the web. A key realization here is that the resources served by the web server don&amp;rsquo;t need to exist to be served.
Consider the directory listing from the previous chapter. It is not based on an existing file, but rather is dynamically created when requested by querying the file system of the server.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/07-persistent-storage/01-introduction/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/07-persistent-storage/01-introduction/</guid>
      <description>Of course, what made dynamic web servers interesting was that they could provide content built dynamically. In this approach, the HTML the server sends as a response does not need to be stored on the server as a HTML file, rather it can be constructed when a request is made.
That said, most web applications still need a persistent storage mechanism to use in dynamically creating those pages. If we&amp;rsquo;re dealing with a forum, we need to store the text for the posts.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/08-routing/01-introduction/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/08-routing/01-introduction/</guid>
      <description>Once again, we&amp;rsquo;ll return to the request-response pattern diagram.
We revisit this diagram because it is so central to how HTTP servers work. At the heart, a server&amp;rsquo;s primary responsibility is to respond to an incoming request. Thus, in writing a web server, our primary task is to determine what to respond with. With static web servers, the answer is pretty simple - we map the virtual path supplied by the URL to a file path on the file server.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/09-auth/01-introduction/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/09-auth/01-introduction/</guid>
      <description>An important part of any dynamic web server is controlling how, and by whom, it is used. This is the domain of authentication and authorization. Authentication refers to mechanisms used to establish the identity of a user, and authorization refers to determining if an authenticated user has permission to do the requested action in the system. Collectively, these two concepts are often referred to by the abbreviation auth.
Consider a content management system (CMS) - a dynamic website for hosting content created by authorized users.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/10-dynamic-web-frameworks/01-introduction/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/10-dynamic-web-frameworks/01-introduction/</guid>
      <description>You have now learned about and built examples of several early implementations for web applications - file servers and server pages. These kinds of web applications dominated the Internet in the 90&amp;rsquo;s, and continue to play a major role today. However, the needs of web applications grew increasingly more dynamic as the web continued to evolve, leading to the development of truly dynamic web servers built around a stack of technologies.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/a-html/01-introduction/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/a-html/01-introduction/</guid>
      <description>Hyper-Text Markup Language (HTML) alongside Hyper-Text Transfer Protocol (HTTP) formed the core of Sir Tim Berners-Lee&amp;rsquo;s world-wide web. As the name implies, HTTP is a markup language, one that combines the text of what is being said with instructions on how to display it.
The other aspect of HTML is its hyper-text nature. Hyper-text refers to text that links to additional resources - primarily the links in the document, but also embedded multimedia.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/b-css/01-introduction/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/b-css/01-introduction/</guid>
      <description>Style sheets are collections of rules for modifying how a SGML document appears. Cascading Style Sheets (CSS) are the specific implementation adopted by the W3C for HTML.
The core concept of CSS is that defines rules altering the appearance of HTML elements that can be selectively applied. These rules are held in a document (the style sheet) and are applied in a well-defined priority order (the cascading part of CSS).</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/c-js/01-introduction/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/c-js/01-introduction/</guid>
      <description>As the World Wide Web was gaining popularity in the mid-nineties, browser manufacturers started experimenting with interpreting program scripts embedded within webpages. By far the most successful of these was JavaScript, initally developed by Brandon Eich for Netscape.
Brandon Eich was hired to integrate the Scheme programming langauge into the Netscape browser. But when Netscape cut a deal with Sun Microsystems to bring Java Applets to their browser, his mission was altered to create a more Java-like langauge.</description>
    </item>
    
    <item>
      <title>Milestone 4</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/y-announcements/old/summer2021/04-milestone4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/y-announcements/old/summer2021/04-milestone4/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>Milestone 5</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/y-announcements/old/summer2021/05-milestone5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/y-announcements/old/summer2021/05-milestone5/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>Basic Syntax</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/c-js/02-basic-syntax/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/c-js/02-basic-syntax/</guid>
      <description>CONSOLE Because Netscape was adopting Java at the same time they were developing what would become JavaScript, there was a push to make the syntax stay somewhat consistent between the two languages. As a result, JavaScript has much of the look and feel of an imperative language like C, C#, or Java.
However, this similarity can be deceptive, because how JavaScript operates can be quite different than those languages. This can lead to frustration for imperative programmers learning JavaScript.</description>
    </item>
    
    <item>
      <title>Browser Requests</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/02-http/02-browser-requests/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/02-http/02-browser-requests/</guid>
      <description>Before we get too deep in the details of what a request is, and how it works, let&amp;rsquo;s explore the primary kind of request you&amp;rsquo;re already used to making - requests originating from a browser. Every time you use a browser to browse the Internet, you are creating a series of HTTP (or HTTPS) requests that travel across the networks between you and a web server, which responds to your requests.</description>
    </item>
    
    <item>
      <title>CGI Scripts</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/06-dynamic-web-servers/02-cgi-scripts/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/06-dynamic-web-servers/02-cgi-scripts/</guid>
      <description>Before we dig too deeply into dynamic web servers, we should review our technologies used in the web. On the client side, we have HTML, CSS, and JavaScript. Managing communication between the client and server, we have HTTP. But on the server side of the equation, what standard web technologies do we use?
The answer is none. There is no standard server development language. In fact, web servers can be written in almost every programming language.</description>
    </item>
    
    <item>
      <title>Concurrency Approaches</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/03-asynchronous-js/02-concurrency-approaches/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/03-asynchronous-js/02-concurrency-approaches/</guid>
      <description>Concurrency means &amp;ldquo;doing more than one thing at the same time.&amp;rdquo; In computer science, concurrency can refer to (1) structuring a program or algorithm so that it can be executed out-of-order or in partial order, or (2) actually executing computations in parallel. In modern-day programming, we&amp;rsquo;re often talking about both. But to help us develop a stronger understanding, let&amp;rsquo;s look at the two ideas one-at-a-time, and then bring it together.</description>
    </item>
    
    <item>
      <title>CSS Rules</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/b-css/02-rule-format/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/b-css/02-rule-format/</guid>
      <description>CSS properties consist of key-value pairs separated by a colon (:). For example:
color: red
indicates that the styled HTML elements should be given a red color.
Multiple properties are separated by semicolons (;), i.e.:
color: red; background-color: green; Rules are CSS properties grouped within curly braces ({}) and proceeded by a CSS selector to identify the HTML element(s) they should be applied to:
p { color: red; background-color: green; } In this example, all paragraph elements (&amp;lt;p&amp;gt;) should have red text on a green background (how festive!</description>
    </item>
    
    <item>
      <title>Data Serialization</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/07-persistent-storage/02-data-serialization/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/07-persistent-storage/02-data-serialization/</guid>
      <description>Perhaps the simplest persistent storage mechanism we can adopt is to use a combination of an in-memory variable and a file. For example, we could set up a simple database mechanism as a Node module:
const fs = require(&amp;#39;fs&amp;#39;); /** @module database * A simple in-memory database implementation, * providing a mechanism for getting and saving * a database object */ module.exports = { get, set }; // We retrieve and deserialize the database from // a file named data.</description>
    </item>
    
    <item>
      <title>Document Object Model</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/01-the-dom/02-document-object-model/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/01-the-dom/02-document-object-model/</guid>
      <description>The Document Object Model (or DOM) is a data structure representing the content of a web page, created by the browser as it parses the website. The browser then makes this data structure accessible to scripts running on the page. The DOM is essentially a tree composed of objects representing the HTML elements and text on the page.
Consider this HTML:
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Hello DOM!&amp;lt;/title&amp;gt; &amp;lt;link href=&amp;#34;site.css&amp;#34;/&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div class=&amp;#34;banner&amp;#34;&amp;gt; &amp;lt;h1&amp;gt;Hello DOM!</description>
    </item>
    
    <item>
      <title>Event Loop &amp; Console</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/04-node/02-event-loop/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/04-node/02-event-loop/</guid>
      <description>Node adopts an asynchronous event-driven approach to computing, much like JavaScript does in the browser. For example, when we set up a HTTP server in Node, we define a function to call when a HTTP request (an event) is received. As requests come in, they are added to a queue which is processed in a FIFO (first-in, first-out) manner.
In addition to events, Node implements many asynchronous functions for potentially blocking operations.</description>
    </item>
    
    <item>
      <title>HTML Element Structure</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/a-html/02-html-element-structure/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/a-html/02-html-element-structure/</guid>
      <description>HTML was built from the SGML (Structured Generalized Markup Language) standard, which provides the concept of &amp;ldquo;tags&amp;rdquo; to provide markup and structure within a text document. Each element in HTML is defined by a unique opening and closing tag, which in turn are surrounded by angle brackets (&amp;lt;&amp;gt;).
For example, a top-level heading in HTML would be written:
&amp;lt;h1&amp;gt;Hello World&amp;lt;/h1&amp;gt;
And render:
Hello World The &amp;lt;h1&amp;gt; is the opening tag and the &amp;lt;/h1&amp;gt; is the closing tag.</description>
    </item>
    
    <item>
      <title>HTTP Authentication</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/09-auth/02-http-auth/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/09-auth/02-http-auth/</guid>
      <description>The recognition of a need for authentication is not new to the web - it&amp;rsquo;s been there since the earliest standards. In fact, the original URL specification included an optional username and password as part of its format (specified as [username]:[password]@ between the protocol and host). I.e. to make a HTTP authenticated request against the CS departmental server you might use:
https://willie:purpleandwhite@cs.ksu.edu/ However, the use of authentication URLS is now highly discouraged and has been stripped from most browsers, as it is considered a security risk.</description>
    </item>
    
    <item>
      <title>HTTP in Node</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/05-web-servers/02-http-in-node/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/05-web-servers/02-http-in-node/</guid>
      <description>Node was written primarily to provide tools to develop web servers. So it should come as no surprise that it supports HTTP through a built-in library, the http module. This module provides support for creating both web servers and web clients, as well as working with http requests and responses. Let&amp;rsquo;s start by examining the latter.
Node HTTP Request Remember that a HTTP request is nothing more than a stream of text formatted according to the HTTP standards, as we discussed in Chapter 2.</description>
    </item>
    
    <item>
      <title>Navigating Canvas</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/00-forward/02-navigating-canvas/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/00-forward/02-navigating-canvas/</guid>
      <description>Web Only
This textbook was authored for the CIS 526 - Web Application Development course at Kansas State University. This front matter is specific to that course. If you are not enrolled in the course, please disregard this section.
This course makes extensive use of several features of Canvas which you may or may not have worked with before. To give you the best experience in this course, this page will briefly describe those features and the best way to access them.</description>
    </item>
    
    <item>
      <title>Request Routing</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/08-routing/02-routing/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/08-routing/02-routing/</guid>
      <description>In web development, routing refers to the process of matching an incoming request with generating the appropriate response. For most web servers (and definitely for Node-based ones), we abstract the process of generating the response into a function. We often call these functions endpoints as their purpose is to serve the response, effectively ending the processing of an incoming request with an appropriate response.
With a Node webserver, endpoint functions typically take in a req (an instance of http.</description>
    </item>
    
    <item>
      <title>Resources</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/08-routing/03-resources/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/08-routing/03-resources/</guid>
      <description>As the web transitioned to dynamic pages, the concept of the URL path evolved. With a static server, the path indicates an actual file that exists on the fileserver. But with dynamic pages, the url doesn&amp;rsquo;t have to correspond to anything real. Consider the case of Placeholder.com, a service that offers image URLs you can use in a site layout to simulate images. For example, the image below is generated by the site by using the URL By using the URL //via.</description>
    </item>
    
    <item>
      <title>Web Frameworks</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/10-dynamic-web-frameworks/02-web-frameworks/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/10-dynamic-web-frameworks/02-web-frameworks/</guid>
      <description>Web frameworks were designed meet these challenges, and to help programmers develop web applications more quickly and with less errors. They do so through providing a standardized approach to building a web application, including imposing a software architecture, providing commonly-needed functionality, libraries for database communication, and generators to create boilerplate code. These frameworks built upon existing Web Stacks, allowing the programmer to focus almost exclusively on the scripting aspect.
A slew of frameworks for various scripting languages emerged in 2005:</description>
    </item>
    
    <item>
      <title>Sessions</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/y-announcements/old/summer2021/07-sessions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/y-announcements/old/summer2021/07-sessions/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>Week 7</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/y-announcements/old/summer2021/08-week8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/y-announcements/old/summer2021/08-week8/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>Asynchronous Functions</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/04-node/03-asynchronous-functions/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/04-node/03-asynchronous-functions/</guid>
      <description>The benefit of the asynchronous approach is that all user-written code runs in a single-threaded environment while avoiding blocking. This means for the most part, we can write code the way we are used to, with a few tweaks for asynchronous functions.
Consider the two approaches for reading and printing the contents of a file, below:
const fs = require(&amp;#39;fs&amp;#39;); // Synchronous approach var data = fs.readFileSync(&amp;#39;file.txt&amp;#39;); console.log(data); // Asynchronous approach fs.</description>
    </item>
    
    <item>
      <title>Concurrency Challenges</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/03-asynchronous-js/03-concurrency-challenges/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/03-asynchronous-js/03-concurrency-challenges/</guid>
      <description>Implementing concurrency in computing systems comes with some specific challenges. Consider the multitasking approach where we have your text editor and your music player running at the same time. As the text editor process yields to the music player, the data and program elements it had loaded up into working memory, needs to be cleared out and replaced with the music player&amp;rsquo;s data and program. However, the music player&amp;rsquo;s data and program need to be retained somewhere so that they can be swapped back in when the music player yields.</description>
    </item>
    
    <item>
      <title>CSS and the DOM</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/01-the-dom/03-css-and-the-dom/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/01-the-dom/03-css-and-the-dom/</guid>
      <description>Cascading style sheets (CSS) also interact with the DOM. Consider this CSS code:
.banner { border: 4px solid gold; border-radius: 5rem; background-color: goldenrod; padding: 5rem; color: brown; } .banner &amp;gt; h1 { font-style: italic; } .banner p { text-decoration: line-through; font-size: 1.2rem; } When it is placed in the site.css file referenced by the HTML we discussed in the last section, the rules it defines are evaluated in terms of the DOM tree.</description>
    </item>
    
    <item>
      <title>CSS Selectors</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/b-css/03-selectors/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/b-css/03-selectors/</guid>
      <description>In the example from the previous section, we saw:
p { color: red; background-color: green; } Here the p is a CSS Selector, which tells us what elements on the page the CSS rules should be applied to.
Simple Selectors The most basic CSS selectors come in several flavors, which we&amp;rsquo;ll take a look at next. Simple selectors are a string composed of alphanumeric characters, dashes (-), and underscores (_). Certain selectors also use additional special characters.</description>
    </item>
    
    <item>
      <title>Databases</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/07-persistent-storage/03-databases/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/07-persistent-storage/03-databases/</guid>
      <description>As we suggested in the previous section, using an already existing database application is a very common strategy for full-stack web development. Doing so has clear benefits - such programs are typically stable, secure, and optimized for data storage and retrieval. They are well beyond what we can achieve ourselves without a significant investment of time, and avoids the necessity of &amp;ldquo;reinventing the wheel&amp;rdquo;.
That said, making effective use of a third-party database system does require you to develop familiarity with how the database operates and is organized.</description>
    </item>
    
    <item>
      <title>HTML Document Structure</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/a-html/03-html-document-structure/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/a-html/03-html-document-structure/</guid>
      <description>When authoring an HTML page, HTML elements should be organized into an HTML Document. This format is defined in the HTML standard. HTML that does not follow this format are technically invalid, and may not be interpreted and rendered correctly by all browsers. Accordingly, it is important to follow the standard.
The basic structure of a valid HTML5 document is:
&amp;lt;!doctype HTML&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Page Title Goes Here&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;p&amp;gt;Page body and tags go here.</description>
    </item>
    
    <item>
      <title>JavaScript Functions</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/c-js/03-functions/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/c-js/03-functions/</guid>
      <description>CONSOLE While JavaScript may look like an imperative language on the surface, much of how it behaves is based on functional languages like Scheme. This leads to some of the common sources of confusion for programmers new to the language. Let&amp;rsquo;s explore just what its functional roots mean.
JavaScript implements first-class functions, which means they can be assigned to a variable, passed as function arguments, returned from other functions, and even nested inside other functions.</description>
    </item>
    
    <item>
      <title>Password Authentication</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/09-auth/03-password-auth/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/09-auth/03-password-auth/</guid>
      <description>One of the more common approaches used in modern dynamic webservers - especially those that are already using a database - is to have each user create an account and log in with a username and password. The primary difference in this approach from the HTTP Basic one is that:
The webserver provides a login page with a form for submitting the username/password (allowing it to be customized to match the site) On an successful authentication, a cookie is used to persist the user&amp;rsquo;s session, rather than re-submitting the Authentication header The actual difference in your server code between the two approaches is not that large.</description>
    </item>
    
    <item>
      <title>Request Format</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/02-http/03-request-format/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/02-http/03-request-format/</guid>
      <description>So now that we&amp;rsquo;ve seen HTTP Requests in action, let&amp;rsquo;s examine what they are. A HTTP Request is just a stream text that follows a specific format and sent from a client to a server.
It consists of one or more lines terminated by a CRLF (a carriage return and a line feed character, typically written \r\n in most programming languages).
A request-line describing the request Additional optional lines containing HTTP headers.</description>
    </item>
    
    <item>
      <title>Request Handling</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/05-web-servers/03-request-handling/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/05-web-servers/03-request-handling/</guid>
      <description>An important aspect to recognize about how Node&amp;rsquo;s http library operates is that all requests to the server are passed to the request handler function. Thus, you need to determine what to do with the incoming request as part of that function.
Working with the Request Object You will most likely use the information contained within the http.IncomingMessage object supplied as the first parameter to your request handler. We often use the name req for this parameter, short for request, as it represents the incoming HTTP request.</description>
    </item>
    
    <item>
      <title>Server Pages</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/06-dynamic-web-servers/03-server-pages/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/06-dynamic-web-servers/03-server-pages/</guid>
      <description>The CGI scripting approach eventually evolved into a concept known as server pages and embodied in the technologies of PHP and Microsoftâ€™s Active Server Pages (ASP), as well as Java Server Pages, and many other less-well-known technologies. While each of these use different scripting languages, the basic idea is the same: Take a traditional static webserver functionality, and couple it with a script interpreter. When most files are requested from the server, the file is served using the same techniques we used in the last chapter.</description>
    </item>
    
    <item>
      <title>Web Framework Characteristics</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/10-dynamic-web-frameworks/03-web-framework-characteristics/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/10-dynamic-web-frameworks/03-web-framework-characteristics/</guid>
      <description>Web frameworks can be classified in a number of ways, but there are several that you will see pop up in discussions. For example, an opinionated web framework is one that was developed with a strict software architecture that developers are expected to follow. While it may be possible to deviate from this expected structure, to do so often causes significant headaches and coding challenges. Ruby on Rails is a good example of an opinionated framework - there is a Rails Way of writing a Ruby on Rails application, and deviating from that way will require a lot more work on your part.</description>
    </item>
    
    <item>
      <title>Where to Find Help</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/00-forward/03-where-to-find-help/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/00-forward/03-where-to-find-help/</guid>
      <description>Web Only
This textbook was authored for the CIS 526 - Web Application Development course at Kansas State University. This front matter is specific to that course. If you are not enrolled in the course, please disregard this section.
Resources Slides K-State IT Help Desk - Email helpdesk@ksu.edu Syllabus K-State Online Canvas Help Instructure Canvas Guides Codio Documentation K-State Libraries K-State CS Support K-State CS Discord K-State CS Advising K-State Engineering Student Services K-State Office of Student Life K-State Report It As you work on the materials in this course, you may run into questions or problems and need assistance.</description>
    </item>
    
    <item>
      <title>Applying CSS Rules</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/b-css/04-applying-rules/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/b-css/04-applying-rules/</guid>
      <description>There are multiple ways CSS rules can be applied to HTML elements. A document containing CSS rules can be attached to a HTML document with a &amp;lt;link&amp;gt; element, embedded directly into the html page with a &amp;lt;style&amp;gt; element, or applied directly to a HTML element with the style attribute. Let&amp;rsquo;s look at each option.
Linked CSS Documents The &amp;lt;link&amp;gt; HTML element can be used to link the HTML page it appears in to a text file of CSS rules.</description>
    </item>
    
    <item>
      <title>Arrays - Lists by Another Name</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/c-js/04-arrays-and-lists/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/c-js/04-arrays-and-lists/</guid>
      <description>CONSOLE You might have noticed we used an array in discussing the for .. in loop, but didn&amp;rsquo;t talk about it in our data type discussion. This is because in JavaScript, an array is not a primitive data type. Rather, it&amp;rsquo;s a special kind of object.
This is one of those aspects of JavaScript that breaks strongly with imperative languages. Brandon Eich drew heavily from Scheme, which is a functional language that focuses heavily on list processing&amp;hellip; and the JavaScript array actually has more to do with lists than it does arrays.</description>
    </item>
    
    <item>
      <title>Asynchronous Programming</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/03-asynchronous-js/04-asynchronous-programming/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/03-asynchronous-js/04-asynchronous-programming/</guid>
      <description>In asynchronous programming, memory collisions are avoided by not sharing memory between threads. A unit of work that can be done in parallel is split off and handed to another thread, and any data it needs is copied into that threads&amp;rsquo; memory space. When the work is complete, the second thread notifies the primary thread if the work was completed successfully or not, and provides the resulting data or error.</description>
    </item>
    
    <item>
      <title>Custom Servers</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/06-dynamic-web-servers/04-custom-servers/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/06-dynamic-web-servers/04-custom-servers/</guid>
      <description>While CGI Scripts and Server Pages offered ways to build dynamic websites using off-the shelf web server technologies (Apache, IIS), many programmers found these approaches limiting. Instead, they sought to build the entire web server as a custom program.
Node was actually developed for exactly this approach - it provides abstractions around the fundamental aspects of HTTP in its http library. This library handles the listening for HTTP requests, and parses the request and uses it to populate a http.</description>
    </item>
    
    <item>
      <title>Inline vs. Block Elements</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/a-html/04-inline-vs-block/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/a-html/04-inline-vs-block/</guid>
      <description>Given that the role of HTML is markup, i.e. providing structure and formatting to text, HTML elements can broadly be categorized into two categories depending on how they affect the flow of text - inline and block.
Inline elements referred to elements that maintained the flow of text, i.e. the bring attention to (&amp;lt;b&amp;gt;) element used in a paragraph of text, would bold the text without breaking the flow:
&amp;lt;p&amp;gt;The quick brown &amp;lt;b&amp;gt;fox&amp;lt;/b&amp;gt; lept over the log&amp;lt;/p&amp;gt;</description>
    </item>
    
    <item>
      <title>JavaScript and the DOM</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/01-the-dom/04-js-and-the-dom/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/01-the-dom/04-js-and-the-dom/</guid>
      <description>The DOM tree is also accessible from JavaScript running in the page. It is accessed through the global window object, i.e. window.document or document.
Let&amp;rsquo;s use the &amp;lsquo;Console&amp;rsquo; tab of the developer tools to access this object. Open the previous example page again from this link. Click the console tab to open the expanded console, or use the console area in the bottom panel of the elements tab:
With the console open, type:</description>
    </item>
    
    <item>
      <title>Modules</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/04-node/04-modules/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/04-node/04-modules/</guid>
      <description>One major feature Node introduced to JavaScript was the ability to encapsulate code into separate files using modules. The approach adopted by Node is the CommonJS module pattern.
Warning
Node&amp;rsquo;s use of modules predates ECMA6&amp;rsquo;s adoption of modules, and the CommonJS approach Node adopted is fundamentally different than the ECMA6 version. For Node 16 (installed on your Codio Box), ECMA6 modules are an optional feature that has to be enabled with a flag when invoking the node command, i.</description>
    </item>
    
    <item>
      <title>Relational Databases</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/07-persistent-storage/04-relational-databases/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/07-persistent-storage/04-relational-databases/</guid>
      <description>Relational databases (also called SQL databases) provide a highly-structured storage mechanism. Data is organized into tables, with each column representing a single value and data type, and each row representing one entry. Conceptually, this organization is similar to tables you have seen in Excel and on the web. An example persons table is listed below:
id First Last 0 Lisa Merkowsky 1 Frank Stiles 3 Mary Cotts Relational databases are often called SQL databases as we use Structured Query Language (SQL) to communicate with them.</description>
    </item>
    
    <item>
      <title>Request Methods</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/02-http/04-request-methods/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/02-http/04-request-methods/</guid>
      <description>The first line of the HTTP request includes the request method, which indicates what kind of action the request is making of the web server (these methods are also known as HTTP Verbs). The two most common are GET and POST, as these are supported by most browsers.
Commonly HTTP Methods The following requests are those most commonly used in web development. As noted before GET and POST requests are the most commonly used by web browsers, while GET, PUT, PATCH, and DELETE are used by RESTful APIs.</description>
    </item>
    
    <item>
      <title>Request Revisted</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/08-routing/04-request-revisited/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/08-routing/04-request-revisited/</guid>
      <description>We&amp;rsquo;ve seen then how the request conveys information useful to selecting the appropriate endpoint with the path, and also the query string. But there is more information available in our request than just those two tidbits. And we have all of that information available to us for determining the correct response to send. With that in mind, let&amp;rsquo;s revisit the parts of the request in terms of what kinds of information they can convey.</description>
    </item>
    
    <item>
      <title>Single Page Apps</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/10-dynamic-web-frameworks/04-single-page-apps/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/10-dynamic-web-frameworks/04-single-page-apps/</guid>
      <description>Client-side frameworks often focus on creating single page apps. In this pattern, the entire website consists of a single HTML page with very little content, mostly the &amp;lt;script&amp;gt; elements to download a large client-side JavaScript library. Once downloaded, this library populates the page with HTML content by directly manipulating the DOM.
Consider a drawing application for creating pixel art. It is entirely possible to write a single-page application that only needs a webserver to serve its static HTML and JavaScript files.</description>
    </item>
    
    <item>
      <title>Stronger Passwords</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/09-auth/04-stronger-passwords/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/09-auth/04-stronger-passwords/</guid>
      <description>Now that we&amp;rsquo;ve discussed how to build a password-based authentication system as securely as possible, we should take a moment to understand what makes a good password. While we can&amp;rsquo;t force users to use good passwords, we can encourage them to do so, and potentially build some requirements/guidance into our sign up forms.
You&amp;rsquo;ve likely been told multiple times that a good password is a mix of numbers, upper- and lower-case letters, and special symbols.</description>
    </item>
    
    <item>
      <title>The Importance of Being Async</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/05-web-servers/04-importance-of-async/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/05-web-servers/04-importance-of-async/</guid>
      <description>You may have noticed that we used the asynchronous version of fs.readFile() in our response handler. This is critical to good performance with a Node-based webserver - any potentially blocking action taken in the request handler should be asynchronous, because all incoming requests must be processed on the same thread. If our event loop gets bogged down handling a blocked process, then nobody gets a response!
Consider if we implemented one of the file serving options using the synchronous fs.</description>
    </item>
    
    <item>
      <title>What You&#39;ll Learn</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/00-forward/04-what-you-will-learn/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/00-forward/04-what-you-will-learn/</guid>
      <description>Web Only
This textbook was authored for the CIS 526 - Web Application Development course at Kansas State University. This front matter is specific to that course. If you are not enrolled in the course, please disregard this section.
The following is an outline of the topics we will be covering and when.
Warning
This course is still under development, so some of the content listed here may change before we reach that module.</description>
    </item>
    
    <item>
      <title>Caching for the Win</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/05-web-servers/05-caching-win/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/05-web-servers/05-caching-win/</guid>
      <description>In our example web server, we argued that asynchronous file reading was better than synchronous because reading from a file is a potentially blocking operation that can take a long time to perform. But even when it doesn&amp;rsquo;t block, it can still take a lot of time, making it the most expensive part of our request handling operation in terms of the time it takes to perform.
If we really want to squeeze all the performance we can out of our server (and therefore handle as many users as possible), we need to consider the strategy of caching.</description>
    </item>
    
    <item>
      <title>Course Textbooks</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/00-forward/05-textbooks/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/00-forward/05-textbooks/</guid>
      <description>Web Only
This textbook was authored for the CIS 526 - Web Application Development course at Kansas State University. This front matter is specific to that course. If you are not enrolled in the course, please disregard this section.
This course does not have a required print textbook. The resources presented in the modules are also organized into an online textbook that can be accessed here: https://textbooks.cs.ksu.edu/cis526. You may find this a useful reference if you prefer a traditional textbook layout.</description>
    </item>
    
    <item>
      <title>CSS Cascade</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/b-css/05-cascade-algorithm/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/b-css/05-cascade-algorithm/</guid>
      <description>Now that we know how to create an apply CSS rules to our HTML, let&amp;rsquo;s explore how they actually are used. A core idea behind CSS is the cascade algorithm, the cascading in cascading style sheets (CSS). The core idea behind the cascade algorithm is that as the browser encounters and parses CSS rules, they are collectively applied to the elements they match with. If the same rule is set multiple times, say color, the cascading algorithm decides which should be applied.</description>
    </item>
    
    <item>
      <title>JavaScript Events</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/01-the-dom/05-js-events/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/01-the-dom/05-js-events/</guid>
      <description>It should be no surprise that JavaScript features events - after all, we&amp;rsquo;ve already seen how the EventTarget interface allows us to attach event listeners to elements in the DOM tree. What might not be clear yet is how events are handled by JavaScript. JavaScript uses an event loop to process events. This is similar to Windows and other operating systems also handle events.
An event loop expressed in code looks something like:</description>
    </item>
    
    <item>
      <title>Objects and Classes</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/c-js/05-objects-and-classes/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/c-js/05-objects-and-classes/</guid>
      <description>CONSOLE JavaScript is also an object-oriented language, but the way it implements objects is derived from the ideas of the Self programming language, rather than the C++ origins of Java and C#&amp;rsquo;s object-oriented approaches.
Object Properties Let&amp;rsquo;s start with what an object is in JavaScript. It&amp;rsquo;s basically a collection of properties - key/value pairs, similar to the concept of a Dictionary in other languages. The properties play both the role of fields and methods of the object, as a property can be assigned a primitive value or a function.</description>
    </item>
    
    <item>
      <title>Packages</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/04-node/05-packages/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/04-node/05-packages/</guid>
      <description>The Node Package Manager allows you to create a package representing your project. This is similar to Visual Studio&amp;rsquo;s idea of a project - a package is a complete Node program.
Just as Visual Studio adds solution and project files, a Node package adds a file named package.json and a directory named node_modules.
The Package File Every node package has in its top-level directory a file named package.json. This JSON file provides important information about the project, including:</description>
    </item>
    
    <item>
      <title>Progressive Web Apps</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/10-dynamic-web-frameworks/05-progressive-web-apps/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/10-dynamic-web-frameworks/05-progressive-web-apps/</guid>
      <description>A next step in the evolution of single-page apps is the progressive web application (PWA). While these are web applications, they also provide a native-like feel when running in a phone or tablet, and can usually have a shortcut saved to the desktop. It is built around several new web standards that provide specific functionality:
Secure Context A PWA is always served with https. Also, many features that a PWA might want to use (geolocation, the camera) are only available to a site served over http.</description>
    </item>
    
    <item>
      <title>Query and Hash Strings</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/06-dynamic-web-servers/05-query-and-hash-strings/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/06-dynamic-web-servers/05-query-and-hash-strings/</guid>
      <description>Query strings (aka search strings) are the part of the URL that appear after the ? and before the optional #. The hash string is the portion of the url after the #. We&amp;rsquo;ve mentioned them a bit before, but as we dig into dynamic web servers it makes sense to do a deeper dive, as this is where they really come into play.
The Hash String First, let&amp;rsquo;s briefly visit the hash string.</description>
    </item>
    
    <item>
      <title>REST</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/08-routing/05-rest/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/08-routing/05-rest/</guid>
      <description>We&amp;rsquo;ve already seen that with our blog, we could convey which post to display with different URL strategies, i.e.:
http://my-blog.com/posts?id=5 http://my-blog.com/posts/5 http://my-blog.com/posts/5-a-night-that-was-dark And that is just to display posts. What about when we want our blog software to allow the writer to submit new posts? Or edit existing ones? That&amp;rsquo;s a lot of different URLS we&amp;rsquo;ll need to keep track of.
Representational State Transfer (REST) Roy Fielding tackled this issue in Chapter 5 of his Ph.</description>
    </item>
    
    <item>
      <title>Single Sign On</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/09-auth/05-single-sign-on/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/09-auth/05-single-sign-on/</guid>
      <description>It should be clear from our earlier discussion that there are some very real challenges to writing a good authentication approach. These challenges can be broken into two categories, those that face us as the programmer, and those that arise from our users:
Programmer Challenges For us as the programmer, there are a lot of steps in creating an authentication strategy that we must get right. We also must be very careful about how we store the authentication data - i.</description>
    </item>
    
    <item>
      <title>SQL Injection</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/07-persistent-storage/05-sql-injection/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/07-persistent-storage/05-sql-injection/</guid>
      <description>Along with the use of relational databases and SQL comes one very important attack to be aware of - SQL injection. This attack takes advantage of the way many developers write SQL queries within their programs. Consider the simple relational database we laid out earlier. Let&amp;rsquo;s assume our web application lets us search for people by their last names. To find Mary Cotts, we would then need a SQL query like:</description>
    </item>
    
    <item>
      <title>Tables</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/a-html/05-tables/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/a-html/05-tables/</guid>
      <description>Tables were amongst the first addition to HTML (along with images), as they were necessary for the primary role of early HTML, disseminating research.
A table requires a lot of elements to be nested in a specific manner. It is best expressed through an example:
&amp;lt;table&amp;gt; &amp;lt;thead&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;th&amp;gt;Name&amp;lt;/th&amp;gt; &amp;lt;th&amp;gt;Role&amp;lt;/th&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;/thead&amp;gt; &amp;lt;tbody&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;Darth Vader&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;Antagonist&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;Luke Skywalker&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;Coming-of-age protagonist&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;Princess Lea&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;Heroic resistance fighter&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;Obi-Wan Kenobi&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;Wise old man&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;Han Solo&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;Likeable scoundrel&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;Chewbacca&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;The muscle&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;Threepio&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;Comedic foil&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;Artoo Deetoo&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;Plot driver&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;/tbody&amp;gt; &amp;lt;/table&amp;gt; It renders as:</description>
    </item>
    
    <item>
      <title>URIs and URLs</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/02-http/05-uris-and-urls/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/02-http/05-uris-and-urls/</guid>
      <description>Before a web request can be made, the browser needs to know where the resource requested can be found. This is the role that a Universal Resource Locator (a URL) plays. A URL is a specific kind of Universal Resource Indicator (URI) that specifies how a specific resource can be retrieved.
Info
URLs and URIs The terms URL and URI are often used interchangeably in practice. However, a URL is a specific subset of URIs that indicate how to retrieve a resource over a network; while a URI identifies a unique resource, it does not necessarily indicate how to retrieve it.</description>
    </item>
    
    <item>
      <title>Web Workers</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/03-asynchronous-js/05-web-workers/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/03-asynchronous-js/05-web-workers/</guid>
      <description>As JavaScript began to be used to add more and more functionality to web applications, an important limitation began to appear. When the JavaScript interpreter is working on a big task, it stays in the event loop a long time, and does not pull events from the event queue. The result is the browser stops responding to user events&amp;hellip; and seems to be frozen. On the other hand - some programs will never end.</description>
    </item>
    
    <item>
      <title>Attaching Scripts</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/c-js/06-attaching-scripts/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/c-js/06-attaching-scripts/</guid>
      <description>Much like there are multiple ways to apply CSS to a web app, there are multiple ways to bring JavaScript into one. We can use a &amp;lt;script&amp;gt; tag with a specified src attribute to load a separate document, put our code into the &amp;lt;script&amp;gt; tag directly, or even add code to attributes of an HTML element. Let&amp;rsquo;s look at each option.
Script Tag with Source We can add a &amp;lt;script&amp;gt; tag with a src attribute that gives a url pointing to a JavaScript file.</description>
    </item>
    
    <item>
      <title>Callbacks</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/03-asynchronous-js/06-callbacks/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/03-asynchronous-js/06-callbacks/</guid>
      <description>CONSOLE JavaScript implements its asynchronous nature through callbacks - functions that are invoked when an asynchronous process completes. We see this in our discussion of timers like setTimeout() and with our web workers with the onmessage event handler. These demonstrate two possible ways of setting a callback. With setTimeout() we pass the callback as a function parameter, i.e.:
function timeElapsed() { console.log(&amp;#34;Time has elapsed!&amp;#34;); } // Set a timer for 1 second, and trigger timeElapsed() when the timer expires setTimeout(timeElapsed, 1000); With webworkers, we assign a function to a property of the worker (the onmessage variable):</description>
    </item>
    
    <item>
      <title>CAS</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/09-auth/06-cas/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/09-auth/06-cas/</guid>
      <description>Let&amp;rsquo;s start our discussion of single-sign on strategies with Central Authentication Service (CAS). We&amp;rsquo;ll do this because it is one of the more straightforward approaches to Single Sign On, and one you&amp;rsquo;ve probably used every day as a K-State student, as it is the basis of Kansas State University&amp;rsquo;s eid login system.
CAS is a standard protocol that involves two servers and the client computer. One server is the host of the app and the other is the authentication server.</description>
    </item>
    
    <item>
      <title>CSS Specificity</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/b-css/06-specificity/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/b-css/06-specificity/</guid>
      <description>But what about two rules that conflict that appear in the same level of the cascade order? For example, given the CSS:
p { color: black; } .warning { color: red; } what would the color of &amp;lt;p class=&amp;quot;warning&amp;quot;&amp;gt; be? You might say it would be red because the .warning CSS rules come after the p rules. And that would be true if the two rules had the same specificity. An example of that is:</description>
    </item>
    
    <item>
      <title>Dependencies</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/04-node/06-dependencies/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/04-node/06-dependencies/</guid>
      <description>A second great benefit of creating your project as a Node package is that dependencies can be managed using the Node Package Manager (npm). You can install any Node package with the command $npm install [package name]. This command looks for the corresponding package in an online repository, and if it is found, downloads it and saves it to the subdirectory node_modules in your package directory.
It also creates an entry in the package.</description>
    </item>
    
    <item>
      <title>Form Encoding</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/06-dynamic-web-servers/06-form-encoding/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/06-dynamic-web-servers/06-form-encoding/</guid>
      <description>When a form is submitted as a POST request, its inputs are serialized according to the form&amp;rsquo;s encoding strategy. This value is also used as the Content-Type header of the request. The three form encoding values are:
application/x-www-form-urlencoded (the default) multipart/form-data (used for file uploads) text/plain (used for debugging) The &amp;lt;form&amp;gt; element&amp;rsquo;s enctype attribute can be set to any of these three possible values.
application/x-www-form-urlencoded This serialization format consists of key/value pairs where the keys and values are url (percent) encoded, and between each key and value is a = and between each pair is a &amp;amp;.</description>
    </item>
    
    <item>
      <title>Forms</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/a-html/06-forms/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/a-html/06-forms/</guid>
      <description>Forms were also amongst the first additions to the HTML standard, and provide the ability to submit data to a web server. A web form is composed of &amp;lt;input&amp;gt;, &amp;lt;textarea&amp;gt;, &amp;lt;select&amp;gt; and similar elements nested within a &amp;lt;form&amp;gt; element.
The Form Element The form element primarily is used to organize input elements and specify how they should be submitted. In its simplest form, it is simply a tag that other elements are nested within:</description>
    </item>
    
    <item>
      <title>Index Pages</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/05-web-servers/06-index-pages/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/05-web-servers/06-index-pages/</guid>
      <description>The original purpose of the World-Wide-Web was to share webpages and other digital resources across the Internet. In many ways, an early web server was like a hard drive that was open to the world. Think about the HTTP methods, &amp;quot;GET&amp;quot; is like a file read, &amp;quot;POST&amp;quot; is like a write, &amp;quot;PUT&amp;quot; and &amp;quot;PATCH&amp;quot; like a file modification, and &amp;quot;DELETE&amp;quot; was a file erasure.
So, just like when you browse your hard drive using Windows Explorer or other software, it was necessary for these early web pages to display an index - a listing of all the contents of a directory.</description>
    </item>
    
    <item>
      <title>Object-Relational Mapping</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/07-persistent-storage/06-orm/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/07-persistent-storage/06-orm/</guid>
      <description>If you think learning and writing SQL looks challenging, you&amp;rsquo;re not alone. Early full-stack developers did as well. In addition, there was the additional need to convert the responses from the relational database from text into objects the program could use. It shouldn&amp;rsquo;t be surprising that libraries quickly were adopted to manage this process. The most basic of these are drivers, simple programs which manage the connection between the database and the program using it, sending SQL queries to the database and parsing the results into data types native to the language (usually an array of arrays or an array of dictionaries - the outer array for the rows, and the inner array or dictionary for the column values within the row).</description>
    </item>
    
    <item>
      <title>Request Headers</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/02-http/06-request-headers/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/02-http/06-request-headers/</guid>
      <description>Request headers take the form of key-value pairs, separated by colons : and terminated with a CRLF (a carriage return and line feed character). For example:
Accept-Encoding: gzip Indicates that the browser knows how to accepted content compressed in the Gzip format.
Note that request headers are a subset of message headers that apply specifically to requests. There are also message headers that apply only to HTTP responses, and some that apply to both.</description>
    </item>
    
    <item>
      <title>Routers</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/08-routing/06-routers/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/08-routing/06-routers/</guid>
      <description>Many web development frameworks built upon this concept of routes by supplying a router, and object that would store route patterns and perform the routing operation. One popular Node library express, is at its heart a router. If we were to write our Node blog using Express, the syntax to create our routes would be:
const express = require(&amp;#39;express&amp;#39;); var app = express(); // Home page app.get(&amp;#39;/&amp;#39;, serveHome); // Posts app.</description>
    </item>
    
    <item>
      <title>Summer 2021 Syllabus</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/00-forward/06-syllabus/old/summer2021/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/00-forward/06-syllabus/old/summer2021/</guid>
      <description>Web Only
This textbook was authored for the CIS 526 - Web Application Development course at Kansas State University. This front matter is specific to that course. If you are not enrolled in the course, please disregard this section.
CIS 526 - Web App Development Instructor Contact Information Instructor: Nathan Bean (nhbean AT ksu DOT edu) Office: DUE 2216 Phone: (785)483-9264 (Call/Text) Website: https://nathanhbean.com Virtual Office Hours: By appointment via Zoom.</description>
    </item>
    
    <item>
      <title>The DOM and External Resource Loading</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/01-the-dom/06-dom-resource-loading/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/01-the-dom/06-dom-resource-loading/</guid>
      <description>One of the important aspects of working with HTML is understanding that an HTML page is more than just the HTML. It also involves a collection of resources that are external to the HTML document, but displayed or utilized by the document. These include elements like &amp;lt;link&amp;gt;, &amp;lt;script&amp;gt;, &amp;lt;video&amp;gt;, &amp;lt;img&amp;gt;, and &amp;lt;source&amp;gt; with src or href attributes set.
As the DOM tree is parsed and loaded and these external resources are encountered, the browser requests those resources as well.</description>
    </item>
    
    <item>
      <title>APIs</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/08-routing/07-apis/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/08-routing/07-apis/</guid>
      <description>Before we step away from routing, we should take the time to discuss a specific style of web application that goes hand-in-hand with routing - an Application Programming Interface (API). An API is simply a interface for two programs to communicate, to allow one to act as a service for the other. Web APIs are APIs that use hyper-text transfer protocol (http) as the mechanism for this communication. Thus, the client program makes HTTP requests against the API server and receives responses.</description>
    </item>
    
    <item>
      <title>Common HTML Elements</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/a-html/07-common-elements/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/a-html/07-common-elements/</guid>
      <description>This page details some of the most commonly used HTML elements. For a full reference, see MDN&amp;rsquo;s HTML Element Reference.
Document-Level Elements These elements describe the basic structure of the HTML document.
&amp;lt;html&amp;gt; The &amp;lt;html&amp;gt; element contains the entire HTML document. It should have exactly two children, the &amp;lt;head&amp;gt; and the &amp;lt;body&amp;gt; elements, appearing in that order.
&amp;lt;head&amp;gt; The &amp;lt;head&amp;gt; element contains any metadata describing the document. The most common children elements are &amp;lt;title&amp;gt;, &amp;lt;meta&amp;gt;, and &amp;lt;link&amp;gt;.</description>
    </item>
    
    <item>
      <title>CSS Units</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/b-css/07-units/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/b-css/07-units/</guid>
      <description>When specifying CSS rules, you often need to provide a unit of measurement. Any time you provide a measurement in a CSS rule, you must provide the units that measurement is being expressed in, following the value. For example:
#banner { width: 300px; } sets the width of the element with id banner to 300 pixels.
There are actually a lot of units available in CSS, and we&amp;rsquo;ll summarize the most common in this section.</description>
    </item>
    
    <item>
      <title>Git</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/04-node/07-git/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/04-node/07-git/</guid>
      <description>Most Node packages are made available as git repositories, and npm has built-in support for using git.
The Repository Property In your package.json file, you can specify a &amp;quot;repository&amp;quot; property, which specifies where the repository for this project exists. Consider the following example of the npm command-line interface package:
&amp;#34;repository&amp;#34;: { &amp;#34;type&amp;#34; : &amp;#34;git&amp;#34;, &amp;#34;url&amp;#34; : &amp;#34;https://github.com/npm/cli.git&amp;#34; } For many open-source projects, the repository is located on Github, a GitHub gist, BitBucket, or a GitLab instance.</description>
    </item>
    
    <item>
      <title>Partial Downloads</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/05-web-servers/07-partial-downloads/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/05-web-servers/07-partial-downloads/</guid>
      <description>While we normally think of downloading an entire file from the web, there are some situations where it makes sense to download only part of a file. One case is with a large file download that gets interrupted - it makes a lot of sense to start downloading the remaining bytes from where you left off, rather than starting over again. A second case is when you are streaming media; often the user may not watch or listen to the entire media file, so why download the bytes they don&amp;rsquo;t need?</description>
    </item>
    
    <item>
      <title>Promises</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/03-asynchronous-js/07-promises/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/03-asynchronous-js/07-promises/</guid>
      <description>CONSOLE Promises replace the callback mechanism with a JavaScript object, a Promise. In many ways, this is similar to the XMLHttpRequest object that is at the heart of AJAX. You can think of it as a state machine that is in one of three states: pending, fulfilled, or rejected.
A promise can be created by wrapping an asynchronous call within a new Promise object. For example, we can turn a setTimeout() into a promise with:</description>
    </item>
    
    <item>
      <title>Request Body</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/02-http/07-request-body/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/02-http/07-request-body/</guid>
      <description>After the request headers and an extra CRLF (carriage return and line feed) is the request body.
For GET and DELETE requests, there is no body. For POST, PUT, and PATCH, however, this section should contain the data being sent to the server. If there is a body, the headers should include Content-Type and Content-Length. The Content-Length is always provided as a count of octets (a set of eight bits). Thus, binary data is sent as an octet stream.</description>
    </item>
    
    <item>
      <title>Request Body</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/06-dynamic-web-servers/07-req-body/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/06-dynamic-web-servers/07-req-body/</guid>
      <description>While many HTTP libraries will process the entire incoming request before passing control to the program, Node&amp;rsquo;s http module takes a different approach. It constructs and passes the http.IncomingMessage and http.ServerResponse objects as soon as it has received the header portion of the request. This means the body may still be being transmitted to the server as you start to process the request.
This is fine for GET requests, as they don&amp;rsquo;t have a body.</description>
    </item>
    
    <item>
      <title>SAML</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/09-auth/07-saml/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/09-auth/07-saml/</guid>
      <description>Security Assertion Markup Language (SAML) is a similar single-sign-on strategy to CAS, but one that has a wider adoption in the business world. The process is quite similar, with the addition that the user agent identifies the user before requesting access. How it does so is left to the implementer, but it can be an IP address, stored token, or other means.
1
Much like CAS, SAML provides its response in the form of XML.</description>
    </item>
    
    <item>
      <title>Summary</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/01-the-dom/07-summary/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/01-the-dom/07-summary/</guid>
      <description>In this chapter, we reviewed the Document Object Model (the DOM), the tree-like structure of HTML elements built by the browser as it parses an HTML document. We discussed how CSS rules are applied to nodes in this tree to determine how the final webpage will be rendered, and how JavaScript can be used to manipulate and transform the DOM (and the resulting webpage appearance).
We also discussed how JavaScript events work, and how this event-driven approach is the basis for implementing concurrency within the language.</description>
    </item>
    
    <item>
      <title>The Document Object Model</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/c-js/07-the-dom/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/c-js/07-the-dom/</guid>
      <description>Now that we&amp;rsquo;ve reviewed the basic syntax and structure of the JavaScript language, and how to load it into a page, we can turn our attention to what it was created for - to interact with web pages in the browser. This leads us to the Document Object Model (DOM).
The DOM is a tree-like structure that is created by the browser when it parses the HTML page. Then, as CSS rules are interpreted and applied, they are attached to the individual nodes of the tree.</description>
    </item>
    
    <item>
      <title>Async and Await</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/03-asynchronous-js/08-async-await/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/03-asynchronous-js/08-async-await/</guid>
      <description>The async and await keywords are probably more familiar to you from languages like C#. JavaScript introduced them to play much the same role - a function declared async is asynchronous, and returns a Promise object.
With this in mind, we can redeclare our createTimer() method using the async keyword:
async function createTimer(milliseconds) { return new Promise((resolve, reject) =&amp;gt; { setTimeout(() =&amp;gt; { resolve(); }, milliseconds); }); } Now, instead of using the promise directly, we can use the await keyword in other code to wait on the promise to resolve, i.</description>
    </item>
    
    <item>
      <title>Cookies</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/06-dynamic-web-servers/08-cookies/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/06-dynamic-web-servers/08-cookies/</guid>
      <description>HTML was designed as a stateless protocol. This means that there is no expectation for the server to keep track of prior requests made to it. Each incoming HTTP request is effectively treated as if it is the first request ever made to the server.
This was an important consideration for making the web possible. Consider what would happen if our server needed to keep track of what every visitor did on the site - especially when you have thousands of unique visitors every second?</description>
    </item>
    
    <item>
      <title>CSS Functions</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/b-css/08-functions/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/b-css/08-functions/</guid>
      <description>CSS provides a number of useful functions that calculate values. Functions are written in the form name(arg1, arg2, ...) and are provided as values to CSS properties. For example, this CSS code sets the height of the content area to the available space on screen for content after subtracting a header and footer:
#header {height: 150px} #footer {height: 100px} #content { height: calc(100vh - 150px - 100px); } Here 100vh is the height of the viewport, and the header and footer are defined in terms of pixels.</description>
    </item>
    
    <item>
      <title>JSON Web Tokens</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/09-auth/08-jwt/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/09-auth/08-jwt/</guid>
      <description>A common thread across single-sign-on approaches is the issuing of some kind of ticket or certificate to identify the signed-in user. This is often stored within a cookie (which means it can be used to persist a connection with a web app). However, as the web matured, a more robust identity token became a standard: the JSON Web Token (JWT).
A JSON Web Token (JWT) consists of three parts:
A header with metadata A payload consisting of the data needed to identify the user A cryptographic signature verifying the payload and header The JWT puts the user information directly into a token that is served by the authentication server.</description>
    </item>
    
    <item>
      <title>Response Format</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/02-http/08-response-format/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/02-http/08-response-format/</guid>
      <description>Similar to an HTTP Request, an HTTP response is typically a stream of text and possibly data:
It consists of one or more lines of text, terminated by a CRLF (sequential carriage return and line feed characters):
A status-line indicating the HTTP protocol, the status code, and a textual status Optional lines containing the Response Headers. These specify the details of the response or describe the response body A blank line, indicating the end of the response metadata An optional response body.</description>
    </item>
    
    <item>
      <title>Strict Mode</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/c-js/08-strict-mode/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/c-js/08-strict-mode/</guid>
      <description>JavaScript has been around a long time, and a lot of JavaScript code has been written by inexperienced programmers. Browser manufacturers compensated for this by allowing lenient interpretation of JavaScript programs, and by ignoring many errors as they occurred.
While this made poorly-written scripts run, arguably they didn&amp;rsquo;t run well. In ECMA5, strict mode was introduced to solve the problems of lenient interpretation.
Strict mode according to the Mozilla Developer Network:</description>
    </item>
    
    <item>
      <title>Summary</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/04-node/08-summary/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/04-node/08-summary/</guid>
      <description>Node, and its package manager, npm, are powerful tools for developing server-side applications in JavaScript. In the past chapter, we&amp;rsquo;ve discussed the event loop that drives Node&amp;rsquo;s asynchronous, event-driven approach, and the asynchronous function pattern employed by many node libraries. We&amp;rsquo;ve also talked about how Node.js code can be organized into modules, how those modules can be imported with a require() call, and how the node package manager (npm) can be used to download and install open-source packages locally.</description>
    </item>
    
    <item>
      <title>Web Hooks</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/08-routing/08-web-hooks/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/08-routing/08-web-hooks/</guid>
      <description>A lighter-weight alternative to a full-fledged API is a webhook. A webhook is simply an address a web application is instructed to make a HTTP request against when a specific event happens. For example, you can set your GitHub repository to trigger a webhook when a new commit is made to it. You simply provide the URL it should send a request to, and it will send a request with a payload (based on the event).</description>
    </item>
    
    <item>
      <title>CSS Colors</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/b-css/09-colors/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/b-css/09-colors/</guid>
      <description>CSS also has many properties that can be set to a color, i.e. color, background-color, border-color, box-shadow, etc. Colors consist of three or four values corresponding to the amount of red, green, and blue light blended to create the color. The optional fourth value is the alpha, and is typically used to specify transparency.
Colors are stored as 24-bit values, with 8 bits for each of the four channels (R,G,B,and A), representing 256 possible values (2^8) for each channel.</description>
    </item>
    
    <item>
      <title>OAuth</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/09-auth/09-oauth/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/09-auth/09-oauth/</guid>
      <description>OAuth 2.0 is perhaps the best-known single-sign-on solution. Many of the big internet players provide OAuth services: Google, Microsoft, Facebook, Twitter, etc. However, OAuth is significantly more complex than the other approaches we&amp;rsquo;ve talked about, as it really a standard for access delegation, i.e. a way for users to authorize third-party apps to access their information stored with the identity provider.
I.e. if you write an app that works with the Facebook API and needs access to a users&amp;rsquo; friends list, then OAuth allows you to authorize Facebook to share that info with your app.</description>
    </item>
    
    <item>
      <title>Regular Expressions</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/c-js/09-regexp/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/c-js/09-regexp/</guid>
      <description>CONSOLE The JavaScript String prototype has some very powerful methods, such as String.prototype.includes() which recognizes when a string contains a substring - i.e.:
&amp;#34;foobarwhen&amp;#34;.includes(&amp;#34;bar&amp;#34;) would evaluate to true. But what if you needed a more general solution? Say, to see if the text matched a phone number pattern like XXX-XXX-XXXX? That&amp;rsquo;s where Regular Expressions come in.
Regular Expressions are a sequence of characters that define a pattern that can be searched for within a string.</description>
    </item>
    
    <item>
      <title>Sessions</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/06-dynamic-web-servers/09-sessions/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/06-dynamic-web-servers/09-sessions/</guid>
      <description>If HTTP is stateless, how do e-commerce websites manage to keep track of the contents of your shopping cart as you navigate from page to page? The answer is the use of a session - a technique by which state is added to a web application.
Info
The term session appears a lot in web development, and can mean different things in different contexts. But there is a common thread in each - a session is a form of connection between the client and server.</description>
    </item>
    
    <item>
      <title>Status Codes</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/02-http/09-status-codes/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/02-http/09-status-codes/</guid>
      <description>The status-line consists of a numeric code, followed by a space, and then a human-readable status message that goes with the code. The codes themselves are 3-digit numbers, with the first number indicating a general category the response status falls into. Essentially, the status code indicates that the request is being fulfilled, or the reason it cannot be.
1XX Status Codes Codes falling in the 100&amp;rsquo;s provide some kind of information, often in response to a HEAD or upgrade request.</description>
    </item>
    
    <item>
      <title>Summary</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/03-asynchronous-js/09-summary/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/03-asynchronous-js/09-summary/</guid>
      <description>In this chapter we learned about many of the approaches and challenges involved in concurrent programming, including asynchronous programming. JavaScript adopts the asynchronous approach through its use of the event loop and queue, allowing asynchronous processes to be invoked, processed on separate threads, and posting their results as new messages on the event queue to be processed when the main thread gets to them.
We saw how this approach allows for multi-threaded programs in the browser through the use of web workers, each of which runs a separate JavaScript interpreter with its own event loop and queue.</description>
    </item>
    
    <item>
      <title>Summary</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/08-routing/09-summary/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/08-routing/09-summary/</guid>
      <description>In this chapter, we exported the idea of routes, a mechanism for mapping a request to the appropriate endpoint function to generate a response. Routes typically consist of both the request URL and the request method. RESTful routes provide a common strategy for implementing CRUD methods for a server-generated resource; any programmer familiar with REST will quickly be able to suss out the appropriate route.
We also explored routers are objects that make routing more manageable to implement.</description>
    </item>
    
    <item>
      <title>CSS and Text</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/b-css/10-text/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/b-css/10-text/</guid>
      <description>As the original purpose of the World-Wide-Web was to disseminate written information, it should be no surprise that CSS would provide many properties for working with text. Some of the most commonly employed properties are:
font-family defines the font to use for the text. Its value is one or more font family or generic font names, i.e. font-family: Tahoma, serif, font-family: cursive or font-family: &amp;quot;Comic Sans&amp;quot;. Font family names are typically capitalized and, if they contain spaces or special characters, double-quoted.</description>
    </item>
    
    <item>
      <title>JSON</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/c-js/10-json/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/c-js/10-json/</guid>
      <description>JSON is an acronym for JavaScript Object Notation, a serialization format that was developed in conjunction with ECMAScript 3. It is a standard format, as set by ECMA-404.
JSON Format Essentially, it is a format for transmitting JavaScript objects. Consider the JavaScript object literal notation:
var wilma = { name: &amp;#34;Wilma Flintstone&amp;#34;, relationship: &amp;#34;wife&amp;#34; } var pebbles = { name: &amp;#34;Pebbles Flintstone&amp;#34;, age: 3, relationship: &amp;#34;daughter&amp;#34; } var fred = { name: &amp;#34;Fred Flintstone&amp;#34;, job: &amp;#34;Quarry Worker&amp;#34;, payRate: 8, dependents: [wilma, pebbles] } If we were to express the same object in JSON:</description>
    </item>
    
    <item>
      <title>Response Headers</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/02-http/10-response-headers/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/02-http/10-response-headers/</guid>
      <description>Response headers take the form of key-value pairs, separated by colons : and terminated with a CRLF (a carriage return and line feed character), just like Request Headers (both are types of Message Headers). For example, this header:
Expires: Wed, 12 Jun 2019 08:00:00 CST indicates to the browser that this content will expire June 12, 2019 at 8AM Central Standard Time. The browser can use this value when populating its cache, allowing it to use the cached version until the expiration time, reducing the need to make requests.</description>
    </item>
    
    <item>
      <title>Summary</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/09-auth/10-summary/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/09-auth/10-summary/</guid>
      <description>In this chapter we discussed many of the possible authentication strategies for web applications, as well as the strengths and drawbacks. To reiterate the most salient points:
Passwords should NEVER be stored as plain text! Authentication processes should follow current industry best-practices. This is not the place to experiment! Industry best practices are constantly changing, as ever-improving computer technology renders older techniques ineffective Following these guidelines can help keep your users safe and secure.</description>
    </item>
    
    <item>
      <title>Template Rendering</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/06-dynamic-web-servers/10-template-rendering/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/06-dynamic-web-servers/10-template-rendering/</guid>
      <description>While skilled programmers may have chafed at the restrictions imposed by server pages, there was one aspect that came to be greatly valued - the ability to embed script directly in HTML, and have it evaluated and concatenated into the HTML text.
Template Libraries This is where template libraries come in. A template library allows you to write your HTML content as HTML in a separate file with a special syntax to inject dynamic programming script.</description>
    </item>
    
    <item>
      <title>AJAX</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/c-js/11-ajax/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/c-js/11-ajax/</guid>
      <description>Asynchronous JavaScript and XML (AJAX) is a term coined by Jesse James Garrett to describe a technique of using the XMLHttpRequest object to request resources directly from JavaScript. As the name implies, this was originally used to request XML content, but the technique can be used with any kind of data.
The XMLHttpRequest The XMLHttpRequest object is modeled after how the window object makes web requests. You can think of it as a state machine that can be in one of several possible states, defined by both a constant and an unsigned short value:</description>
    </item>
    
    <item>
      <title>CSS Box Model</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/b-css/11-box-model/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/b-css/11-box-model/</guid>
      <description>As the browser lays out HTML elements in a page, it uses the CSS Box Model to determine the size and space between elements. The CSS box is composed of four nested areas (or outer edges): the content edge, padding edge, border edge, and margin edge.
Box Areas Content Area contains the actual content of the element (the text, image, etc). By default the CSS properties width and height set this size, and the min-width, min-height, max-width, max-height constrain it (but see the discussion of box-sizing below).</description>
    </item>
    
    <item>
      <title>Response Body</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/02-http/11-response-body/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/02-http/11-response-body/</guid>
      <description>After the response headers and an extra CRLF (carriage return and line feed) is the response body.
The body is typically text (for HTML, CSS, JavaScript, and other text files) or binary data (for images, video, and other file types).
Setting the Content-Type and Content-Length headers lets the web client know what kind of data, and how much of it, should be expected. If these headers are not supplied in the response, the browser may treat the body as a blob of binary data, and only offer to save it.</description>
    </item>
    
    <item>
      <title>Script Injection</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/06-dynamic-web-servers/11-script-injection/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/06-dynamic-web-servers/11-script-injection/</guid>
      <description>Whenever we render content created by users, we open the door to script injection, a kind of attack where a malicious user adds script tags to the content they are posting. Consider this form:
&amp;lt;form action=&amp;#34;post&amp;#34;&amp;gt; &amp;lt;label for=&amp;#34;comment&amp;#34;&amp;gt; &amp;lt;textarea name=&amp;#34;comment&amp;#34;&amp;gt;&amp;lt;/textarea&amp;gt; &amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;submit&amp;#34;/&amp;gt; &amp;lt;/form&amp;gt; The intent is to allow the user to post comments on the page. But a malicious user could enter something like:
What an awesome site &amp;lt;script src=&amp;#34;http://malic.</description>
    </item>
    
    <item>
      <title>CSS Positioning</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/b-css/12-positioning/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/b-css/12-positioning/</guid>
      <description>By default HTML elements are positioned in the page using the HTML flow algorithm. You can find a detailed discussion in the MDN Documentation. However, you may want to override this and manually position elements, which you can do with the CSS properties position, left, top, right, and bottom.
The Positioning Context First, we need to understand the positioning context, this is basically the area an element is positioned within. The left, top, right, and bottom properties affect where an element appears within its context.</description>
    </item>
    
    <item>
      <title>Full Stack Development</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/06-dynamic-web-servers/12-full-stack/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/06-dynamic-web-servers/12-full-stack/</guid>
      <description>Server pages represented one approach to tackling the dynamic web server challenge, and one that was especially suitable for those web developers who primarily worked with static HTML, CSS, and JavaScript backgrounds.
For those that were already skilled programmers, the custom server approach provided less confinement and greater control. But it came at a cost - the programmer had to author the entire server. Writing a server from scratch is both a lot of work, and also introduces many more points where design issues can lead to poor performance and vulnerable web apps.</description>
    </item>
    
    <item>
      <title>HTTP 2.0</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/02-http/12-http-2-0/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/02-http/12-http-2-0/</guid>
      <description>You may have noticed that the earlier parts of this chapter focused on HTTP version 1.1, while mentioning version 2.0. You might wonder why we didn&amp;rsquo;t instead look at version 2.0 - and it&amp;rsquo;s a valid question.
In short, HTTP 2.0 was created to make the request-response pattern of the web more efficient. One method it uses to do so is switching from text-based representations of requests and responses to binary-based representations.</description>
    </item>
    
    <item>
      <title>CSS Layouts</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/b-css/13-layouts/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/b-css/13-layouts/</guid>
      <description>We often speak of the separation of concerns principle in the context of web development as setting up the roles of HTML, CSS, and JavaScript. In this understanding, HTML provides the organization of content, CSS provides for the presentation of the content, and JavaScript provides for user interaction.
In this understanding, CSS is often tasked with the role of laying out elements on the page. More specifically, it overrides the default flow of HTML elements (see our earlier discussion of block vs.</description>
    </item>
    
    <item>
      <title>Statelessness and Scaling</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/02-http/13-statelessness-and-scaling/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/02-http/13-statelessness-and-scaling/</guid>
      <description>One final point to make about Hyper-Text Transfer Protocol. It is a stateless protocol. What this means is that the server does not need to keep track of previous requests - each request is treated as though it was the first time a request has been made.
This approach is important for several reasons. One, if a server must keep track of previous requests, the amount of memory required would grow quickly, especially for popular web sites.</description>
    </item>
    
    <item>
      <title>Summary</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/06-dynamic-web-servers/13-summary/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/06-dynamic-web-servers/13-summary/</guid>
      <description>In this chapter we have learned about several approaches to creating dynamic web servers, including server pages, custom web servers, and full stack development, often using a web development framework. We also learned how dynamic webservers can handle data and file uploads from HTML forms, as well as some security concerns involved. We also saw how state can be introduced to web apps using cookies and sessions.
In the next few chapters, we&amp;rsquo;ll explore these ideas in more detail.</description>
    </item>
    
    <item>
      <title>Responsive Web Design</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/b-css/14-responsive-web-design/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/b-css/14-responsive-web-design/</guid>
      <description>Modern websites are displayed on a wide variety of devices, with screen sizes from 640x480 pixels (VGA resolution) to 3840x2160 pixels (4K resolution). It should be obvious therefore that one-size-fits-all approach to laying out web applications does not work well. Instead, the current best practice is a technique known as Responsive Web Design. When using this strategy your web app should automatically adjusts the layout of the page based on how large the device screen it is rendered on.</description>
    </item>
    
    <item>
      <title>Summary</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/02-http/14-summary/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/02-http/14-summary/</guid>
      <description>In this chapter, we explored the Hyper-Text Transfer Protocol (HTTP), the technology used to exchange data across the web. We saw how requests and responses are simply well-structured streams of text or data exchanged across a packet-switched network. We examined the structure of these requests, and saw how they all use a similar pattern of a request or response line, a series of headers carrying metadata about the request or response, and an optional body.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://ksu-cs-textbooks.github.io/cis526/00-forward/01-introduction/slides/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/00-forward/01-introduction/slides/</guid>
      <description>Welcome to CIS 526
Web Application Development
Welcome to CC 515
Full Stack Web Development Russell Feldhausen Pronouns: he/him
(785) 292-3121 (Call/Text)
2213 Engineering Hall
(working remotely)
russfeld AT ksu DOT edu
https://russfeld.me - @russfeld
Email Preferred Communication Discord - Course Questions, Discussions, etc Email - Personal Issues, Grading Questions, To-dos, etc Email is official, Discord is more flexible Content Credits Nathan Bean - nhbean AT ksu DOT edu</description>
    </item>
    
    <item>
      <title></title>
      <link>https://ksu-cs-textbooks.github.io/cis526/00-forward/03-where-to-find-help-slides/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/00-forward/03-where-to-find-help-slides/</guid>
      <description>CIS 526 / CC 515
Where to Find HelpAssignment IssuesCourse ResourcesDiscordIt!Email Instructor (Last Resort)Canvas IssuesK-State IT Helpdesk - helpdesk@ksu.eduK-State Canvas HelpInstructure Canvas GuidesEmail Instructor (Last Resort)Codio IssuesCodio SupportGrading, Administrative &amp; Interpersonal IssuesEmail InstructorAcademic AdvisorCollege/Dept. Academic StaffK-State Office of Student LifeReport it: ksu.edu/reportErrors, Omissions &amp; SuggestionsEmail InstructorExtra Credit Available!Quick ReviewCanvas - helpdesk@ksu.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://ksu-cs-textbooks.github.io/cis526/y-announcements/week01/slides/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/y-announcements/week01/slides/</guid>
      <description>Week 1 AnnouncementsRussell FeldhausenPronouns: he/him
(785) 292-3121 (Call/Text)
2213 Engineering Hall
(working remotely)
russfeld AT ksu DOT edu
https://russfeld.me - @russfeld
Email PreferredThe CourseGated Modules on Canvas1 Module Per WeekCheck Due DatesMany Activities &amp; Tutorials6 MilestonesCodioOnline IDELinux VM - rootStandardized EnvironmentTeacher AccessGitHub ClassroomCentralized OrganizationFeedback Pull RequestsKeep Code PrivateCommunicationDiscord - Course Questions, Discussions, etcEmail - Personal Issues, Grading Questions, To-dos, etcEmail is official, Discord is more flexibleSuccessGrowth MindsetDon&#39;t just read/watch, engageWork IterativelySave Early &amp; OftenAsk for HelpProjectCommunity Chest6 MilestonesMostly FunctionalityStyle &amp; Design Count!</description>
    </item>
    
    <item>
      <title></title>
      <link>https://ksu-cs-textbooks.github.io/cis526/y-announcements/week02/slides/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/y-announcements/week02/slides/</guid>
      <description>Week 2 AnnouncementsThis WeekMon: Milestone 1 DueFri: Week 2 LessonsNext Mon: Milestone 2Milestone GradingWill Grade This WeekLook for Code Comments in GitHubUse Submission Comments or Release NotesBe patient!Week 2Advanced JavaScriptJSON and AJAXAsynchronous JSWeb WorkersNode.jsMilestone 2Get Box Locations via AJAXProgrammatically Build WebpageSame Overall Design as BeforeCORS IssuesLibraries?Keep in Touch!</description>
    </item>
    
    <item>
      <title></title>
      <link>https://ksu-cs-textbooks.github.io/cis526/y-announcements/week03/slides/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/y-announcements/week03/slides/</guid>
      <description>Week 3 AnnouncementsThis WeekMon: Milestone 2 DueFri: Week 3 LessonsNext Mon: Milestone 3Milestone GradingWill Grade This WeekLook for Code Comments in GitHubUse Submission Comments or Release NotesBe patient!Week 3Web ServersRequest/ResponseServing Files &amp; MediaRegular ExpressionsMilestone 3Serve Static Files from NodeHandle MIME TypesCorrect Content Length404 ErrorsMilestone 1 &amp; 2favicon filesKeep in Touch!</description>
    </item>
    
    <item>
      <title></title>
      <link>https://ksu-cs-textbooks.github.io/cis526/y-announcements/week04/slides/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/y-announcements/week04/slides/</guid>
      <description>Week 4 AnnouncementsThis WeekMon: Milestone 3 DueFri: Week 4 LessonsNext Tues: No MilestoneMilestone 3 GradingWill Grade This WeekLook for Code Comments in GitHubUse Submission Comments or Release NotesBe patient!Week 4Dynamic Web ServersECMAScript Server PagesFile UploadsSessionsBlog TutorialMilestone 4Express App &amp; RoutingStatic MiddlewareAPI EndpointsSQLite DatabaseDynamic PagesForm SubmissionKeep in Touch!</description>
    </item>
    
    <item>
      <title></title>
      <link>https://ksu-cs-textbooks.github.io/cis526/y-announcements/week05/slides/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/y-announcements/week05/slides/</guid>
      <description>Week 5 AnnouncementsThis WeekFri: Week 5 LessonsNext Mon: Milestone 4Week 5Template RenderingData SerializationDatabasesRoutingBlog TutorialMilestone 4Express App &amp; RoutingStatic MiddlewareAPI EndpointsSQLite DatabaseDynamic PagesForm SubmissionKeep in Touch!Discussions on Discord&#34;Tea Time&#34; Office HoursTuesday 3:30 | Friday 10:30One-on-One Office Hours</description>
    </item>
    
    <item>
      <title></title>
      <link>https://ksu-cs-textbooks.github.io/cis526/y-announcements/week06/slides/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/y-announcements/week06/slides/</guid>
      <description>Week 6 AnnouncementsThis WeekMon: Milestone 4Fri: Week 6 LessonsNext Mon: Milestone 5Week 6AuthenticationAPIsWeb HooksWeb FrameworksBlog TutorialMilestone 5Add AuthenticationUser RoutesProtect RoutesLink Request to UserDB ChangesKeep in Touch!Discussions on Discord&#34;Tea Time&#34; Office HoursTuesday 3:30 | Friday 10:30One-on-One Office Hours</description>
    </item>
    
    <item>
      <title></title>
      <link>https://ksu-cs-textbooks.github.io/cis526/y-announcements/week07/slides/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/y-announcements/week07/slides/</guid>
      <description>Week 7 AnnouncementsThis WeekMon: Milestone 5Next Mon: Week 7 &amp; 8 LessonsNext Fri: Milestone 6Week 7 &amp; 8Single Sign-OnCAS AuthenticationASP.NET MVCReactMilestone 6Fulfilling RequestsUser RolesUser ManagementCreate New BoxesAesthetics &amp; Usability200 PointsAesthetics &amp; UsabilityConsistent Look &amp; FeelMinimize &#34;Clicks&#34;Smart RoutingHelpful Labels &amp; ErrorsIconographyNavigation &amp; ContextHover AnimationsKeep in Touch!</description>
    </item>
    
    <item>
      <title></title>
      <link>https://ksu-cs-textbooks.github.io/cis526/y-announcements/week08/slides/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cis526/y-announcements/week08/slides/</guid>
      <description>Week 8 AnnouncementsThis WeekMon: Week 7 &amp; 8 LessonsFri: Milestone 6Week 7 &amp; 8Single Sign-OnCAS AuthenticationASP.NET MVCReactMilestone 6Fulfilling RequestsUser RolesUser ManagementCreate New BoxesAesthetics &amp; Usability200 PointsAesthetics &amp; UsabilityConsistent Look &amp; FeelMinimize &#34;Clicks&#34;Smart RoutingHelpful Labels &amp; ErrorsIconographyNavigation &amp; ContextHover AnimationsKeep in Touch!Discussions on Discord&#34;Tea Time&#34;</description>
    </item>
    
  </channel>
</rss>
