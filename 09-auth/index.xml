




	
	
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		
		
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Authentication on CIS 526 Textbook</title>
    <link>https://ksu-cs-textbooks.github.io/cis526/09-auth/</link>
    <description>Recent content in Authentication on CIS 526 Textbook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 Aug 2018 10:53:05 -0500</lastBuildDate><atom:link href="https://ksu-cs-textbooks.github.io/cis526/09-auth/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/09-auth/01-introduction/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis526/09-auth/01-introduction/</guid>
      <description>An important part of any dynamic web server is controlling how, and by whom, it is used. This is the domain of authentication and authorization. Authentication refers to mechanisms used to establish the identity of a user, and authorization refers to determining if an authenticated user has permission to do the requested action in the system. Collectively, these two concepts are often referred to by the abbreviation auth.
Consider a content management system (CMS) - a dynamic website for hosting content created by authorized users.</description>
    </item>
    <item>
      <title>HTTP Authentication</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/09-auth/02-http-auth/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis526/09-auth/02-http-auth/</guid>
      <description>The recognition of a need for authentication is not new to the web - it&amp;rsquo;s been there since the earliest standards. In fact, the original URL specification included an optional username and password as part of its format (specified as [username]:[password]@ between the protocol and host). I.e. to make a HTTP authenticated request against the CS departmental server you might use:
https://willie:purpleandwhite@cs.ksu.edu/ However, the use of authentication URLS is now highly discouraged and has been stripped from most browsers, as it is considered a security risk.</description>
    </item>
    <item>
      <title>Password Authentication</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/09-auth/03-password-auth/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis526/09-auth/03-password-auth/</guid>
      <description>One of the more common approaches used in modern dynamic webservers - especially those that are already using a database - is to have each user create an account and log in with a username and password. The primary difference in this approach from the HTTP Basic one is that:
The webserver provides a login page with a form for submitting the username/password (allowing it to be customized to match the site) On an successful authentication, a cookie is used to persist the user&amp;rsquo;s session, rather than re-submitting the Authentication header The actual difference in your server code between the two approaches is not that large.</description>
    </item>
    <item>
      <title>Stronger Passwords</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/09-auth/04-stronger-passwords/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis526/09-auth/04-stronger-passwords/</guid>
      <description>Now that we&amp;rsquo;ve discussed how to build a password-based authentication system as securely as possible, we should take a moment to understand what makes a good password. While we can&amp;rsquo;t force users to use good passwords, we can encourage them to do so, and potentially build some requirements/guidance into our sign up forms.
You&amp;rsquo;ve likely been told multiple times that a good password is a mix of numbers, upper- and lower-case letters, and special symbols.</description>
    </item>
    <item>
      <title>Single Sign On</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/09-auth/05-single-sign-on/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis526/09-auth/05-single-sign-on/</guid>
      <description>It should be clear from our earlier discussion that there are some very real challenges to writing a good authentication approach. These challenges can be broken into two categories, those that face us as the programmer, and those that arise from our users:
Programmer Challenges For us as the programmer, there are a lot of steps in creating an authentication strategy that we must get right. We also must be very careful about how we store the authentication data - i.</description>
    </item>
    <item>
      <title>CAS</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/09-auth/06-cas/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis526/09-auth/06-cas/</guid>
      <description>Let&amp;rsquo;s start our discussion of single-sign on strategies with Central Authentication Service (CAS). We&amp;rsquo;ll do this because it is one of the more straightforward approaches to Single Sign On, and one you&amp;rsquo;ve probably used every day as a K-State student, as it is the basis of Kansas State University&amp;rsquo;s eid login system.
CAS is a standard protocol that involves two servers and the client computer. One server is the host of the app and the other is the authentication server.</description>
    </item>
    <item>
      <title>SAML</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/09-auth/07-saml/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis526/09-auth/07-saml/</guid>
      <description>Security Assertion Markup Language (SAML) is a similar single-sign-on strategy to CAS, but one that has a wider adoption in the business world. The process is quite similar, with the addition that the user agent identifies the user before requesting access. How it does so is left to the implementer, but it can be an IP address, stored token, or other means.
1
Much like CAS, SAML provides its response in the form of XML.</description>
    </item>
    <item>
      <title>JSON Web Tokens</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/09-auth/08-jwt/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis526/09-auth/08-jwt/</guid>
      <description>A common thread across single-sign-on approaches is the issuing of some kind of ticket or certificate to identify the signed-in user. This is often stored within a cookie (which means it can be used to persist a connection with a web app). However, as the web matured, a more robust identity token became a standard: the JSON Web Token (JWT).
A JSON Web Token (JWT) consists of three parts:
A header with metadata A payload consisting of the data needed to identify the user A cryptographic signature verifying the payload and header The JWT puts the user information directly into a token that is served by the authentication server.</description>
    </item>
    <item>
      <title>OAuth</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/09-auth/09-oauth/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis526/09-auth/09-oauth/</guid>
      <description>OAuth 2.0 is perhaps the best-known single-sign-on solution. Many of the big internet players provide OAuth services: Google, Microsoft, Facebook, Twitter, etc. However, OAuth is significantly more complex than the other approaches we&amp;rsquo;ve talked about, as it really a standard for access delegation, i.e. a way for users to authorize third-party apps to access their information stored with the identity provider.
I.e. if you write an app that works with the Facebook API and needs access to a users&amp;rsquo; friends list, then OAuth allows you to authorize Facebook to share that info with your app.</description>
    </item>
    <item>
      <title>Summary</title>
      <link>https://ksu-cs-textbooks.github.io/cis526/09-auth/10-summary/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis526/09-auth/10-summary/</guid>
      <description>In this chapter we discussed many of the possible authentication strategies for web applications, as well as the strengths and drawbacks. To reiterate the most salient points:
Passwords should NEVER be stored as plain text! Authentication processes should follow current industry best-practices. This is not the place to experiment! Industry best practices are constantly changing, as ever-improving computer technology renders older techniques ineffective Following these guidelines can help keep your users safe and secure.</description>
    </item>
  </channel>
</rss>