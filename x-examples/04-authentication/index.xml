<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Authentication :: CIS 526 Textbook</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/04-authentication/</link><description>This example project builds on the previous RESTful API project by adding user authentication. This will ensure users are identified within the system and are only able to perform operations according to the roles assigned to their user accounts.
Project Deliverables At the end of this example, we will have a project with the following features:
An authentication system using Passport.js and CAS Valid JavaScript Web Tokens (JWTs) for authentication within the RESTful API Proper middleware to verify users have the correct role for each operation in the API Prior Work This project picks up right where the last one left off, so if you haven’t completed that one yet, go back and do that before starting this one.</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://textbooks.cs.ksu.edu/cis526/x-examples/04-authentication/index.xml" rel="self" type="application/rss+xml"/><item><title>Passport.js</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/04-authentication/01-passport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/04-authentication/01-passport/</guid><description> Authentication Libraries There are many different authentication libraries and methods available for Node.js and Express. For this project, we will use the Passport.js library. It supports many different authentication methods, and is a very common way that authentication is handled within JavaScript applications.
So, to begin, let’s install both passport and the passport-cas plugin:
$</description></item></channel></rss>