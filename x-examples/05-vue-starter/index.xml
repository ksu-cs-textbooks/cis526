<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Vue.js Starter Project :: CIS 526 Textbook</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/05-vue-starter/</link><description>This example project builds on the previous RESTful API project by scaffolding a frontend application using Vue.js. This will become the basis for a full frontend for the application over the next few projects.
Project Deliverables At the end of this example, we will have a project with the following features:
A single page frontend application running in Vue 3. Built-in Vue features such as Vue Router and Pinia. Access to components and icons from PrimeVue.</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://textbooks.cs.ksu.edu/cis526/x-examples/05-vue-starter/index.xml" rel="self" type="application/rss+xml"/><item><title>Vue Starter</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/05-vue-starter/01-vue-starter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/05-vue-starter/01-vue-starter/</guid><description>Vue Starter Now that we’ve built a solid backend for our application through our RESTful API, we can now start on building the frontend application that our users will actually interface with. There are many techniques and tools for writing frontend applications that we’ve covered in this course, but for this project we’re going to introduce once more, called Vue. Vue is very similar to React, but uses a more streamlined syntax and structure.</description></item><item><title>Exploring Vue</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/05-vue-starter/02-exploring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/05-vue-starter/02-exploring/</guid><description>Install the Vue Extension First, in our Visual Studio Code instance, we will want to install the Vue - Official extension. Make sure it is the correct, official plugin, since there are many that share a similar name in the VS Code extension marketplace:
As always, you can click the gear next to the install button to add it to the devcontainer.json file, so it will be installed in future devcontainers built using this repository.</description></item><item><title>PrimeVue</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/05-vue-starter/03-primevue/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/05-vue-starter/03-primevue/</guid><description>Install PrimeVue One of the first things we may want to install in our application is a library of ready-to-use components that we can use to build our application with. This can drastically cut down on the time it takes to build an application, and these libraries often come with a range of features that make our applications both user-friendly and very accessible.
While there are many different libraries to choose from, we’ll use the PrimeVue library.</description></item><item><title>Routing</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/05-vue-starter/04-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/05-vue-starter/04-routing/</guid><description>Vue Router Our Vue project already includes an instance of the Vue Router, which is used to handle routing between the various views, or pages, within our application. So, let’s take a minute to explore how the Vue Router works and how we can integrate it into our Menubar so we can move between the various views in our application.
First, let’s take a look at the existing src/router/index.js file that is generated for our application.</description></item><item><title>Tailwind</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/05-vue-starter/05-tailwind/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/05-vue-starter/05-tailwind/</guid><description>Integrating Tailwind While PrimeVue includes many helpful components we can use in our application, we may still need to adjust the layout a bit to match our expected style. For example, right now the content of each of our views has no margins or padding around it:
While we can easily write our own CSS directives to handle this, now is a good time to look at one of the more modern CSS libraries to see how to make this process much easier.</description></item><item><title>Dark Mode</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/05-vue-starter/06-darkmode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/05-vue-starter/06-darkmode/</guid><description>Configuring Dark Mode Many applications today include two default themes, a “light-mode” and a “dark-mode,” and users can choose which theme they receive by default through settings made either in their browser or their operating system. However, we can easily provide functionality in our application for users to override that setting if desired. The instructions for configuring a proper dark mode setup can be found in the Tailwind CSS Documentation, the PrimeVue Documentation, and a helpful article describing how to detect the user’s preference and store it in the browser’s local storage.</description></item><item><title>Icons</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/05-vue-starter/07-icons/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/05-vue-starter/07-icons/</guid><description>Adding Icons One of the best ways to make a web user interface very accessible and easy to use is by using globally recognized icons to represent certain actions, such as logging in, returning to the homepage, and editing items. Thankfully, there is an easy to use icon package that works directly with PrimeVue called PrimeIcons that we can use in our project. So, let’s quickly install that icon pack and see how we can use it in our application.</description></item><item><title>API Proxy</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/05-vue-starter/08-api-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/05-vue-starter/08-api-proxy/</guid><description>Connecting to our RESTful API Now that we have the basic structure of our application built and are becoming more familiar with both Vue and PrimeVue, let’s work on connecting to our backend RESTful API application and see if we can retrieve some data from our database. This is really the key feature that we want ensure works in our frontend application!
First, we need a way to run our backend application at the same time, and also we want to be able to connect to it directly through our frontend.</description></item><item><title>Authentication</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/05-vue-starter/09-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/05-vue-starter/09-auth/</guid><description>Handling User Authentication The time has come for us to finally handle user authentication on our frontend application. There are several different pieces that need to work together seamlessly for this to work properly, so let’s explore what that looks like and see what it takes to get our users properly authenticated so they can access secure data in our application.
Pinia Store First, since we want the user to be able to request a JWT that can be used throughout our application, it would make the most sense to store that token in a Pinia store, instead of storing it directly in any individual component.</description></item><item><title>Route Guards</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/05-vue-starter/10-routeguard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/05-vue-starter/10-routeguard/</guid><description>Automatically Logging In One thing we may quickly realize as we use our application as it currently stands is that the user has to click the “Login” button twice to actually get logged into the system. That seems a bit counterintuitive, so we should take a minute to try and fix that.
Effectively, we want our application to try and request a token on behalf of the user behind the scenes as soon as the page is loaded.</description></item><item><title>Accessing API</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/05-vue-starter/11-accessing-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/05-vue-starter/11-accessing-api/</guid><description>Accessing the API Finally, let’s see what it takes to actually access data that is available in our RESTful API using a properly authenticated request. For this example, we’re going to create a simple ProfileView page that the user can access by clicking the Profile button available after they’ve logged in. This page is just a test, but it will quickly demonstrate what we can do with our existing setup.</description></item></channel></rss>