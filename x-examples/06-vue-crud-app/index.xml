<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Vue.js CRUD App :: CIS 526 Textbook</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/06-vue-crud-app/</link><description>This example project builds on the previous Vue.js starter project by scaffolding a CRUD frontend for the basic users and roles tables.
Project Deliverables At the end of this example, we will have a project with the following features:
Prior Work This project picks up right where the last one left off, so if you haven’t completed that one yet, go back and do that before starting this one.
Let’s get started!</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://textbooks.cs.ksu.edu/cis526/x-examples/06-vue-crud-app/index.xml" rel="self" type="application/rss+xml"/><item><title>Roles View</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/06-vue-crud-app/01-roles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/06-vue-crud-app/01-roles/</guid><description>Roles View To start this project, let’s add a new view and a new component to explore the roles available in our application.
First, let’s create a simple component skeleton in a new src/components/roles/ folder. We’ll name it the RolesList component:
&lt;script setup> /** * @file Roles List Component * @author Russell Feldhausen &lt;russfeld@ksu.edu> */ // Import Libraries import { ref } from 'vue' import { api } from '@/configs/api' import { Card } from 'primevue' // Create Reactive State const roles = ref([]) // Load Roles api .</description></item><item><title>Users Table</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/06-vue-crud-app/02-users-table/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/06-vue-crud-app/02-users-table/</guid><description>Users Table Now that we have explored the basics of adding new menu items and routes to our application, let’s start working on the components to view and edit the users available in our application. To begin, we’ll work on the *GET ALL route, which will allow us to view all of the users on our system. For this, we’ll use the PrimeVue DataTable component, which is one of the most powerful components available in the PrimeVue library.</description></item><item><title>Edit User</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/06-vue-crud-app/03-edit-user/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/06-vue-crud-app/03-edit-user/</guid><description>Editing a User The next major feature we can add to our frontend application is the ability to edit a user. To do this, we’ll need to create a view and a component that contains the form fields for editing a user, as well as the logic to communicate any changes back to the API.
As always, we’ll start by adding a route to our src/router/index.js file for this route:</description></item><item><title>Edit Roles</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/06-vue-crud-app/04-edit-roles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/06-vue-crud-app/04-edit-roles/</guid><description>Editing Roles There are many different ways to edit the list of roles assigned to each user as well. One of the smoothest ways to select from a list of options is the PrimeVue AutoComplete component. Just like before, we can build our own version of this component that includes everything we included previously:
&lt;script setup> /** * @file Custom Autocomplete Multiple Field Component * @author Russell Feldhausen &lt;russfeld@ksu.edu> */ // Import Libraries import { computed, ref } from 'vue' import { InputIcon, IconField, FloatLabel, AutoComplete, Message } from 'primevue' // Incoming Props const props = defineProps({ // Field Name field: String, // Field Label label: String, // Field Icon icon: String, // Disable Editing disabled: { type: Boolean, default: false, }, //Values to choose from values: Array, // Value Label valueLabel: { type: String, default: 'name', }, errors: Array, }) // Find Error for Field const error = computed(() => { return props.</description></item></channel></rss>