<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Express Starter Project :: CIS 526 Textbook</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/01-express-starter/</link><description>This example project is the first in a series toward building a complete full-stack web application using Node.js and Express to create a RESTful API on the backend that connects to a database, and then a Vue single page application on the frontend.
In doing so, we’ll explore some of the standard ways web developers use existing tools, frameworks, and libraries to perform many of the operations we’ve learned how to do manually throughout this course.</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://textbooks.cs.ksu.edu/cis526/x-examples/01-express-starter/index.xml" rel="self" type="application/rss+xml"/><item><title>GitHub Codespace</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/01-express-starter/01-codespace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/01-express-starter/01-codespace/</guid><description>Creating a Codespace To begin, we will start with an empty GitHub repository. You can either create one yourself, or you may be working from a repository provided through GitHub Classroom.
At the top of the page, you may see either a Create a Codespace button in an empty repository, or a Code button that opens a panel with a Codespaces tab and a Create Codespace on main button in an initialized repository.</description></item><item><title>Express Starter</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/01-express-starter/02-express-starter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/01-express-starter/02-express-starter/</guid><description>Generating an Express Application Now that we have our dev container configured, we can start setting up an Express application. The recommended method in the documentation is to use the Express application generator, so we’ll use that method. You may want to refer to the documentation for this command to see what options are available.
Express Documentation You may also want to bookmark the Express Documentation website as well, since it contains lots of helpful information about how Express works that may not be covered in this tutorial.</description></item><item><title>Convert to ES Modules</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/01-express-starter/03-es-modules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/01-express-starter/03-es-modules/</guid><description>CommonJS vs ES Modules By default, the Express application generator creates an application using the CommonJS module format. This is the original way that JavaScript modules were packaged. However, many libraries and frameworks have been moving to the new ECMAScript module format (commonly referred to as ES modules), which is current official standard way of packaging JavaScript modules.
Since we want to build an industry-grade application, it would be best to update our application to use the new ES module format.</description></item><item><title>Debugging &amp; Logging</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/01-express-starter/04-debug-log/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/01-express-starter/04-debug-log/</guid><description>Debugging with the Debug Utility Now that we have a basic Express application, let’s add some helpful tools for developers to make our application easier to work with and debug in the future. These are some great quality of life tweaks that many professional web applications include, but often new developers fail to add them early on in development and waste lots of time adding them later. So, let’s take some time now to add these features before we start developing any actual RESTful endpoints.</description></item><item><title>Request Logging</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/01-express-starter/05-request-log/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/01-express-starter/05-request-log/</guid><description>Logging Requests with Morgan Now that we have configured a logging utility, let’s use it to also log all incoming requests sent to our web application. This will definitely make it much easier to keep track of what is going on in our application and make sure it is working correctly.
The Express application generator already installs a library for this, called morgan. We have already seen output from morgan before:</description></item><item><title>Other Libraries</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/01-express-starter/06-other-libraries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/01-express-starter/06-other-libraries/</guid><description>Other Useful Libraries Before we move on, let’s install a few other useful libraries that perform various tasks in our Express application.
Compression The compression middleware library does exactly what it says it will - it compresses any responses generated by the server and sent through the network. This can be helpful in many situations, but not all. Recall that compression is really just trading more processing time in exchange for less network bandwidth, so we may need to consider which of those we are more concerned about.</description></item><item><title>Environment</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/01-express-starter/07-environment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/01-express-starter/07-environment/</guid><description>Environment Variables As discussed earlier, an environment variable is a value present in memory in the operating system environment where a process is running. They contain important information about the system where the application is running, but they can also be configured by the user or system administrator to provide information and configuration to any processes running in that environment. This is especially used when working with containers like the dev container we built for this project.</description></item><item><title>OpenAPI Documentation</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/01-express-starter/08-open-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/01-express-starter/08-open-api/</guid><description>OpenAPI Documentation There are many different ways to document the features of a RESTful web application. One of the most commonly used methods is the OpenAPI Specification (OAS). OpenAPI was originally based on the Swagger specification, so we’ll sometimes still see references to the name Swagger in online resources.
At its core, the OpenAPI Specification defines a way to describe the functionality of a RESTful web application in a simple document format, typically structured as a JSON or YAML file.</description></item><item><title>JSDoc Documentation</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/01-express-starter/09-jsdoc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/01-express-starter/09-jsdoc/</guid><description>JSDoc Documentation It is also considered good practice to add additional documentation to all of the source files we create for this application. One common standard is JSDoc, which is somewhat similar to the JavaDoc comments we may have seen in previous courses. JSDoc can be used to generate documentation, but we won’t be using that directly in this project. However, we will be loosely following the JSDoc documentation standard to give our code comments some consistency.</description></item><item><title>Linting &amp; Formatting</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/01-express-starter/10-lint-format/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/01-express-starter/10-lint-format/</guid><description>Linting Finally, let’s look at two other tools that will help us write clean and maintainable JavaScript code. The first tool is eslint, which is a linting tool to find bugs and issues in JavaScript code by performing some static analysis on it. This helps us avoid any major issues in our code that can be easily detected just by looking at the overall style and structure of our code.</description></item><item><title>Summary</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/01-express-starter/11-summary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/01-express-starter/11-summary/</guid><description>Summary In this example project, we created an Express application with the following features:
GitHub Codespaces A sample Express application Updated to ES Modules Application logs with Winston and Morgan Other useful libraries such as Compression and Helmet A better development server using Nodemon Environment variables through Dotenvx Code documentation with JSDoc and OpenAPI comments Linting and Formatting with ESLint and Prettier This example project makes a great basis for building robust RESTful web APIs and other Express applications.</description></item></channel></rss>