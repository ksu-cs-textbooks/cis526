<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Express Starter Project :: CIS 526 Textbook</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/01-express-starter/</link><description>This example project is the first in a series toward building a complete full-stack web application using Node.js and Express to create a RESTful API on the backend that connects to a database, and then a Vue single page application on the frontend.
In doing so, we’ll explore some of the standard ways web developers use existing tools, frameworks, and libraries to perform many of the operations we’ve learned how to do manually throughout this course.</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://textbooks.cs.ksu.edu/cis526/x-examples/01-express-starter/index.xml" rel="self" type="application/rss+xml"/><item><title>GitHub Codespace</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/01-express-starter/01-codespace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/01-express-starter/01-codespace/</guid><description>YouTube Video Creating a Codespace To begin, we will start with an empty GitHub repository. You can either create one yourself, or you may be working from a repository provided through GitHub Classroom.
At the top of the page, you may see either a Create a Codespace button in an empty repository, or a Code button that opens a panel with a Codespaces tab and a Create Codespace on main button in an initialized repository.</description></item><item><title>Express Starter</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/01-express-starter/02-express-starter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/01-express-starter/02-express-starter/</guid><description>YouTube Video Generating an Express Application Now that we have our dev container configured, we can start setting up an Express application. The recommended method in the documentation is to use the Express application generator, so we’ll use that method. You may want to refer to the documentation for this command to see what options are available.
Express Documentation You may also want to bookmark the Express Documentation website as well, since it contains lots of helpful information about how Express works that may not be covered in this tutorial.</description></item><item><title>Convert to ES Modules</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/01-express-starter/03-es-modules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/01-express-starter/03-es-modules/</guid><description>YouTube Video CommonJS vs ES Modules By default, the Express application generator creates an application using the CommonJS module format. This is the original way that JavaScript modules were packaged. However, many libraries and frameworks have been moving to the new ECMAScript module format (commonly referred to as ES modules), which is current official standard way of packaging JavaScript modules.
Since we want to build an industry-grade application, it would be best to update our application to use the new ES module format.</description></item><item><title>Debugging &amp; Logging</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/01-express-starter/04-debug-log/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/01-express-starter/04-debug-log/</guid><description>YouTube Video Debugging with the Debug Utility Now that we have a basic Express application, let’s add some helpful tools for developers to make our application easier to work with and debug in the future. These are some great quality of life tweaks that many professional web applications include, but often new developers fail to add them early on in development and waste lots of time adding them later. So, let’s take some time now to add these features before we start developing any actual RESTful endpoints.</description></item><item><title>Request Logging</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/01-express-starter/05-request-log/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/01-express-starter/05-request-log/</guid><description>YouTube Video Logging Requests with Morgan Now that we have configured a logging utility, let’s use it to also log all incoming requests sent to our web application. This will definitely make it much easier to keep track of what is going on in our application and make sure it is working correctly.
The Express application generator already installs a library for this, called morgan. We have already seen output from morgan before:</description></item></channel></rss>