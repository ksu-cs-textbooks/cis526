<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Advanced Topics :: CIS 526 Textbook</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/07-advanced-topics/</link><description>This example project builds on the previous Vue.js CRUD app by discussing some more advanced topics related to web application development.
Project Deliverables At the end of this example, we will have a project with the following features:
Prior Work This project picks up right where the last one left off, so if you haven’t completed that one yet, go back and do that before starting this one.
Let’s get started!</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://textbooks.cs.ksu.edu/cis526/x-examples/07-advanced-topics/index.xml" rel="self" type="application/rss+xml"/><item><title>Pinia</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/07-advanced-topics/01-pinia/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/07-advanced-topics/01-pinia/</guid><description>YouTube Video Props So far, we’ve mostly been dealing with data in our Vue components in one of two ways:
It is requested directly from the RESTful API for the component (as in the UsersList and UserEdit components) It is passed in from a parent component, especially if it is a small helper component (as in the RoleChip and TextField components) The only exception is the user’s JSON Web Token (JWT), which we have stored in a Pinia store.</description></item><item><title>Reusing Components</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/07-advanced-topics/02-reusing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/07-advanced-topics/02-reusing/</guid><description>YouTube Video Reusing Components One of the many amazing features of a front-end framework such as Vue is the ability to reuse components in very powerful ways. For example, right now our application uses an entirely separate view and component to handle editing and updating users, but that means that we have to constantly jump back and forth between two views when working with users. Now that those views are using a shared Pinia store, we can use a PrimeVue DynamicDialog component to allow us to open the UserEdit component in a popup dialog on our UsersList component.</description></item><item><title>Preparing for Deployment</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/07-advanced-topics/03-deploy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/07-advanced-topics/03-deploy/</guid><description>YouTube Video Preparing for Deployment At this point, we have a pretty well developed application, so let’s start preparing for deployment. Our end goal is to build a single Docker container that contains our application, as well as the ability to deploy it along with a production database like Postgres.
To begin, we need to create a finalized version of our Vue frontend that can be embedded into our backend application directly.</description></item></channel></rss>