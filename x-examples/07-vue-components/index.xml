<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Vue.js Components :: CIS 526 Textbook</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/07-vue-components/</link><description>This example project builds on the previous Vue.js CRUD app by building a few custom components to view and update data in the application.
Project Deliverables At the end of this example, we will have a project with the following features:
Prior Work This project picks up right where the last one left off, so if you haven’t completed that one yet, go back and do that before starting this one.</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://textbooks.cs.ksu.edu/cis526/x-examples/07-vue-components/index.xml" rel="self" type="application/rss+xml"/><item><title>Pinia</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/07-vue-components/01-pinia/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/07-vue-components/01-pinia/</guid><description>YouTube Video Props So far, we’ve mostly been dealing with data in our Vue components in one of two ways:
It is requested directly from the RESTful API for the component (as in the UsersList and UserEdit components) It is passed in from a parent component, especially if it is a small helper component (as in the RoleChip and TextField components) The only exception is the user’s JSON Web Token (JWT), which we have stored in a Pinia store.</description></item></channel></rss>