<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>RESTful API :: CIS 526 Textbook</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/03-rest-api/</link><description>This example project builds on the previous Adding a Database project by using that project to create a RESTful API. That API can be used to access and modify the data in the database. We’ll also add a suite of unit tests to explore our API and ensure that it is working correctly.
Project Deliverables At the end of this example, we will have a project with the following features:</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://textbooks.cs.ksu.edu/cis526/x-examples/03-rest-api/index.xml" rel="self" type="application/rss+xml"/><item><title>API Design</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/03-rest-api/01-api-design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/03-rest-api/01-api-design/</guid><description>Good API Design There are many articles online that discuss best practices in API design. For this project, we’re going to follow a few of the most common recommendations:
API Versioning Proper Naming Conventions Proper HTTP Methods Proper HTTP Status Code Responses Let’s start with the first one - we can easily add a version number to our API’s URL paths. This allows us to make breaking changes to the API in the future without breaking any of the current functionality.</description></item><item><title>Unit Testing</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/03-rest-api/02-unit-testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/03-rest-api/02-unit-testing/</guid><description>Testing Web APIs Now that we have created our first route in our RESTful API, we can start to write unit tests that will confirm our API works as intended. Adding unit testing early in the development process makes it much easier to keep up with unit tests as new features are added or even explore test-driven development!
There are many libraries that can be used to unit test a RESTful API using Node.</description></item><item><title>Code Coverage</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/03-rest-api/03-coverage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/03-rest-api/03-coverage/</guid><description>Code Coverage It is often helpful to examine the code coverage of our unit tests. Thankfully, there is an easy way to enable that in our project using the c8 library. So, we can start by installing it:
$ npm install --save-dev c8 Once it is installed, we can simply add it to a new script in the package.json file that will run our tests with code coverage:
{ .</description></item><item><title>Other Tests</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/03-rest-api/04-other-tests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/03-rest-api/04-other-tests/</guid><description>Testing for Other Issues Let’s consider the scenario where our routes/api.js file was modified slightly to have some incorrect code in it:
// -=-=- other code omitted here -=-=- router.get('/', function (req, res, next) { res.json([ { versoin: "1.0", url: "/api/ver1/" } ]) }) In this example, we have misspelled the version attribute, and also used an incorrect URL for that version of the API. Unfortunately, if we actually make that change to our code, our existing unit test will not catch either error!</description></item></channel></rss>