<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>RESTful API :: CIS 526 Textbook</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/03-rest-api/</link><description>This example project builds on the previous Adding a Database project by using that project to create a RESTful API. That API can be used to access and modify the data in the database. We’ll also add a suite of unit tests to explore our API and ensure that it is working correctly.
Project Deliverables At the end of this example, we will have a project with the following features:</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://textbooks.cs.ksu.edu/cis526/x-examples/03-rest-api/index.xml" rel="self" type="application/rss+xml"/><item><title>API Design</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/03-rest-api/01-api-design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/03-rest-api/01-api-design/</guid><description>Good API Design There are many articles online that discuss best practices in API design. For this project, we’re going to follow a few of the most common recommendations:
API Versioning Proper Naming Conventions Proper HTTP Methods Proper HTTP Status Code Responses Let’s start with the first one - we can easily add a version number to our API’s URL paths. This allows us to make breaking changes to the API in the future without breaking any of the current functionality.</description></item></channel></rss>