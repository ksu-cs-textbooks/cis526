<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>RESTful API :: CIS 526 Textbook</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/03-rest-api/</link><description>This example project builds on the previous Adding a Database project by using that project to create a RESTful API. That API can be used to access and modify the data in the database. We’ll also add a suite of unit tests to explore our API and ensure that it is working correctly.
Project Deliverables At the end of this example, we will have a project with the following features:</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://textbooks.cs.ksu.edu/cis526/x-examples/03-rest-api/index.xml" rel="self" type="application/rss+xml"/><item><title>API Design</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/03-rest-api/01-api-design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/03-rest-api/01-api-design/</guid><description>YouTube Video Good API Design There are many articles online that discuss best practices in API design. For this project, we’re going to follow a few of the most common recommendations:
API Versioning Proper Naming Conventions Proper HTTP Methods Proper HTTP Status Code Responses Let’s start with the first one - we can easily add a version number to our API’s URL paths. This allows us to make breaking changes to the API in the future without breaking any of the current functionality.</description></item><item><title>Unit Testing</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/03-rest-api/02-unit-testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/03-rest-api/02-unit-testing/</guid><description>YouTube Video Testing Web APIs Now that we have created our first route in our RESTful API, we can start to write unit tests that will confirm our API works as intended. Adding unit testing early in the development process makes it much easier to keep up with unit tests as new features are added or even explore test-driven development!
There are many libraries that can be used to unit test a RESTful API using Node.</description></item><item><title>Code Coverage</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/03-rest-api/03-coverage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/03-rest-api/03-coverage/</guid><description>YouTube Video Code Coverage It is often helpful to examine the code coverage of our unit tests. Thankfully, there is an easy way to enable that in our project using the c8 library. So, we can start by installing it:
$ npm install --save-dev c8 Once it is installed, we can simply add it to a new script in the package.json file that will run our tests with code coverage:</description></item><item><title>Other Tests</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/03-rest-api/04-other-tests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/03-rest-api/04-other-tests/</guid><description>YouTube Video Testing for Other Issues Let’s consider the scenario where our routes/api.js file was modified slightly to have some incorrect code in it:
// -=-=- other code omitted here -=-=- router.get('/', function (req, res, next) { res.json([ { versoin: "1.0", url: "/api/ver1/" } ]) }) In this example, we have misspelled the version attribute, and also used an incorrect URL for that version of the API. Unfortunately, if we actually make that change to our code, our existing unit test will not catch either error!</description></item><item><title>Testing Roles</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/03-rest-api/05-testing-roles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/03-rest-api/05-testing-roles/</guid><description>YouTube Video Unit Testing Roles Routes Now that we’ve created a basic unit test for the /api route, we can now expand on that to test our other existing route, the /api/v1/roles route. Once again, there is only one method inside of this route, the GET ALL method, so the unit tests should be similar between these two routes. The only difference here is this route is now reading from the database instead of just returning a static JSON array.</description></item><item><title>Retrieve All</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/03-rest-api/06-retrieve-all/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/03-rest-api/06-retrieve-all/</guid><description>YouTube Video Users Routes Now that we have written and tested the routes for the Role model, let’s start working on the routes for the User model. These routes will be much more complex, because we want the ability to add, update, and delete users in our database.
To do this, we’ll create several RESTful routes, which pair HTTP verbs and paths to the various CRUD operations that can be performed on the database.</description></item><item><title>Retrieve One</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/03-rest-api/07-retrieve-one/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/03-rest-api/07-retrieve-one/</guid><description>YouTube Video Retrieve One Route Many RESTful web APIs also include the ability to retrieve a single object from a collection by providing the ID as a parameter to the route. So, let’s go ahead and build that route in our application as well.
Unused in Practice While this route is an important part of many RESTful web APIs, it can often go unused since most frontend web applications will simply use the retrieve all endpoint to get a list of items, and then it will just cache that result and filter the list to show a user a single entry.</description></item><item><title>Create</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/03-rest-api/08-create/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/03-rest-api/08-create/</guid><description>YouTube Video Create Route Now that we’ve explored the routes we can use to read data from our RESTful API, let’s look at the routes we can use to modify that data. The first one we’ll cover is the create route, which allows us to add a new entry to the database. However, before we do that, let’s create some helpful utility functions that we can reuse throughout our application as we develop more advanced routes.</description></item><item><title>Testing Create</title><link>https://textbooks.cs.ksu.edu/cis526/x-examples/03-rest-api/09-testing-create/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis526/x-examples/03-rest-api/09-testing-create/</guid><description>YouTube Video Manual Testing with Open API Before we start unit testing this route, let’s quickly do some manual testing using the Open API documentation site. It is truly a very handy way to work with our RESTful APIs as we are developing them, allowing us to test them quickly in isolation to make sure everything is working properly.
So, let’s start our server:
$ npm run dev Once it starts, we can navigate to the /docs URL, and we should see the Open API documentation for our site, including a new POST route for the users section:</description></item></channel></rss>